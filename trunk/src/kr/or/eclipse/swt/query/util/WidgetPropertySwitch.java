/**
 * Copyright 2011 jeeeyul@gmail.com
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 */

package kr.or.eclipse.swt.query.util;

import org.eclipse.swt.widgets.Widget;
import kr.or.eclipse.swt.query.util.internal.*;
import org.eclipse.ui.forms.widgets.FormText;
import java.lang.Boolean;
import org.eclipse.swt.widgets.TreeItem;
import org.eclipse.swt.graphics.Region;
import org.eclipse.swt.custom.StyleRange;
import org.eclipse.swt.graphics.Font;
import org.eclipse.jface.viewers.ILabelProvider;
import org.eclipse.swt.custom.CTabFolderRenderer;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.Image;
import java.lang.Character;
import org.eclipse.swt.widgets.ToolTip;
import org.eclipse.swt.widgets.Caret;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.dnd.DropTargetEffect;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.ui.forms.HyperlinkSettings;
import java.lang.Object;
import org.eclipse.swt.widgets.Layout;
import java.lang.Integer;
import java.lang.String;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.dnd.Transfer;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.dnd.DragSourceEffect;
import org.eclipse.swt.widgets.IME;
import org.eclipse.swt.graphics.Cursor;
import org.eclipse.swt.widgets.MenuItem;


/*
 * This file was generated by SWT Query SDK.
 * So you should not modify it manually.
 * If you want to customize this code, contact below:
 *
 * http://code.google.com/p/swtquery/
 */
public class WidgetPropertySwitch{
	private GetMaximizedSwitch getMaximizedSwitch = new GetMaximizedSwitch();
	private SetMaximizedSwitch setMaximizedSwitch = new SetMaximizedSwitch();
	private GetVisibleSwitch getVisibleSwitch = new GetVisibleSwitch();
	private SetVisibleSwitch setVisibleSwitch = new SetVisibleSwitch();
	private GetHorizontalPixelSwitch getHorizontalPixelSwitch = new GetHorizontalPixelSwitch();
	private SetHorizontalPixelSwitch setHorizontalPixelSwitch = new SetHorizontalPixelSwitch();
	private GetMoveableSwitch getMoveableSwitch = new GetMoveableSwitch();
	private SetMoveableSwitch setMoveableSwitch = new SetMoveableSwitch();
	private GetHorizontalIndexSwitch getHorizontalIndexSwitch = new GetHorizontalIndexSwitch();
	private SetHorizontalIndexSwitch setHorizontalIndexSwitch = new SetHorizontalIndexSwitch();
	private GetOriginSwitch getOriginSwitch = new GetOriginSwitch();
	private SetOriginSwitch setOriginSwitch = new SetOriginSwitch();
	private GetImagesSwitch getImagesSwitch = new GetImagesSwitch();
	private SetImagesSwitch setImagesSwitch = new SetImagesSwitch();
	private GetSingleSwitch getSingleSwitch = new GetSingleSwitch();
	private SetSingleSwitch setSingleSwitch = new SetSingleSwitch();
	private GetDataSwitch getDataSwitch = new GetDataSwitch();
	private SetDataSwitch setDataSwitch = new SetDataSwitch();
	private GetEchoCharSwitch getEchoCharSwitch = new GetEchoCharSwitch();
	private SetEchoCharSwitch setEchoCharSwitch = new SetEchoCharSwitch();
	private GetHeadClientSwitch getHeadClientSwitch = new GetHeadClientSwitch();
	private SetHeadClientSwitch setHeadClientSwitch = new SetHeadClientSwitch();
	private GetToolTipTextSwitch getToolTipTextSwitch = new GetToolTipTextSwitch();
	private SetToolTipTextSwitch setToolTipTextSwitch = new SetToolTipTextSwitch();
	private GetMenuBarSwitch getMenuBarSwitch = new GetMenuBarSwitch();
	private SetMenuBarSwitch setMenuBarSwitch = new SetMenuBarSwitch();
	private GetUnselectedImageVisibleSwitch getUnselectedImageVisibleSwitch = new GetUnselectedImageVisibleSwitch();
	private SetUnselectedImageVisibleSwitch setUnselectedImageVisibleSwitch = new SetUnselectedImageVisibleSwitch();
	private GetUrlSwitch getUrlSwitch = new GetUrlSwitch();
	private SetUrlSwitch setUrlSwitch = new SetUrlSwitch();
	private GetModifiedSwitch getModifiedSwitch = new GetModifiedSwitch();
	private SetModifiedSwitch setModifiedSwitch = new SetModifiedSwitch();
	private GetParagraphsSeparatedSwitch getParagraphsSeparatedSwitch = new GetParagraphsSeparatedSwitch();
	private SetParagraphsSeparatedSwitch setParagraphsSeparatedSwitch = new SetParagraphsSeparatedSwitch();
	private GetIncrementSwitch getIncrementSwitch = new GetIncrementSwitch();
	private SetIncrementSwitch setIncrementSwitch = new SetIncrementSwitch();
	private GetSortDirectionSwitch getSortDirectionSwitch = new GetSortDirectionSwitch();
	private SetSortDirectionSwitch setSortDirectionSwitch = new SetSortDirectionSwitch();
	private GetSecondsSwitch getSecondsSwitch = new GetSecondsSwitch();
	private SetSecondsSwitch setSecondsSwitch = new SetSecondsSwitch();
	private GetFullScreenSwitch getFullScreenSwitch = new GetFullScreenSwitch();
	private SetFullScreenSwitch setFullScreenSwitch = new SetFullScreenSwitch();
	private GetLabelProviderSwitch getLabelProviderSwitch = new GetLabelProviderSwitch();
	private SetLabelProviderSwitch setLabelProviderSwitch = new SetLabelProviderSwitch();
	private GetVisibleItemCountSwitch getVisibleItemCountSwitch = new GetVisibleItemCountSwitch();
	private SetVisibleItemCountSwitch setVisibleItemCountSwitch = new SetVisibleItemCountSwitch();
	private GetParentSwitch getParentSwitch = new GetParentSwitch();
	private SetParentSwitch setParentSwitch = new SetParentSwitch();
	private GetThumbSwitch getThumbSwitch = new GetThumbSwitch();
	private SetThumbSwitch setThumbSwitch = new SetThumbSwitch();
	private GetWordWrapSwitch getWordWrapSwitch = new GetWordWrapSwitch();
	private SetWordWrapSwitch setWordWrapSwitch = new SetWordWrapSwitch();
	private GetMinimizedSwitch getMinimizedSwitch = new GetMinimizedSwitch();
	private SetMinimizedSwitch setMinimizedSwitch = new SetMinimizedSwitch();
	private GetCaretOffsetSwitch getCaretOffsetSwitch = new GetCaretOffsetSwitch();
	private SetCaretOffsetSwitch setCaretOffsetSwitch = new SetCaretOffsetSwitch();
	private GetDecorationColorSwitch getDecorationColorSwitch = new GetDecorationColorSwitch();
	private SetDecorationColorSwitch setDecorationColorSwitch = new SetDecorationColorSwitch();
	private GetBoundsSwitch getBoundsSwitch = new GetBoundsSwitch();
	private SetBoundsSwitch setBoundsSwitch = new SetBoundsSwitch();
	private GetDigitsSwitch getDigitsSwitch = new GetDigitsSwitch();
	private SetDigitsSwitch setDigitsSwitch = new SetDigitsSwitch();
	private GetIgnoreCaseSwitch getIgnoreCaseSwitch = new GetIgnoreCaseSwitch();
	private SetIgnoreCaseSwitch setIgnoreCaseSwitch = new SetIgnoreCaseSwitch();
	private GetLeftSwitch getLeftSwitch = new GetLeftSwitch();
	private SetLeftSwitch setLeftSwitch = new SetLeftSwitch();
	private GetBottomSwitch getBottomSwitch = new GetBottomSwitch();
	private SetBottomSwitch setBottomSwitch = new SetBottomSwitch();
	private GetFilterSwitch getFilterSwitch = new GetFilterSwitch();
	private SetFilterSwitch setFilterSwitch = new SetFilterSwitch();
	private GetAllowDuplicatesSwitch getAllowDuplicatesSwitch = new GetAllowDuplicatesSwitch();
	private SetAllowDuplicatesSwitch setAllowDuplicatesSwitch = new SetAllowDuplicatesSwitch();
	private GetLayoutSwitch getLayoutSwitch = new GetLayoutSwitch();
	private SetLayoutSwitch setLayoutSwitch = new SetLayoutSwitch();
	private GetBackgroundImageSwitch getBackgroundImageSwitch = new GetBackgroundImageSwitch();
	private SetBackgroundImageSwitch setBackgroundImageSwitch = new SetBackgroundImageSwitch();
	private GetTabPositionSwitch getTabPositionSwitch = new GetTabPositionSwitch();
	private SetTabPositionSwitch setTabPositionSwitch = new SetTabPositionSwitch();
	private GetTitleBarBackgroundSwitch getTitleBarBackgroundSwitch = new GetTitleBarBackgroundSwitch();
	private SetTitleBarBackgroundSwitch setTitleBarBackgroundSwitch = new SetTitleBarBackgroundSwitch();
	private GetTextCharsSwitch getTextCharsSwitch = new GetTextCharsSwitch();
	private SetTextCharsSwitch setTextCharsSwitch = new SetTextCharsSwitch();
	private GetIMESwitch getIMESwitch = new GetIMESwitch();
	private SetIMESwitch setIMESwitch = new SetIMESwitch();
	private GetTabHeightSwitch getTabHeightSwitch = new GetTabHeightSwitch();
	private SetTabHeightSwitch setTabHeightSwitch = new SetTabHeightSwitch();
	private GetMaximizeVisibleSwitch getMaximizeVisibleSwitch = new GetMaximizeVisibleSwitch();
	private SetMaximizeVisibleSwitch setMaximizeVisibleSwitch = new SetMaximizeVisibleSwitch();
	private GetDragDetectSwitch getDragDetectSwitch = new GetDragDetectSwitch();
	private SetDragDetectSwitch setDragDetectSwitch = new SetDragDetectSwitch();
	private GetAlphaSwitch getAlphaSwitch = new GetAlphaSwitch();
	private SetAlphaSwitch setAlphaSwitch = new SetAlphaSwitch();
	private GetJavascriptEnabledSwitch getJavascriptEnabledSwitch = new GetJavascriptEnabledSwitch();
	private SetJavascriptEnabledSwitch setJavascriptEnabledSwitch = new SetJavascriptEnabledSwitch();
	private GetPreferredSizeSwitch getPreferredSizeSwitch = new GetPreferredSizeSwitch();
	private SetPreferredSizeSwitch setPreferredSizeSwitch = new SetPreferredSizeSwitch();
	private GetBackgroundSwitch getBackgroundSwitch = new GetBackgroundSwitch();
	private SetBackgroundSwitch setBackgroundSwitch = new SetBackgroundSwitch();
	private GetTopMarginSwitch getTopMarginSwitch = new GetTopMarginSwitch();
	private SetTopMarginSwitch setTopMarginSwitch = new SetTopMarginSwitch();
	private GetWeightsSwitch getWeightsSwitch = new GetWeightsSwitch();
	private SetWeightsSwitch setWeightsSwitch = new SetWeightsSwitch();
	private GetDoubleClickEnabledSwitch getDoubleClickEnabledSwitch = new GetDoubleClickEnabledSwitch();
	private SetDoubleClickEnabledSwitch setDoubleClickEnabledSwitch = new SetDoubleClickEnabledSwitch();
	private GetLayoutDataSwitch getLayoutDataSwitch = new GetLayoutDataSwitch();
	private SetLayoutDataSwitch setLayoutDataSwitch = new SetLayoutDataSwitch();
	private GetStyleRangesSwitch getStyleRangesSwitch = new GetStyleRangesSwitch();
	private SetStyleRangesSwitch setStyleRangesSwitch = new SetStyleRangesSwitch();
	private GetControlSwitch getControlSwitch = new GetControlSwitch();
	private SetControlSwitch setControlSwitch = new SetControlSwitch();
	private GetSashWidthSwitch getSashWidthSwitch = new GetSashWidthSwitch();
	private SetSashWidthSwitch setSashWidthSwitch = new SetSashWidthSwitch();
	private GetRendererSwitch getRendererSwitch = new GetRendererSwitch();
	private SetRendererSwitch setRendererSwitch = new SetRendererSwitch();
	private GetFontSwitch getFontSwitch = new GetFontSwitch();
	private SetFontSwitch setFontSwitch = new SetFontSwitch();
	private GetImageSwitch getImageSwitch = new GetImageSwitch();
	private SetImageSwitch setImageSwitch = new SetImageSwitch();
	private GetRightMinimumSizeSwitch getRightMinimumSizeSwitch = new GetRightMinimumSizeSwitch();
	private SetRightMinimumSizeSwitch setRightMinimumSizeSwitch = new SetRightMinimumSizeSwitch();
	private GetExpandedSwitch getExpandedSwitch = new GetExpandedSwitch();
	private SetExpandedSwitch setExpandedSwitch = new SetExpandedSwitch();
	private GetClientSwitch getClientSwitch = new GetClientSwitch();
	private SetClientSwitch setClientSwitch = new SetClientSwitch();
	private GetTitleBarForegroundSwitch getTitleBarForegroundSwitch = new GetTitleBarForegroundSwitch();
	private SetTitleBarForegroundSwitch setTitleBarForegroundSwitch = new SetTitleBarForegroundSwitch();
	private GetRectanglesSwitch getRectanglesSwitch = new GetRectanglesSwitch();
	private SetRectanglesSwitch setRectanglesSwitch = new SetRectanglesSwitch();
	private GetRightSwitch getRightSwitch = new GetRightSwitch();
	private SetRightSwitch setRightSwitch = new SetRightSwitch();
	private GetItemsSwitch getItemsSwitch = new GetItemsSwitch();
	private SetItemsSwitch setItemsSwitch = new SetItemsSwitch();
	private GetDefaultItemSwitch getDefaultItemSwitch = new GetDefaultItemSwitch();
	private SetDefaultItemSwitch setDefaultItemSwitch = new SetDefaultItemSwitch();
	private GetOrientationSwitch getOrientationSwitch = new GetOrientationSwitch();
	private SetOrientationSwitch setOrientationSwitch = new SetOrientationSwitch();
	private GetMessageSwitch getMessageSwitch = new GetMessageSwitch();
	private SetMessageSwitch setMessageSwitch = new SetMessageSwitch();
	private GetUnselectedCloseVisibleSwitch getUnselectedCloseVisibleSwitch = new GetUnselectedCloseVisibleSwitch();
	private SetUnselectedCloseVisibleSwitch setUnselectedCloseVisibleSwitch = new SetUnselectedCloseVisibleSwitch();
	private GetLeftMarginSwitch getLeftMarginSwitch = new GetLeftMarginSwitch();
	private SetLeftMarginSwitch setLeftMarginSwitch = new SetLeftMarginSwitch();
	private GetHoursSwitch getHoursSwitch = new GetHoursSwitch();
	private SetHoursSwitch setHoursSwitch = new SetHoursSwitch();
	private GetHoverImageSwitch getHoverImageSwitch = new GetHoverImageSwitch();
	private SetHoverImageSwitch setHoverImageSwitch = new SetHoverImageSwitch();
	private GetLinesVisibleSwitch getLinesVisibleSwitch = new GetLinesVisibleSwitch();
	private SetLinesVisibleSwitch setLinesVisibleSwitch = new SetLinesVisibleSwitch();
	private GetDefaultButtonSwitch getDefaultButtonSwitch = new GetDefaultButtonSwitch();
	private SetDefaultButtonSwitch setDefaultButtonSwitch = new SetDefaultButtonSwitch();
	private GetBottomMarginSwitch getBottomMarginSwitch = new GetBottomMarginSwitch();
	private SetBottomMarginSwitch setBottomMarginSwitch = new SetBottomMarginSwitch();
	private GetMinimumSwitch getMinimumSwitch = new GetMinimumSwitch();
	private SetMinimumSwitch setMinimumSwitch = new SetMinimumSwitch();
	private GetAlignmentSwitch getAlignmentSwitch = new GetAlignmentSwitch();
	private SetAlignmentSwitch setAlignmentSwitch = new SetAlignmentSwitch();
	private GetAlwaysShowScrollBarsSwitch getAlwaysShowScrollBarsSwitch = new GetAlwaysShowScrollBarsSwitch();
	private SetAlwaysShowScrollBarsSwitch setAlwaysShowScrollBarsSwitch = new SetAlwaysShowScrollBarsSwitch();
	private GetTopLeftSwitch getTopLeftSwitch = new GetTopLeftSwitch();
	private SetTopLeftSwitch setTopLeftSwitch = new SetTopLeftSwitch();
	private GetIndentSwitch getIndentSwitch = new GetIndentSwitch();
	private SetIndentSwitch setIndentSwitch = new SetIndentSwitch();
	private GetImeInputModeSwitch getImeInputModeSwitch = new GetImeInputModeSwitch();
	private SetImeInputModeSwitch setImeInputModeSwitch = new SetImeInputModeSwitch();
	private GetTopIndexSwitch getTopIndexSwitch = new GetTopIndexSwitch();
	private SetTopIndexSwitch setTopIndexSwitch = new SetTopIndexSwitch();
	private GetRightWidthSwitch getRightWidthSwitch = new GetRightWidthSwitch();
	private SetRightWidthSwitch setRightWidthSwitch = new SetRightWidthSwitch();
	private GetLayoutDeferredSwitch getLayoutDeferredSwitch = new GetLayoutDeferredSwitch();
	private SetLayoutDeferredSwitch setLayoutDeferredSwitch = new SetLayoutDeferredSwitch();
	private GetSeparatorControlSwitch getSeparatorControlSwitch = new GetSeparatorControlSwitch();
	private SetSeparatorControlSwitch setSeparatorControlSwitch = new SetSeparatorControlSwitch();
	private GetForegroundSwitch getForegroundSwitch = new GetForegroundSwitch();
	private SetForegroundSwitch setForegroundSwitch = new SetForegroundSwitch();
	private GetMaximizedControlSwitch getMaximizedControlSwitch = new GetMaximizedControlSwitch();
	private SetMaximizedControlSwitch setMaximizedControlSwitch = new SetMaximizedControlSwitch();
	private GetListVisibleSwitch getListVisibleSwitch = new GetListVisibleSwitch();
	private SetListVisibleSwitch setListVisibleSwitch = new SetListVisibleSwitch();
	private GetHeaderVisibleSwitch getHeaderVisibleSwitch = new GetHeaderVisibleSwitch();
	private SetHeaderVisibleSwitch setHeaderVisibleSwitch = new SetHeaderVisibleSwitch();
	private GetTextClientSwitch getTextClientSwitch = new GetTextClientSwitch();
	private SetTextClientSwitch setTextClientSwitch = new SetTextClientSwitch();
	private GetMonthSwitch getMonthSwitch = new GetMonthSwitch();
	private SetMonthSwitch setMonthSwitch = new SetMonthSwitch();
	private GetBlockSelectionSwitch getBlockSelectionSwitch = new GetBlockSelectionSwitch();
	private SetBlockSelectionSwitch setBlockSelectionSwitch = new SetBlockSelectionSwitch();
	private GetMenuSwitch getMenuSwitch = new GetMenuSwitch();
	private SetMenuSwitch setMenuSwitch = new SetMenuSwitch();
	private GetMinimizeVisibleSwitch getMinimizeVisibleSwitch = new GetMinimizeVisibleSwitch();
	private SetMinimizeVisibleSwitch setMinimizeVisibleSwitch = new SetMinimizeVisibleSwitch();
	private GetLineSpacingSwitch getLineSpacingSwitch = new GetLineSpacingSwitch();
	private SetLineSpacingSwitch setLineSpacingSwitch = new SetLineSpacingSwitch();
	private GetIDSwitch getIDSwitch = new GetIDSwitch();
	private SetIDSwitch setIDSwitch = new SetIDSwitch();
	private GetHrefSwitch getHrefSwitch = new GetHrefSwitch();
	private SetHrefSwitch setHrefSwitch = new SetHrefSwitch();
	private GetResizableSwitch getResizableSwitch = new GetResizableSwitch();
	private SetResizableSwitch setResizableSwitch = new SetResizableSwitch();
	private GetWidthSwitch getWidthSwitch = new GetWidthSwitch();
	private SetWidthSwitch setWidthSwitch = new SetWidthSwitch();
	private GetJustifySwitch getJustifySwitch = new GetJustifySwitch();
	private SetJustifySwitch setJustifySwitch = new SetJustifySwitch();
	private GetToolTipSwitch getToolTipSwitch = new GetToolTipSwitch();
	private SetToolTipSwitch setToolTipSwitch = new SetToolTipSwitch();
	private GetHoverDecorationColorSwitch getHoverDecorationColorSwitch = new GetHoverDecorationColorSwitch();
	private SetHoverDecorationColorSwitch setHoverDecorationColorSwitch = new SetHoverDecorationColorSwitch();
	private GetSizeSwitch getSizeSwitch = new GetSizeSwitch();
	private SetSizeSwitch setSizeSwitch = new SetSizeSwitch();
	private GetStippledSwitch getStippledSwitch = new GetStippledSwitch();
	private SetStippledSwitch setStippledSwitch = new SetStippledSwitch();
	private GetSelectionBackgroundSwitch getSelectionBackgroundSwitch = new GetSelectionBackgroundSwitch();
	private SetSelectionBackgroundSwitch setSelectionBackgroundSwitch = new SetSelectionBackgroundSwitch();
	private GetTextLimitSwitch getTextLimitSwitch = new GetTextLimitSwitch();
	private SetTextLimitSwitch setTextLimitSwitch = new SetTextLimitSwitch();
	private GetMaximumSwitch getMaximumSwitch = new GetMaximumSwitch();
	private SetMaximumSwitch setMaximumSwitch = new SetMaximumSwitch();
	private GetItemCountSwitch getItemCountSwitch = new GetItemCountSwitch();
	private SetItemCountSwitch setItemCountSwitch = new SetItemCountSwitch();
	private GetHeightSwitch getHeightSwitch = new GetHeightSwitch();
	private SetHeightSwitch setHeightSwitch = new SetHeightSwitch();
	private GetTopRightSwitch getTopRightSwitch = new GetTopRightSwitch();
	private SetTopRightSwitch setTopRightSwitch = new SetTopRightSwitch();
	private GetHyperlinkSettingsSwitch getHyperlinkSettingsSwitch = new GetHyperlinkSettingsSwitch();
	private SetHyperlinkSettingsSwitch setHyperlinkSettingsSwitch = new SetHyperlinkSettingsSwitch();
	private GetMinWidthSwitch getMinWidthSwitch = new GetMinWidthSwitch();
	private SetMinWidthSwitch setMinWidthSwitch = new SetMinWidthSwitch();
	private GetTransferSwitch getTransferSwitch = new GetTransferSwitch();
	private SetTransferSwitch setTransferSwitch = new SetTransferSwitch();
	private GetActiveImageSwitch getActiveImageSwitch = new GetActiveImageSwitch();
	private SetActiveImageSwitch setActiveImageSwitch = new SetActiveImageSwitch();
	private GetEditableSwitch getEditableSwitch = new GetEditableSwitch();
	private SetEditableSwitch setEditableSwitch = new SetEditableSwitch();
	private GetFormTextSwitch getFormTextSwitch = new GetFormTextSwitch();
	private SetFormTextSwitch setFormTextSwitch = new SetFormTextSwitch();
	private GetTouchEnabledSwitch getTouchEnabledSwitch = new GetTouchEnabledSwitch();
	private SetTouchEnabledSwitch setTouchEnabledSwitch = new SetTouchEnabledSwitch();
	private GetDropTargetEffectSwitch getDropTargetEffectSwitch = new GetDropTargetEffectSwitch();
	private SetDropTargetEffectSwitch setDropTargetEffectSwitch = new SetDropTargetEffectSwitch();
	private GetSimpleSwitch getSimpleSwitch = new GetSimpleSwitch();
	private SetSimpleSwitch setSimpleSwitch = new SetSimpleSwitch();
	private GetMarginColorSwitch getMarginColorSwitch = new GetMarginColorSwitch();
	private SetMarginColorSwitch setMarginColorSwitch = new SetMarginColorSwitch();
	private GetTopPixelSwitch getTopPixelSwitch = new GetTopPixelSwitch();
	private SetTopPixelSwitch setTopPixelSwitch = new SetTopPixelSwitch();
	private GetCheckedSwitch getCheckedSwitch = new GetCheckedSwitch();
	private SetCheckedSwitch setCheckedSwitch = new SetCheckedSwitch();
	private GetTitleBarBorderColorSwitch getTitleBarBorderColorSwitch = new GetTitleBarBorderColorSwitch();
	private SetTitleBarBorderColorSwitch setTitleBarBorderColorSwitch = new SetTitleBarBorderColorSwitch();
	private GetLockedSwitch getLockedSwitch = new GetLockedSwitch();
	private SetLockedSwitch setLockedSwitch = new SetLockedSwitch();
	private GetCaretSwitch getCaretSwitch = new GetCaretSwitch();
	private SetCaretSwitch setCaretSwitch = new SetCaretSwitch();
	private GetWrapIndentSwitch getWrapIndentSwitch = new GetWrapIndentSwitch();
	private SetWrapIndentSwitch setWrapIndentSwitch = new SetWrapIndentSwitch();
	private GetAutoHideSwitch getAutoHideSwitch = new GetAutoHideSwitch();
	private SetAutoHideSwitch setAutoHideSwitch = new SetAutoHideSwitch();
	private GetEnabledSwitch getEnabledSwitch = new GetEnabledSwitch();
	private SetEnabledSwitch setEnabledSwitch = new SetEnabledSwitch();
	private GetDragSourceEffectSwitch getDragSourceEffectSwitch = new GetDragSourceEffectSwitch();
	private SetDragSourceEffectSwitch setDragSourceEffectSwitch = new SetDragSourceEffectSwitch();
	private GetShowFocusedControlSwitch getShowFocusedControlSwitch = new GetShowFocusedControlSwitch();
	private SetShowFocusedControlSwitch setShowFocusedControlSwitch = new SetShowFocusedControlSwitch();
	private GetColumnOrderSwitch getColumnOrderSwitch = new GetColumnOrderSwitch();
	private SetColumnOrderSwitch setColumnOrderSwitch = new SetColumnOrderSwitch();
	private GetMRUVisibleSwitch getMRUVisibleSwitch = new GetMRUVisibleSwitch();
	private SetMRUVisibleSwitch setMRUVisibleSwitch = new SetMRUVisibleSwitch();
	private GetGrayedSwitch getGrayedSwitch = new GetGrayedSwitch();
	private SetGrayedSwitch setGrayedSwitch = new SetGrayedSwitch();
	private GetDaySwitch getDaySwitch = new GetDaySwitch();
	private SetDaySwitch setDaySwitch = new SetDaySwitch();
	private GetCursorSwitch getCursorSwitch = new GetCursorSwitch();
	private SetCursorSwitch setCursorSwitch = new SetCursorSwitch();
	private GetYearSwitch getYearSwitch = new GetYearSwitch();
	private SetYearSwitch setYearSwitch = new SetYearSwitch();
	private GetToolBarVerticalAlignmentSwitch getToolBarVerticalAlignmentSwitch = new GetToolBarVerticalAlignmentSwitch();
	private SetToolBarVerticalAlignmentSwitch setToolBarVerticalAlignmentSwitch = new SetToolBarVerticalAlignmentSwitch();
	private GetRegionSwitch getRegionSwitch = new GetRegionSwitch();
	private SetRegionSwitch setRegionSwitch = new SetRegionSwitch();
	private GetAcceleratorSwitch getAcceleratorSwitch = new GetAcceleratorSwitch();
	private SetAcceleratorSwitch setAcceleratorSwitch = new SetAcceleratorSwitch();
	private GetWrapIndicesSwitch getWrapIndicesSwitch = new GetWrapIndicesSwitch();
	private SetWrapIndicesSwitch setWrapIndicesSwitch = new SetWrapIndicesSwitch();
	private GetPageIncrementSwitch getPageIncrementSwitch = new GetPageIncrementSwitch();
	private SetPageIncrementSwitch setPageIncrementSwitch = new SetPageIncrementSwitch();
	private GetMatchEmptyStringSwitch getMatchEmptyStringSwitch = new GetMatchEmptyStringSwitch();
	private SetMatchEmptyStringSwitch setMatchEmptyStringSwitch = new SetMatchEmptyStringSwitch();
	private GetCompositionOffsetSwitch getCompositionOffsetSwitch = new GetCompositionOffsetSwitch();
	private SetCompositionOffsetSwitch setCompositionOffsetSwitch = new SetCompositionOffsetSwitch();
	private GetDescriptionSwitch getDescriptionSwitch = new GetDescriptionSwitch();
	private SetDescriptionSwitch setDescriptionSwitch = new SetDescriptionSwitch();
	private GetShowCloseSwitch getShowCloseSwitch = new GetShowCloseSwitch();
	private SetShowCloseSwitch setShowCloseSwitch = new SetShowCloseSwitch();
	private GetSelectionForegroundSwitch getSelectionForegroundSwitch = new GetSelectionForegroundSwitch();
	private SetSelectionForegroundSwitch setSelectionForegroundSwitch = new SetSelectionForegroundSwitch();
	private GetBackgroundModeSwitch getBackgroundModeSwitch = new GetBackgroundModeSwitch();
	private SetBackgroundModeSwitch setBackgroundModeSwitch = new SetBackgroundModeSwitch();
	private GetTitleBarGradientBackgroundSwitch getTitleBarGradientBackgroundSwitch = new GetTitleBarGradientBackgroundSwitch();
	private SetTitleBarGradientBackgroundSwitch setTitleBarGradientBackgroundSwitch = new SetTitleBarGradientBackgroundSwitch();
	private GetBlockSelectionBoundsSwitch getBlockSelectionBoundsSwitch = new GetBlockSelectionBoundsSwitch();
	private SetBlockSelectionBoundsSwitch setBlockSelectionBoundsSwitch = new SetBlockSelectionBoundsSwitch();
	private GetMinHeightSwitch getMinHeightSwitch = new GetMinHeightSwitch();
	private SetMinHeightSwitch setMinHeightSwitch = new SetMinHeightSwitch();
	private GetRightMarginSwitch getRightMarginSwitch = new GetRightMarginSwitch();
	private SetRightMarginSwitch setRightMarginSwitch = new SetRightMarginSwitch();
	private GetLocationSwitch getLocationSwitch = new GetLocationSwitch();
	private SetLocationSwitch setLocationSwitch = new SetLocationSwitch();
	private GetSpacingSwitch getSpacingSwitch = new GetSpacingSwitch();
	private SetSpacingSwitch setSpacingSwitch = new SetSpacingSwitch();
	private GetMinimumSizeSwitch getMinimumSizeSwitch = new GetMinimumSizeSwitch();
	private SetMinimumSizeSwitch setMinimumSizeSwitch = new SetMinimumSizeSwitch();
	private GetDescriptionControlSwitch getDescriptionControlSwitch = new GetDescriptionControlSwitch();
	private SetDescriptionControlSwitch setDescriptionControlSwitch = new SetDescriptionControlSwitch();
	private GetTextSwitch getTextSwitch = new GetTextSwitch();
	private SetTextSwitch setTextSwitch = new SetTextSwitch();
	private GetTabsSwitch getTabsSwitch = new GetTabsSwitch();
	private SetTabsSwitch setTabsSwitch = new SetTabsSwitch();
	private GetBorderVisibleSwitch getBorderVisibleSwitch = new GetBorderVisibleSwitch();
	private SetBorderVisibleSwitch setBorderVisibleSwitch = new SetBorderVisibleSwitch();
	private GetStateSwitch getStateSwitch = new GetStateSwitch();
	private SetStateSwitch setStateSwitch = new SetStateSwitch();
	private GetTopItemSwitch getTopItemSwitch = new GetTopItemSwitch();
	private SetTopItemSwitch setTopItemSwitch = new SetTopItemSwitch();
	private GetTabListSwitch getTabListSwitch = new GetTabListSwitch();
	private SetTabListSwitch setTabListSwitch = new SetTabListSwitch();
	private GetTopCenterSwitch getTopCenterSwitch = new GetTopCenterSwitch();
	private SetTopCenterSwitch setTopCenterSwitch = new SetTopCenterSwitch();
	private GetExpandHorizontalSwitch getExpandHorizontalSwitch = new GetExpandHorizontalSwitch();
	private SetExpandHorizontalSwitch setExpandHorizontalSwitch = new SetExpandHorizontalSwitch();
	private GetTabStopsSwitch getTabStopsSwitch = new GetTabStopsSwitch();
	private SetTabStopsSwitch setTabStopsSwitch = new SetTabStopsSwitch();
	private GetMinutesSwitch getMinutesSwitch = new GetMinutesSwitch();
	private SetMinutesSwitch setMinutesSwitch = new SetMinutesSwitch();
	private GetExpandVerticalSwitch getExpandVerticalSwitch = new GetExpandVerticalSwitch();
	private SetExpandVerticalSwitch setExpandVerticalSwitch = new SetExpandVerticalSwitch();
	private GetHotImageSwitch getHotImageSwitch = new GetHotImageSwitch();
	private SetHotImageSwitch setHotImageSwitch = new SetHotImageSwitch();
	private GetMinimumCharactersSwitch getMinimumCharactersSwitch = new GetMinimumCharactersSwitch();
	private SetMinimumCharactersSwitch setMinimumCharactersSwitch = new SetMinimumCharactersSwitch();
	@SuppressWarnings("unchecked")
	public <T> T getProperty(Widget widget, String propertyName){
		if (propertyName.equalsIgnoreCase("Maximized")){
			return (T) getMaximizedSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Visible")){
			return (T) getVisibleSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("HorizontalPixel")){
			return (T) getHorizontalPixelSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Moveable")){
			return (T) getMoveableSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("HorizontalIndex")){
			return (T) getHorizontalIndexSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Origin")){
			return (T) getOriginSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Images")){
			return (T) getImagesSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Single")){
			return (T) getSingleSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Data")){
			return (T) getDataSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("EchoChar")){
			return (T) getEchoCharSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("HeadClient")){
			return (T) getHeadClientSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ToolTipText")){
			return (T) getToolTipTextSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("MenuBar")){
			return (T) getMenuBarSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("UnselectedImageVisible")){
			return (T) getUnselectedImageVisibleSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Url")){
			return (T) getUrlSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Modified")){
			return (T) getModifiedSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ParagraphsSeparated")){
			return (T) getParagraphsSeparatedSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Increment")){
			return (T) getIncrementSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("SortDirection")){
			return (T) getSortDirectionSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Seconds")){
			return (T) getSecondsSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("FullScreen")){
			return (T) getFullScreenSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("LabelProvider")){
			return (T) getLabelProviderSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("VisibleItemCount")){
			return (T) getVisibleItemCountSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Parent")){
			return (T) getParentSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Thumb")){
			return (T) getThumbSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("WordWrap")){
			return (T) getWordWrapSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Minimized")){
			return (T) getMinimizedSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("CaretOffset")){
			return (T) getCaretOffsetSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("DecorationColor")){
			return (T) getDecorationColorSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Bounds")){
			return (T) getBoundsSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Digits")){
			return (T) getDigitsSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("IgnoreCase")){
			return (T) getIgnoreCaseSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Left")){
			return (T) getLeftSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Bottom")){
			return (T) getBottomSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Filter")){
			return (T) getFilterSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("AllowDuplicates")){
			return (T) getAllowDuplicatesSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Layout")){
			return (T) getLayoutSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("BackgroundImage")){
			return (T) getBackgroundImageSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TabPosition")){
			return (T) getTabPositionSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TitleBarBackground")){
			return (T) getTitleBarBackgroundSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TextChars")){
			return (T) getTextCharsSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("IME")){
			return (T) getIMESwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TabHeight")){
			return (T) getTabHeightSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("MaximizeVisible")){
			return (T) getMaximizeVisibleSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("DragDetect")){
			return (T) getDragDetectSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Alpha")){
			return (T) getAlphaSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("JavascriptEnabled")){
			return (T) getJavascriptEnabledSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("PreferredSize")){
			return (T) getPreferredSizeSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Background")){
			return (T) getBackgroundSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TopMargin")){
			return (T) getTopMarginSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Weights")){
			return (T) getWeightsSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("DoubleClickEnabled")){
			return (T) getDoubleClickEnabledSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("LayoutData")){
			return (T) getLayoutDataSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("StyleRanges")){
			return (T) getStyleRangesSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Control")){
			return (T) getControlSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("SashWidth")){
			return (T) getSashWidthSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Renderer")){
			return (T) getRendererSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Font")){
			return (T) getFontSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Image")){
			return (T) getImageSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("RightMinimumSize")){
			return (T) getRightMinimumSizeSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Expanded")){
			return (T) getExpandedSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Client")){
			return (T) getClientSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TitleBarForeground")){
			return (T) getTitleBarForegroundSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Rectangles")){
			return (T) getRectanglesSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Right")){
			return (T) getRightSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Items")){
			return (T) getItemsSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("DefaultItem")){
			return (T) getDefaultItemSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Orientation")){
			return (T) getOrientationSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Message")){
			return (T) getMessageSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("UnselectedCloseVisible")){
			return (T) getUnselectedCloseVisibleSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("LeftMargin")){
			return (T) getLeftMarginSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Hours")){
			return (T) getHoursSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("HoverImage")){
			return (T) getHoverImageSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("LinesVisible")){
			return (T) getLinesVisibleSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("DefaultButton")){
			return (T) getDefaultButtonSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("BottomMargin")){
			return (T) getBottomMarginSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Minimum")){
			return (T) getMinimumSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Alignment")){
			return (T) getAlignmentSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("AlwaysShowScrollBars")){
			return (T) getAlwaysShowScrollBarsSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TopLeft")){
			return (T) getTopLeftSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Indent")){
			return (T) getIndentSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ImeInputMode")){
			return (T) getImeInputModeSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TopIndex")){
			return (T) getTopIndexSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("RightWidth")){
			return (T) getRightWidthSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("LayoutDeferred")){
			return (T) getLayoutDeferredSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("SeparatorControl")){
			return (T) getSeparatorControlSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Foreground")){
			return (T) getForegroundSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("MaximizedControl")){
			return (T) getMaximizedControlSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ListVisible")){
			return (T) getListVisibleSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("HeaderVisible")){
			return (T) getHeaderVisibleSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TextClient")){
			return (T) getTextClientSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Month")){
			return (T) getMonthSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("BlockSelection")){
			return (T) getBlockSelectionSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Menu")){
			return (T) getMenuSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("MinimizeVisible")){
			return (T) getMinimizeVisibleSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("LineSpacing")){
			return (T) getLineSpacingSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ID")){
			return (T) getIDSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Href")){
			return (T) getHrefSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Resizable")){
			return (T) getResizableSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Width")){
			return (T) getWidthSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Justify")){
			return (T) getJustifySwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ToolTip")){
			return (T) getToolTipSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("HoverDecorationColor")){
			return (T) getHoverDecorationColorSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Size")){
			return (T) getSizeSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Stippled")){
			return (T) getStippledSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("SelectionBackground")){
			return (T) getSelectionBackgroundSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TextLimit")){
			return (T) getTextLimitSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Maximum")){
			return (T) getMaximumSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ItemCount")){
			return (T) getItemCountSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Height")){
			return (T) getHeightSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TopRight")){
			return (T) getTopRightSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("HyperlinkSettings")){
			return (T) getHyperlinkSettingsSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("MinWidth")){
			return (T) getMinWidthSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Transfer")){
			return (T) getTransferSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ActiveImage")){
			return (T) getActiveImageSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Editable")){
			return (T) getEditableSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("FormText")){
			return (T) getFormTextSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TouchEnabled")){
			return (T) getTouchEnabledSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("DropTargetEffect")){
			return (T) getDropTargetEffectSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Simple")){
			return (T) getSimpleSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("MarginColor")){
			return (T) getMarginColorSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TopPixel")){
			return (T) getTopPixelSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Checked")){
			return (T) getCheckedSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TitleBarBorderColor")){
			return (T) getTitleBarBorderColorSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Locked")){
			return (T) getLockedSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Caret")){
			return (T) getCaretSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("WrapIndent")){
			return (T) getWrapIndentSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("AutoHide")){
			return (T) getAutoHideSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Enabled")){
			return (T) getEnabledSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("DragSourceEffect")){
			return (T) getDragSourceEffectSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ShowFocusedControl")){
			return (T) getShowFocusedControlSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ColumnOrder")){
			return (T) getColumnOrderSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("MRUVisible")){
			return (T) getMRUVisibleSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Grayed")){
			return (T) getGrayedSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Day")){
			return (T) getDaySwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Cursor")){
			return (T) getCursorSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Year")){
			return (T) getYearSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ToolBarVerticalAlignment")){
			return (T) getToolBarVerticalAlignmentSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Region")){
			return (T) getRegionSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Accelerator")){
			return (T) getAcceleratorSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("WrapIndices")){
			return (T) getWrapIndicesSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("PageIncrement")){
			return (T) getPageIncrementSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("MatchEmptyString")){
			return (T) getMatchEmptyStringSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("CompositionOffset")){
			return (T) getCompositionOffsetSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Description")){
			return (T) getDescriptionSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ShowClose")){
			return (T) getShowCloseSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("SelectionForeground")){
			return (T) getSelectionForegroundSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("BackgroundMode")){
			return (T) getBackgroundModeSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TitleBarGradientBackground")){
			return (T) getTitleBarGradientBackgroundSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("BlockSelectionBounds")){
			return (T) getBlockSelectionBoundsSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("MinHeight")){
			return (T) getMinHeightSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("RightMargin")){
			return (T) getRightMarginSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Location")){
			return (T) getLocationSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Spacing")){
			return (T) getSpacingSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("MinimumSize")){
			return (T) getMinimumSizeSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("DescriptionControl")){
			return (T) getDescriptionControlSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Text")){
			return (T) getTextSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Tabs")){
			return (T) getTabsSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("BorderVisible")){
			return (T) getBorderVisibleSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("State")){
			return (T) getStateSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TopItem")){
			return (T) getTopItemSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TabList")){
			return (T) getTabListSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TopCenter")){
			return (T) getTopCenterSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ExpandHorizontal")){
			return (T) getExpandHorizontalSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TabStops")){
			return (T) getTabStopsSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Minutes")){
			return (T) getMinutesSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ExpandVertical")){
			return (T) getExpandVerticalSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("HotImage")){
			return (T) getHotImageSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("MinimumCharacters")){
			return (T) getMinimumCharactersSwitch.getProperty(widget);
		}
			
		return null;
	}
	
	public void setProperty(Widget widget, String propertyName, Object value){
		if (propertyName.equalsIgnoreCase("Maximized")){
			setMaximizedSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Visible")){
			setVisibleSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("HorizontalPixel")){
			setHorizontalPixelSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Moveable")){
			setMoveableSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("HorizontalIndex")){
			setHorizontalIndexSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Origin")){
			setOriginSwitch.setProperty(widget, (Point)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Images")){
			setImagesSwitch.setProperty(widget, (Image[])value);
		}
		
		else if (propertyName.equalsIgnoreCase("Single")){
			setSingleSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Data")){
			setDataSwitch.setProperty(widget, (Object)value);
		}
		
		else if (propertyName.equalsIgnoreCase("EchoChar")){
			setEchoCharSwitch.setProperty(widget, (Character)value);
		}
		
		else if (propertyName.equalsIgnoreCase("HeadClient")){
			setHeadClientSwitch.setProperty(widget, (Control)value);
		}
		
		else if (propertyName.equalsIgnoreCase("ToolTipText")){
			setToolTipTextSwitch.setProperty(widget, (String)value);
		}
		
		else if (propertyName.equalsIgnoreCase("MenuBar")){
			setMenuBarSwitch.setProperty(widget, (Menu)value);
		}
		
		else if (propertyName.equalsIgnoreCase("UnselectedImageVisible")){
			setUnselectedImageVisibleSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Url")){
			setUrlSwitch.setProperty(widget, (String)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Modified")){
			setModifiedSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("ParagraphsSeparated")){
			setParagraphsSeparatedSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Increment")){
			setIncrementSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("SortDirection")){
			setSortDirectionSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Seconds")){
			setSecondsSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("FullScreen")){
			setFullScreenSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("LabelProvider")){
			setLabelProviderSwitch.setProperty(widget, (ILabelProvider)value);
		}
		
		else if (propertyName.equalsIgnoreCase("VisibleItemCount")){
			setVisibleItemCountSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Parent")){
			setParentSwitch.setProperty(widget, (Composite)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Thumb")){
			setThumbSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("WordWrap")){
			setWordWrapSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Minimized")){
			setMinimizedSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("CaretOffset")){
			setCaretOffsetSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("DecorationColor")){
			setDecorationColorSwitch.setProperty(widget, (Color)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Bounds")){
			setBoundsSwitch.setProperty(widget, (Rectangle)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Digits")){
			setDigitsSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("IgnoreCase")){
			setIgnoreCaseSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Left")){
			setLeftSwitch.setProperty(widget, (Control)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Bottom")){
			setBottomSwitch.setProperty(widget, (Control)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Filter")){
			setFilterSwitch.setProperty(widget, (String)value);
		}
		
		else if (propertyName.equalsIgnoreCase("AllowDuplicates")){
			setAllowDuplicatesSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Layout")){
			setLayoutSwitch.setProperty(widget, (Layout)value);
		}
		
		else if (propertyName.equalsIgnoreCase("BackgroundImage")){
			setBackgroundImageSwitch.setProperty(widget, (Image)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TabPosition")){
			setTabPositionSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TitleBarBackground")){
			setTitleBarBackgroundSwitch.setProperty(widget, (Color)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TextChars")){
			setTextCharsSwitch.setProperty(widget, (char[])value);
		}
		
		else if (propertyName.equalsIgnoreCase("IME")){
			setIMESwitch.setProperty(widget, (IME)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TabHeight")){
			setTabHeightSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("MaximizeVisible")){
			setMaximizeVisibleSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("DragDetect")){
			setDragDetectSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Alpha")){
			setAlphaSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("JavascriptEnabled")){
			setJavascriptEnabledSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("PreferredSize")){
			setPreferredSizeSwitch.setProperty(widget, (Point)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Background")){
			setBackgroundSwitch.setProperty(widget, (Color)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TopMargin")){
			setTopMarginSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Weights")){
			setWeightsSwitch.setProperty(widget, (int[])value);
		}
		
		else if (propertyName.equalsIgnoreCase("DoubleClickEnabled")){
			setDoubleClickEnabledSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("LayoutData")){
			setLayoutDataSwitch.setProperty(widget, (Object)value);
		}
		
		else if (propertyName.equalsIgnoreCase("StyleRanges")){
			setStyleRangesSwitch.setProperty(widget, (StyleRange[])value);
		}
		
		else if (propertyName.equalsIgnoreCase("Control")){
			setControlSwitch.setProperty(widget, (Control)value);
		}
		
		else if (propertyName.equalsIgnoreCase("SashWidth")){
			setSashWidthSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Renderer")){
			setRendererSwitch.setProperty(widget, (CTabFolderRenderer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Font")){
			setFontSwitch.setProperty(widget, (Font)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Image")){
			setImageSwitch.setProperty(widget, (Image)value);
		}
		
		else if (propertyName.equalsIgnoreCase("RightMinimumSize")){
			setRightMinimumSizeSwitch.setProperty(widget, (Point)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Expanded")){
			setExpandedSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Client")){
			setClientSwitch.setProperty(widget, (Control)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TitleBarForeground")){
			setTitleBarForegroundSwitch.setProperty(widget, (Color)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Rectangles")){
			setRectanglesSwitch.setProperty(widget, (Rectangle[])value);
		}
		
		else if (propertyName.equalsIgnoreCase("Right")){
			setRightSwitch.setProperty(widget, (Control)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Items")){
			setItemsSwitch.setProperty(widget, (String[])value);
		}
		
		else if (propertyName.equalsIgnoreCase("DefaultItem")){
			setDefaultItemSwitch.setProperty(widget, (MenuItem)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Orientation")){
			setOrientationSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Message")){
			setMessageSwitch.setProperty(widget, (String)value);
		}
		
		else if (propertyName.equalsIgnoreCase("UnselectedCloseVisible")){
			setUnselectedCloseVisibleSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("LeftMargin")){
			setLeftMarginSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Hours")){
			setHoursSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("HoverImage")){
			setHoverImageSwitch.setProperty(widget, (Image)value);
		}
		
		else if (propertyName.equalsIgnoreCase("LinesVisible")){
			setLinesVisibleSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("DefaultButton")){
			setDefaultButtonSwitch.setProperty(widget, (Button)value);
		}
		
		else if (propertyName.equalsIgnoreCase("BottomMargin")){
			setBottomMarginSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Minimum")){
			setMinimumSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Alignment")){
			setAlignmentSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("AlwaysShowScrollBars")){
			setAlwaysShowScrollBarsSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TopLeft")){
			setTopLeftSwitch.setProperty(widget, (Control)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Indent")){
			setIndentSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("ImeInputMode")){
			setImeInputModeSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TopIndex")){
			setTopIndexSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("RightWidth")){
			setRightWidthSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("LayoutDeferred")){
			setLayoutDeferredSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("SeparatorControl")){
			setSeparatorControlSwitch.setProperty(widget, (Control)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Foreground")){
			setForegroundSwitch.setProperty(widget, (Color)value);
		}
		
		else if (propertyName.equalsIgnoreCase("MaximizedControl")){
			setMaximizedControlSwitch.setProperty(widget, (Control)value);
		}
		
		else if (propertyName.equalsIgnoreCase("ListVisible")){
			setListVisibleSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("HeaderVisible")){
			setHeaderVisibleSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TextClient")){
			setTextClientSwitch.setProperty(widget, (Control)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Month")){
			setMonthSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("BlockSelection")){
			setBlockSelectionSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Menu")){
			setMenuSwitch.setProperty(widget, (Menu)value);
		}
		
		else if (propertyName.equalsIgnoreCase("MinimizeVisible")){
			setMinimizeVisibleSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("LineSpacing")){
			setLineSpacingSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("ID")){
			setIDSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Href")){
			setHrefSwitch.setProperty(widget, (Object)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Resizable")){
			setResizableSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Width")){
			setWidthSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Justify")){
			setJustifySwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("ToolTip")){
			setToolTipSwitch.setProperty(widget, (ToolTip)value);
		}
		
		else if (propertyName.equalsIgnoreCase("HoverDecorationColor")){
			setHoverDecorationColorSwitch.setProperty(widget, (Color)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Size")){
			setSizeSwitch.setProperty(widget, (Point)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Stippled")){
			setStippledSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("SelectionBackground")){
			setSelectionBackgroundSwitch.setProperty(widget, (Color)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TextLimit")){
			setTextLimitSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Maximum")){
			setMaximumSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("ItemCount")){
			setItemCountSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Height")){
			setHeightSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TopRight")){
			setTopRightSwitch.setProperty(widget, (Control)value);
		}
		
		else if (propertyName.equalsIgnoreCase("HyperlinkSettings")){
			setHyperlinkSettingsSwitch.setProperty(widget, (HyperlinkSettings)value);
		}
		
		else if (propertyName.equalsIgnoreCase("MinWidth")){
			setMinWidthSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Transfer")){
			setTransferSwitch.setProperty(widget, (Transfer[])value);
		}
		
		else if (propertyName.equalsIgnoreCase("ActiveImage")){
			setActiveImageSwitch.setProperty(widget, (Image)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Editable")){
			setEditableSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("FormText")){
			setFormTextSwitch.setProperty(widget, (FormText)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TouchEnabled")){
			setTouchEnabledSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("DropTargetEffect")){
			setDropTargetEffectSwitch.setProperty(widget, (DropTargetEffect)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Simple")){
			setSimpleSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("MarginColor")){
			setMarginColorSwitch.setProperty(widget, (Color)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TopPixel")){
			setTopPixelSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Checked")){
			setCheckedSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TitleBarBorderColor")){
			setTitleBarBorderColorSwitch.setProperty(widget, (Color)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Locked")){
			setLockedSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Caret")){
			setCaretSwitch.setProperty(widget, (Caret)value);
		}
		
		else if (propertyName.equalsIgnoreCase("WrapIndent")){
			setWrapIndentSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("AutoHide")){
			setAutoHideSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Enabled")){
			setEnabledSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("DragSourceEffect")){
			setDragSourceEffectSwitch.setProperty(widget, (DragSourceEffect)value);
		}
		
		else if (propertyName.equalsIgnoreCase("ShowFocusedControl")){
			setShowFocusedControlSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("ColumnOrder")){
			setColumnOrderSwitch.setProperty(widget, (int[])value);
		}
		
		else if (propertyName.equalsIgnoreCase("MRUVisible")){
			setMRUVisibleSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Grayed")){
			setGrayedSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Day")){
			setDaySwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Cursor")){
			setCursorSwitch.setProperty(widget, (Cursor)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Year")){
			setYearSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("ToolBarVerticalAlignment")){
			setToolBarVerticalAlignmentSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Region")){
			setRegionSwitch.setProperty(widget, (Region)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Accelerator")){
			setAcceleratorSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("WrapIndices")){
			setWrapIndicesSwitch.setProperty(widget, (int[])value);
		}
		
		else if (propertyName.equalsIgnoreCase("PageIncrement")){
			setPageIncrementSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("MatchEmptyString")){
			setMatchEmptyStringSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("CompositionOffset")){
			setCompositionOffsetSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Description")){
			setDescriptionSwitch.setProperty(widget, (String)value);
		}
		
		else if (propertyName.equalsIgnoreCase("ShowClose")){
			setShowCloseSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("SelectionForeground")){
			setSelectionForegroundSwitch.setProperty(widget, (Color)value);
		}
		
		else if (propertyName.equalsIgnoreCase("BackgroundMode")){
			setBackgroundModeSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TitleBarGradientBackground")){
			setTitleBarGradientBackgroundSwitch.setProperty(widget, (Color)value);
		}
		
		else if (propertyName.equalsIgnoreCase("BlockSelectionBounds")){
			setBlockSelectionBoundsSwitch.setProperty(widget, (Rectangle)value);
		}
		
		else if (propertyName.equalsIgnoreCase("MinHeight")){
			setMinHeightSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("RightMargin")){
			setRightMarginSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Location")){
			setLocationSwitch.setProperty(widget, (Point)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Spacing")){
			setSpacingSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("MinimumSize")){
			setMinimumSizeSwitch.setProperty(widget, (Point)value);
		}
		
		else if (propertyName.equalsIgnoreCase("DescriptionControl")){
			setDescriptionControlSwitch.setProperty(widget, (Control)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Text")){
			setTextSwitch.setProperty(widget, (String)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Tabs")){
			setTabsSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("BorderVisible")){
			setBorderVisibleSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("State")){
			setStateSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TopItem")){
			setTopItemSwitch.setProperty(widget, (TreeItem)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TabList")){
			setTabListSwitch.setProperty(widget, (Control[])value);
		}
		
		else if (propertyName.equalsIgnoreCase("TopCenter")){
			setTopCenterSwitch.setProperty(widget, (Control)value);
		}
		
		else if (propertyName.equalsIgnoreCase("ExpandHorizontal")){
			setExpandHorizontalSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TabStops")){
			setTabStopsSwitch.setProperty(widget, (int[])value);
		}
		
		else if (propertyName.equalsIgnoreCase("Minutes")){
			setMinutesSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("ExpandVertical")){
			setExpandVerticalSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("HotImage")){
			setHotImageSwitch.setProperty(widget, (Image)value);
		}
		
		else if (propertyName.equalsIgnoreCase("MinimumCharacters")){
			setMinimumCharactersSwitch.setProperty(widget, (Integer)value);
		}
			
	}
	public Boolean getMaximized(Widget widget){
		return getMaximizedSwitch.getProperty(widget);
	}
	public void setMaximized(Widget widget, Boolean value){
		setMaximizedSwitch.setProperty(widget, value);
	}
	public Boolean getVisible(Widget widget){
		return getVisibleSwitch.getProperty(widget);
	}
	public void setVisible(Widget widget, Boolean value){
		setVisibleSwitch.setProperty(widget, value);
	}
	public Integer getHorizontalPixel(Widget widget){
		return getHorizontalPixelSwitch.getProperty(widget);
	}
	public void setHorizontalPixel(Widget widget, Integer value){
		setHorizontalPixelSwitch.setProperty(widget, value);
	}
	public Boolean getMoveable(Widget widget){
		return getMoveableSwitch.getProperty(widget);
	}
	public void setMoveable(Widget widget, Boolean value){
		setMoveableSwitch.setProperty(widget, value);
	}
	public Integer getHorizontalIndex(Widget widget){
		return getHorizontalIndexSwitch.getProperty(widget);
	}
	public void setHorizontalIndex(Widget widget, Integer value){
		setHorizontalIndexSwitch.setProperty(widget, value);
	}
	public Point getOrigin(Widget widget){
		return getOriginSwitch.getProperty(widget);
	}
	public void setOrigin(Widget widget, Point value){
		setOriginSwitch.setProperty(widget, value);
	}
	public Image[] getImages(Widget widget){
		return getImagesSwitch.getProperty(widget);
	}
	public void setImages(Widget widget, Image[] value){
		setImagesSwitch.setProperty(widget, value);
	}
	public Boolean getSingle(Widget widget){
		return getSingleSwitch.getProperty(widget);
	}
	public void setSingle(Widget widget, Boolean value){
		setSingleSwitch.setProperty(widget, value);
	}
	public Object getData(Widget widget){
		return getDataSwitch.getProperty(widget);
	}
	public void setData(Widget widget, Object value){
		setDataSwitch.setProperty(widget, value);
	}
	public Character getEchoChar(Widget widget){
		return getEchoCharSwitch.getProperty(widget);
	}
	public void setEchoChar(Widget widget, Character value){
		setEchoCharSwitch.setProperty(widget, value);
	}
	public Control getHeadClient(Widget widget){
		return getHeadClientSwitch.getProperty(widget);
	}
	public void setHeadClient(Widget widget, Control value){
		setHeadClientSwitch.setProperty(widget, value);
	}
	public String getToolTipText(Widget widget){
		return getToolTipTextSwitch.getProperty(widget);
	}
	public void setToolTipText(Widget widget, String value){
		setToolTipTextSwitch.setProperty(widget, value);
	}
	public Menu getMenuBar(Widget widget){
		return getMenuBarSwitch.getProperty(widget);
	}
	public void setMenuBar(Widget widget, Menu value){
		setMenuBarSwitch.setProperty(widget, value);
	}
	public Boolean getUnselectedImageVisible(Widget widget){
		return getUnselectedImageVisibleSwitch.getProperty(widget);
	}
	public void setUnselectedImageVisible(Widget widget, Boolean value){
		setUnselectedImageVisibleSwitch.setProperty(widget, value);
	}
	public String getUrl(Widget widget){
		return getUrlSwitch.getProperty(widget);
	}
	public void setUrl(Widget widget, String value){
		setUrlSwitch.setProperty(widget, value);
	}
	public Boolean getModified(Widget widget){
		return getModifiedSwitch.getProperty(widget);
	}
	public void setModified(Widget widget, Boolean value){
		setModifiedSwitch.setProperty(widget, value);
	}
	public Boolean getParagraphsSeparated(Widget widget){
		return getParagraphsSeparatedSwitch.getProperty(widget);
	}
	public void setParagraphsSeparated(Widget widget, Boolean value){
		setParagraphsSeparatedSwitch.setProperty(widget, value);
	}
	public Integer getIncrement(Widget widget){
		return getIncrementSwitch.getProperty(widget);
	}
	public void setIncrement(Widget widget, Integer value){
		setIncrementSwitch.setProperty(widget, value);
	}
	public Integer getSortDirection(Widget widget){
		return getSortDirectionSwitch.getProperty(widget);
	}
	public void setSortDirection(Widget widget, Integer value){
		setSortDirectionSwitch.setProperty(widget, value);
	}
	public Integer getSeconds(Widget widget){
		return getSecondsSwitch.getProperty(widget);
	}
	public void setSeconds(Widget widget, Integer value){
		setSecondsSwitch.setProperty(widget, value);
	}
	public Boolean getFullScreen(Widget widget){
		return getFullScreenSwitch.getProperty(widget);
	}
	public void setFullScreen(Widget widget, Boolean value){
		setFullScreenSwitch.setProperty(widget, value);
	}
	public ILabelProvider getLabelProvider(Widget widget){
		return getLabelProviderSwitch.getProperty(widget);
	}
	public void setLabelProvider(Widget widget, ILabelProvider value){
		setLabelProviderSwitch.setProperty(widget, value);
	}
	public Integer getVisibleItemCount(Widget widget){
		return getVisibleItemCountSwitch.getProperty(widget);
	}
	public void setVisibleItemCount(Widget widget, Integer value){
		setVisibleItemCountSwitch.setProperty(widget, value);
	}
	public Composite getParent(Widget widget){
		return getParentSwitch.getProperty(widget);
	}
	public void setParent(Widget widget, Composite value){
		setParentSwitch.setProperty(widget, value);
	}
	public Integer getThumb(Widget widget){
		return getThumbSwitch.getProperty(widget);
	}
	public void setThumb(Widget widget, Integer value){
		setThumbSwitch.setProperty(widget, value);
	}
	public Boolean getWordWrap(Widget widget){
		return getWordWrapSwitch.getProperty(widget);
	}
	public void setWordWrap(Widget widget, Boolean value){
		setWordWrapSwitch.setProperty(widget, value);
	}
	public Boolean getMinimized(Widget widget){
		return getMinimizedSwitch.getProperty(widget);
	}
	public void setMinimized(Widget widget, Boolean value){
		setMinimizedSwitch.setProperty(widget, value);
	}
	public Integer getCaretOffset(Widget widget){
		return getCaretOffsetSwitch.getProperty(widget);
	}
	public void setCaretOffset(Widget widget, Integer value){
		setCaretOffsetSwitch.setProperty(widget, value);
	}
	public Color getDecorationColor(Widget widget){
		return getDecorationColorSwitch.getProperty(widget);
	}
	public void setDecorationColor(Widget widget, Color value){
		setDecorationColorSwitch.setProperty(widget, value);
	}
	public Rectangle getBounds(Widget widget){
		return getBoundsSwitch.getProperty(widget);
	}
	public void setBounds(Widget widget, Rectangle value){
		setBoundsSwitch.setProperty(widget, value);
	}
	public Integer getDigits(Widget widget){
		return getDigitsSwitch.getProperty(widget);
	}
	public void setDigits(Widget widget, Integer value){
		setDigitsSwitch.setProperty(widget, value);
	}
	public Boolean getIgnoreCase(Widget widget){
		return getIgnoreCaseSwitch.getProperty(widget);
	}
	public void setIgnoreCase(Widget widget, Boolean value){
		setIgnoreCaseSwitch.setProperty(widget, value);
	}
	public Control getLeft(Widget widget){
		return getLeftSwitch.getProperty(widget);
	}
	public void setLeft(Widget widget, Control value){
		setLeftSwitch.setProperty(widget, value);
	}
	public Control getBottom(Widget widget){
		return getBottomSwitch.getProperty(widget);
	}
	public void setBottom(Widget widget, Control value){
		setBottomSwitch.setProperty(widget, value);
	}
	public String getFilter(Widget widget){
		return getFilterSwitch.getProperty(widget);
	}
	public void setFilter(Widget widget, String value){
		setFilterSwitch.setProperty(widget, value);
	}
	public Boolean getAllowDuplicates(Widget widget){
		return getAllowDuplicatesSwitch.getProperty(widget);
	}
	public void setAllowDuplicates(Widget widget, Boolean value){
		setAllowDuplicatesSwitch.setProperty(widget, value);
	}
	public Layout getLayout(Widget widget){
		return getLayoutSwitch.getProperty(widget);
	}
	public void setLayout(Widget widget, Layout value){
		setLayoutSwitch.setProperty(widget, value);
	}
	public Image getBackgroundImage(Widget widget){
		return getBackgroundImageSwitch.getProperty(widget);
	}
	public void setBackgroundImage(Widget widget, Image value){
		setBackgroundImageSwitch.setProperty(widget, value);
	}
	public Integer getTabPosition(Widget widget){
		return getTabPositionSwitch.getProperty(widget);
	}
	public void setTabPosition(Widget widget, Integer value){
		setTabPositionSwitch.setProperty(widget, value);
	}
	public Color getTitleBarBackground(Widget widget){
		return getTitleBarBackgroundSwitch.getProperty(widget);
	}
	public void setTitleBarBackground(Widget widget, Color value){
		setTitleBarBackgroundSwitch.setProperty(widget, value);
	}
	public char[] getTextChars(Widget widget){
		return getTextCharsSwitch.getProperty(widget);
	}
	public void setTextChars(Widget widget, char[] value){
		setTextCharsSwitch.setProperty(widget, value);
	}
	public IME getIME(Widget widget){
		return getIMESwitch.getProperty(widget);
	}
	public void setIME(Widget widget, IME value){
		setIMESwitch.setProperty(widget, value);
	}
	public Integer getTabHeight(Widget widget){
		return getTabHeightSwitch.getProperty(widget);
	}
	public void setTabHeight(Widget widget, Integer value){
		setTabHeightSwitch.setProperty(widget, value);
	}
	public Boolean getMaximizeVisible(Widget widget){
		return getMaximizeVisibleSwitch.getProperty(widget);
	}
	public void setMaximizeVisible(Widget widget, Boolean value){
		setMaximizeVisibleSwitch.setProperty(widget, value);
	}
	public Boolean getDragDetect(Widget widget){
		return getDragDetectSwitch.getProperty(widget);
	}
	public void setDragDetect(Widget widget, Boolean value){
		setDragDetectSwitch.setProperty(widget, value);
	}
	public Integer getAlpha(Widget widget){
		return getAlphaSwitch.getProperty(widget);
	}
	public void setAlpha(Widget widget, Integer value){
		setAlphaSwitch.setProperty(widget, value);
	}
	public Boolean getJavascriptEnabled(Widget widget){
		return getJavascriptEnabledSwitch.getProperty(widget);
	}
	public void setJavascriptEnabled(Widget widget, Boolean value){
		setJavascriptEnabledSwitch.setProperty(widget, value);
	}
	public Point getPreferredSize(Widget widget){
		return getPreferredSizeSwitch.getProperty(widget);
	}
	public void setPreferredSize(Widget widget, Point value){
		setPreferredSizeSwitch.setProperty(widget, value);
	}
	public Color getBackground(Widget widget){
		return getBackgroundSwitch.getProperty(widget);
	}
	public void setBackground(Widget widget, Color value){
		setBackgroundSwitch.setProperty(widget, value);
	}
	public Integer getTopMargin(Widget widget){
		return getTopMarginSwitch.getProperty(widget);
	}
	public void setTopMargin(Widget widget, Integer value){
		setTopMarginSwitch.setProperty(widget, value);
	}
	public int[] getWeights(Widget widget){
		return getWeightsSwitch.getProperty(widget);
	}
	public void setWeights(Widget widget, int[] value){
		setWeightsSwitch.setProperty(widget, value);
	}
	public Boolean getDoubleClickEnabled(Widget widget){
		return getDoubleClickEnabledSwitch.getProperty(widget);
	}
	public void setDoubleClickEnabled(Widget widget, Boolean value){
		setDoubleClickEnabledSwitch.setProperty(widget, value);
	}
	public Object getLayoutData(Widget widget){
		return getLayoutDataSwitch.getProperty(widget);
	}
	public void setLayoutData(Widget widget, Object value){
		setLayoutDataSwitch.setProperty(widget, value);
	}
	public StyleRange[] getStyleRanges(Widget widget){
		return getStyleRangesSwitch.getProperty(widget);
	}
	public void setStyleRanges(Widget widget, StyleRange[] value){
		setStyleRangesSwitch.setProperty(widget, value);
	}
	public Control getControl(Widget widget){
		return getControlSwitch.getProperty(widget);
	}
	public void setControl(Widget widget, Control value){
		setControlSwitch.setProperty(widget, value);
	}
	public Integer getSashWidth(Widget widget){
		return getSashWidthSwitch.getProperty(widget);
	}
	public void setSashWidth(Widget widget, Integer value){
		setSashWidthSwitch.setProperty(widget, value);
	}
	public CTabFolderRenderer getRenderer(Widget widget){
		return getRendererSwitch.getProperty(widget);
	}
	public void setRenderer(Widget widget, CTabFolderRenderer value){
		setRendererSwitch.setProperty(widget, value);
	}
	public Font getFont(Widget widget){
		return getFontSwitch.getProperty(widget);
	}
	public void setFont(Widget widget, Font value){
		setFontSwitch.setProperty(widget, value);
	}
	public Image getImage(Widget widget){
		return getImageSwitch.getProperty(widget);
	}
	public void setImage(Widget widget, Image value){
		setImageSwitch.setProperty(widget, value);
	}
	public Point getRightMinimumSize(Widget widget){
		return getRightMinimumSizeSwitch.getProperty(widget);
	}
	public void setRightMinimumSize(Widget widget, Point value){
		setRightMinimumSizeSwitch.setProperty(widget, value);
	}
	public Boolean getExpanded(Widget widget){
		return getExpandedSwitch.getProperty(widget);
	}
	public void setExpanded(Widget widget, Boolean value){
		setExpandedSwitch.setProperty(widget, value);
	}
	public Control getClient(Widget widget){
		return getClientSwitch.getProperty(widget);
	}
	public void setClient(Widget widget, Control value){
		setClientSwitch.setProperty(widget, value);
	}
	public Color getTitleBarForeground(Widget widget){
		return getTitleBarForegroundSwitch.getProperty(widget);
	}
	public void setTitleBarForeground(Widget widget, Color value){
		setTitleBarForegroundSwitch.setProperty(widget, value);
	}
	public Rectangle[] getRectangles(Widget widget){
		return getRectanglesSwitch.getProperty(widget);
	}
	public void setRectangles(Widget widget, Rectangle[] value){
		setRectanglesSwitch.setProperty(widget, value);
	}
	public Control getRight(Widget widget){
		return getRightSwitch.getProperty(widget);
	}
	public void setRight(Widget widget, Control value){
		setRightSwitch.setProperty(widget, value);
	}
	public String[] getItems(Widget widget){
		return getItemsSwitch.getProperty(widget);
	}
	public void setItems(Widget widget, String[] value){
		setItemsSwitch.setProperty(widget, value);
	}
	public MenuItem getDefaultItem(Widget widget){
		return getDefaultItemSwitch.getProperty(widget);
	}
	public void setDefaultItem(Widget widget, MenuItem value){
		setDefaultItemSwitch.setProperty(widget, value);
	}
	public Integer getOrientation(Widget widget){
		return getOrientationSwitch.getProperty(widget);
	}
	public void setOrientation(Widget widget, Integer value){
		setOrientationSwitch.setProperty(widget, value);
	}
	public String getMessage(Widget widget){
		return getMessageSwitch.getProperty(widget);
	}
	public void setMessage(Widget widget, String value){
		setMessageSwitch.setProperty(widget, value);
	}
	public Boolean getUnselectedCloseVisible(Widget widget){
		return getUnselectedCloseVisibleSwitch.getProperty(widget);
	}
	public void setUnselectedCloseVisible(Widget widget, Boolean value){
		setUnselectedCloseVisibleSwitch.setProperty(widget, value);
	}
	public Integer getLeftMargin(Widget widget){
		return getLeftMarginSwitch.getProperty(widget);
	}
	public void setLeftMargin(Widget widget, Integer value){
		setLeftMarginSwitch.setProperty(widget, value);
	}
	public Integer getHours(Widget widget){
		return getHoursSwitch.getProperty(widget);
	}
	public void setHours(Widget widget, Integer value){
		setHoursSwitch.setProperty(widget, value);
	}
	public Image getHoverImage(Widget widget){
		return getHoverImageSwitch.getProperty(widget);
	}
	public void setHoverImage(Widget widget, Image value){
		setHoverImageSwitch.setProperty(widget, value);
	}
	public Boolean getLinesVisible(Widget widget){
		return getLinesVisibleSwitch.getProperty(widget);
	}
	public void setLinesVisible(Widget widget, Boolean value){
		setLinesVisibleSwitch.setProperty(widget, value);
	}
	public Button getDefaultButton(Widget widget){
		return getDefaultButtonSwitch.getProperty(widget);
	}
	public void setDefaultButton(Widget widget, Button value){
		setDefaultButtonSwitch.setProperty(widget, value);
	}
	public Integer getBottomMargin(Widget widget){
		return getBottomMarginSwitch.getProperty(widget);
	}
	public void setBottomMargin(Widget widget, Integer value){
		setBottomMarginSwitch.setProperty(widget, value);
	}
	public Integer getMinimum(Widget widget){
		return getMinimumSwitch.getProperty(widget);
	}
	public void setMinimum(Widget widget, Integer value){
		setMinimumSwitch.setProperty(widget, value);
	}
	public Integer getAlignment(Widget widget){
		return getAlignmentSwitch.getProperty(widget);
	}
	public void setAlignment(Widget widget, Integer value){
		setAlignmentSwitch.setProperty(widget, value);
	}
	public Boolean getAlwaysShowScrollBars(Widget widget){
		return getAlwaysShowScrollBarsSwitch.getProperty(widget);
	}
	public void setAlwaysShowScrollBars(Widget widget, Boolean value){
		setAlwaysShowScrollBarsSwitch.setProperty(widget, value);
	}
	public Control getTopLeft(Widget widget){
		return getTopLeftSwitch.getProperty(widget);
	}
	public void setTopLeft(Widget widget, Control value){
		setTopLeftSwitch.setProperty(widget, value);
	}
	public Integer getIndent(Widget widget){
		return getIndentSwitch.getProperty(widget);
	}
	public void setIndent(Widget widget, Integer value){
		setIndentSwitch.setProperty(widget, value);
	}
	public Integer getImeInputMode(Widget widget){
		return getImeInputModeSwitch.getProperty(widget);
	}
	public void setImeInputMode(Widget widget, Integer value){
		setImeInputModeSwitch.setProperty(widget, value);
	}
	public Integer getTopIndex(Widget widget){
		return getTopIndexSwitch.getProperty(widget);
	}
	public void setTopIndex(Widget widget, Integer value){
		setTopIndexSwitch.setProperty(widget, value);
	}
	public Integer getRightWidth(Widget widget){
		return getRightWidthSwitch.getProperty(widget);
	}
	public void setRightWidth(Widget widget, Integer value){
		setRightWidthSwitch.setProperty(widget, value);
	}
	public Boolean getLayoutDeferred(Widget widget){
		return getLayoutDeferredSwitch.getProperty(widget);
	}
	public void setLayoutDeferred(Widget widget, Boolean value){
		setLayoutDeferredSwitch.setProperty(widget, value);
	}
	public Control getSeparatorControl(Widget widget){
		return getSeparatorControlSwitch.getProperty(widget);
	}
	public void setSeparatorControl(Widget widget, Control value){
		setSeparatorControlSwitch.setProperty(widget, value);
	}
	public Color getForeground(Widget widget){
		return getForegroundSwitch.getProperty(widget);
	}
	public void setForeground(Widget widget, Color value){
		setForegroundSwitch.setProperty(widget, value);
	}
	public Control getMaximizedControl(Widget widget){
		return getMaximizedControlSwitch.getProperty(widget);
	}
	public void setMaximizedControl(Widget widget, Control value){
		setMaximizedControlSwitch.setProperty(widget, value);
	}
	public Boolean getListVisible(Widget widget){
		return getListVisibleSwitch.getProperty(widget);
	}
	public void setListVisible(Widget widget, Boolean value){
		setListVisibleSwitch.setProperty(widget, value);
	}
	public Boolean getHeaderVisible(Widget widget){
		return getHeaderVisibleSwitch.getProperty(widget);
	}
	public void setHeaderVisible(Widget widget, Boolean value){
		setHeaderVisibleSwitch.setProperty(widget, value);
	}
	public Control getTextClient(Widget widget){
		return getTextClientSwitch.getProperty(widget);
	}
	public void setTextClient(Widget widget, Control value){
		setTextClientSwitch.setProperty(widget, value);
	}
	public Integer getMonth(Widget widget){
		return getMonthSwitch.getProperty(widget);
	}
	public void setMonth(Widget widget, Integer value){
		setMonthSwitch.setProperty(widget, value);
	}
	public Boolean getBlockSelection(Widget widget){
		return getBlockSelectionSwitch.getProperty(widget);
	}
	public void setBlockSelection(Widget widget, Boolean value){
		setBlockSelectionSwitch.setProperty(widget, value);
	}
	public Menu getMenu(Widget widget){
		return getMenuSwitch.getProperty(widget);
	}
	public void setMenu(Widget widget, Menu value){
		setMenuSwitch.setProperty(widget, value);
	}
	public Boolean getMinimizeVisible(Widget widget){
		return getMinimizeVisibleSwitch.getProperty(widget);
	}
	public void setMinimizeVisible(Widget widget, Boolean value){
		setMinimizeVisibleSwitch.setProperty(widget, value);
	}
	public Integer getLineSpacing(Widget widget){
		return getLineSpacingSwitch.getProperty(widget);
	}
	public void setLineSpacing(Widget widget, Integer value){
		setLineSpacingSwitch.setProperty(widget, value);
	}
	public Integer getID(Widget widget){
		return getIDSwitch.getProperty(widget);
	}
	public void setID(Widget widget, Integer value){
		setIDSwitch.setProperty(widget, value);
	}
	public Object getHref(Widget widget){
		return getHrefSwitch.getProperty(widget);
	}
	public void setHref(Widget widget, Object value){
		setHrefSwitch.setProperty(widget, value);
	}
	public Boolean getResizable(Widget widget){
		return getResizableSwitch.getProperty(widget);
	}
	public void setResizable(Widget widget, Boolean value){
		setResizableSwitch.setProperty(widget, value);
	}
	public Integer getWidth(Widget widget){
		return getWidthSwitch.getProperty(widget);
	}
	public void setWidth(Widget widget, Integer value){
		setWidthSwitch.setProperty(widget, value);
	}
	public Boolean getJustify(Widget widget){
		return getJustifySwitch.getProperty(widget);
	}
	public void setJustify(Widget widget, Boolean value){
		setJustifySwitch.setProperty(widget, value);
	}
	public ToolTip getToolTip(Widget widget){
		return getToolTipSwitch.getProperty(widget);
	}
	public void setToolTip(Widget widget, ToolTip value){
		setToolTipSwitch.setProperty(widget, value);
	}
	public Color getHoverDecorationColor(Widget widget){
		return getHoverDecorationColorSwitch.getProperty(widget);
	}
	public void setHoverDecorationColor(Widget widget, Color value){
		setHoverDecorationColorSwitch.setProperty(widget, value);
	}
	public Point getSize(Widget widget){
		return getSizeSwitch.getProperty(widget);
	}
	public void setSize(Widget widget, Point value){
		setSizeSwitch.setProperty(widget, value);
	}
	public Boolean getStippled(Widget widget){
		return getStippledSwitch.getProperty(widget);
	}
	public void setStippled(Widget widget, Boolean value){
		setStippledSwitch.setProperty(widget, value);
	}
	public Color getSelectionBackground(Widget widget){
		return getSelectionBackgroundSwitch.getProperty(widget);
	}
	public void setSelectionBackground(Widget widget, Color value){
		setSelectionBackgroundSwitch.setProperty(widget, value);
	}
	public Integer getTextLimit(Widget widget){
		return getTextLimitSwitch.getProperty(widget);
	}
	public void setTextLimit(Widget widget, Integer value){
		setTextLimitSwitch.setProperty(widget, value);
	}
	public Integer getMaximum(Widget widget){
		return getMaximumSwitch.getProperty(widget);
	}
	public void setMaximum(Widget widget, Integer value){
		setMaximumSwitch.setProperty(widget, value);
	}
	public Integer getItemCount(Widget widget){
		return getItemCountSwitch.getProperty(widget);
	}
	public void setItemCount(Widget widget, Integer value){
		setItemCountSwitch.setProperty(widget, value);
	}
	public Integer getHeight(Widget widget){
		return getHeightSwitch.getProperty(widget);
	}
	public void setHeight(Widget widget, Integer value){
		setHeightSwitch.setProperty(widget, value);
	}
	public Control getTopRight(Widget widget){
		return getTopRightSwitch.getProperty(widget);
	}
	public void setTopRight(Widget widget, Control value){
		setTopRightSwitch.setProperty(widget, value);
	}
	public HyperlinkSettings getHyperlinkSettings(Widget widget){
		return getHyperlinkSettingsSwitch.getProperty(widget);
	}
	public void setHyperlinkSettings(Widget widget, HyperlinkSettings value){
		setHyperlinkSettingsSwitch.setProperty(widget, value);
	}
	public Integer getMinWidth(Widget widget){
		return getMinWidthSwitch.getProperty(widget);
	}
	public void setMinWidth(Widget widget, Integer value){
		setMinWidthSwitch.setProperty(widget, value);
	}
	public Transfer[] getTransfer(Widget widget){
		return getTransferSwitch.getProperty(widget);
	}
	public void setTransfer(Widget widget, Transfer[] value){
		setTransferSwitch.setProperty(widget, value);
	}
	public Image getActiveImage(Widget widget){
		return getActiveImageSwitch.getProperty(widget);
	}
	public void setActiveImage(Widget widget, Image value){
		setActiveImageSwitch.setProperty(widget, value);
	}
	public Boolean getEditable(Widget widget){
		return getEditableSwitch.getProperty(widget);
	}
	public void setEditable(Widget widget, Boolean value){
		setEditableSwitch.setProperty(widget, value);
	}
	public FormText getFormText(Widget widget){
		return getFormTextSwitch.getProperty(widget);
	}
	public void setFormText(Widget widget, FormText value){
		setFormTextSwitch.setProperty(widget, value);
	}
	public Boolean getTouchEnabled(Widget widget){
		return getTouchEnabledSwitch.getProperty(widget);
	}
	public void setTouchEnabled(Widget widget, Boolean value){
		setTouchEnabledSwitch.setProperty(widget, value);
	}
	public DropTargetEffect getDropTargetEffect(Widget widget){
		return getDropTargetEffectSwitch.getProperty(widget);
	}
	public void setDropTargetEffect(Widget widget, DropTargetEffect value){
		setDropTargetEffectSwitch.setProperty(widget, value);
	}
	public Boolean getSimple(Widget widget){
		return getSimpleSwitch.getProperty(widget);
	}
	public void setSimple(Widget widget, Boolean value){
		setSimpleSwitch.setProperty(widget, value);
	}
	public Color getMarginColor(Widget widget){
		return getMarginColorSwitch.getProperty(widget);
	}
	public void setMarginColor(Widget widget, Color value){
		setMarginColorSwitch.setProperty(widget, value);
	}
	public Integer getTopPixel(Widget widget){
		return getTopPixelSwitch.getProperty(widget);
	}
	public void setTopPixel(Widget widget, Integer value){
		setTopPixelSwitch.setProperty(widget, value);
	}
	public Boolean getChecked(Widget widget){
		return getCheckedSwitch.getProperty(widget);
	}
	public void setChecked(Widget widget, Boolean value){
		setCheckedSwitch.setProperty(widget, value);
	}
	public Color getTitleBarBorderColor(Widget widget){
		return getTitleBarBorderColorSwitch.getProperty(widget);
	}
	public void setTitleBarBorderColor(Widget widget, Color value){
		setTitleBarBorderColorSwitch.setProperty(widget, value);
	}
	public Boolean getLocked(Widget widget){
		return getLockedSwitch.getProperty(widget);
	}
	public void setLocked(Widget widget, Boolean value){
		setLockedSwitch.setProperty(widget, value);
	}
	public Caret getCaret(Widget widget){
		return getCaretSwitch.getProperty(widget);
	}
	public void setCaret(Widget widget, Caret value){
		setCaretSwitch.setProperty(widget, value);
	}
	public Integer getWrapIndent(Widget widget){
		return getWrapIndentSwitch.getProperty(widget);
	}
	public void setWrapIndent(Widget widget, Integer value){
		setWrapIndentSwitch.setProperty(widget, value);
	}
	public Boolean getAutoHide(Widget widget){
		return getAutoHideSwitch.getProperty(widget);
	}
	public void setAutoHide(Widget widget, Boolean value){
		setAutoHideSwitch.setProperty(widget, value);
	}
	public Boolean getEnabled(Widget widget){
		return getEnabledSwitch.getProperty(widget);
	}
	public void setEnabled(Widget widget, Boolean value){
		setEnabledSwitch.setProperty(widget, value);
	}
	public DragSourceEffect getDragSourceEffect(Widget widget){
		return getDragSourceEffectSwitch.getProperty(widget);
	}
	public void setDragSourceEffect(Widget widget, DragSourceEffect value){
		setDragSourceEffectSwitch.setProperty(widget, value);
	}
	public Boolean getShowFocusedControl(Widget widget){
		return getShowFocusedControlSwitch.getProperty(widget);
	}
	public void setShowFocusedControl(Widget widget, Boolean value){
		setShowFocusedControlSwitch.setProperty(widget, value);
	}
	public int[] getColumnOrder(Widget widget){
		return getColumnOrderSwitch.getProperty(widget);
	}
	public void setColumnOrder(Widget widget, int[] value){
		setColumnOrderSwitch.setProperty(widget, value);
	}
	public Boolean getMRUVisible(Widget widget){
		return getMRUVisibleSwitch.getProperty(widget);
	}
	public void setMRUVisible(Widget widget, Boolean value){
		setMRUVisibleSwitch.setProperty(widget, value);
	}
	public Boolean getGrayed(Widget widget){
		return getGrayedSwitch.getProperty(widget);
	}
	public void setGrayed(Widget widget, Boolean value){
		setGrayedSwitch.setProperty(widget, value);
	}
	public Integer getDay(Widget widget){
		return getDaySwitch.getProperty(widget);
	}
	public void setDay(Widget widget, Integer value){
		setDaySwitch.setProperty(widget, value);
	}
	public Cursor getCursor(Widget widget){
		return getCursorSwitch.getProperty(widget);
	}
	public void setCursor(Widget widget, Cursor value){
		setCursorSwitch.setProperty(widget, value);
	}
	public Integer getYear(Widget widget){
		return getYearSwitch.getProperty(widget);
	}
	public void setYear(Widget widget, Integer value){
		setYearSwitch.setProperty(widget, value);
	}
	public Integer getToolBarVerticalAlignment(Widget widget){
		return getToolBarVerticalAlignmentSwitch.getProperty(widget);
	}
	public void setToolBarVerticalAlignment(Widget widget, Integer value){
		setToolBarVerticalAlignmentSwitch.setProperty(widget, value);
	}
	public Region getRegion(Widget widget){
		return getRegionSwitch.getProperty(widget);
	}
	public void setRegion(Widget widget, Region value){
		setRegionSwitch.setProperty(widget, value);
	}
	public Integer getAccelerator(Widget widget){
		return getAcceleratorSwitch.getProperty(widget);
	}
	public void setAccelerator(Widget widget, Integer value){
		setAcceleratorSwitch.setProperty(widget, value);
	}
	public int[] getWrapIndices(Widget widget){
		return getWrapIndicesSwitch.getProperty(widget);
	}
	public void setWrapIndices(Widget widget, int[] value){
		setWrapIndicesSwitch.setProperty(widget, value);
	}
	public Integer getPageIncrement(Widget widget){
		return getPageIncrementSwitch.getProperty(widget);
	}
	public void setPageIncrement(Widget widget, Integer value){
		setPageIncrementSwitch.setProperty(widget, value);
	}
	public Boolean getMatchEmptyString(Widget widget){
		return getMatchEmptyStringSwitch.getProperty(widget);
	}
	public void setMatchEmptyString(Widget widget, Boolean value){
		setMatchEmptyStringSwitch.setProperty(widget, value);
	}
	public Integer getCompositionOffset(Widget widget){
		return getCompositionOffsetSwitch.getProperty(widget);
	}
	public void setCompositionOffset(Widget widget, Integer value){
		setCompositionOffsetSwitch.setProperty(widget, value);
	}
	public String getDescription(Widget widget){
		return getDescriptionSwitch.getProperty(widget);
	}
	public void setDescription(Widget widget, String value){
		setDescriptionSwitch.setProperty(widget, value);
	}
	public Boolean getShowClose(Widget widget){
		return getShowCloseSwitch.getProperty(widget);
	}
	public void setShowClose(Widget widget, Boolean value){
		setShowCloseSwitch.setProperty(widget, value);
	}
	public Color getSelectionForeground(Widget widget){
		return getSelectionForegroundSwitch.getProperty(widget);
	}
	public void setSelectionForeground(Widget widget, Color value){
		setSelectionForegroundSwitch.setProperty(widget, value);
	}
	public Integer getBackgroundMode(Widget widget){
		return getBackgroundModeSwitch.getProperty(widget);
	}
	public void setBackgroundMode(Widget widget, Integer value){
		setBackgroundModeSwitch.setProperty(widget, value);
	}
	public Color getTitleBarGradientBackground(Widget widget){
		return getTitleBarGradientBackgroundSwitch.getProperty(widget);
	}
	public void setTitleBarGradientBackground(Widget widget, Color value){
		setTitleBarGradientBackgroundSwitch.setProperty(widget, value);
	}
	public Rectangle getBlockSelectionBounds(Widget widget){
		return getBlockSelectionBoundsSwitch.getProperty(widget);
	}
	public void setBlockSelectionBounds(Widget widget, Rectangle value){
		setBlockSelectionBoundsSwitch.setProperty(widget, value);
	}
	public Integer getMinHeight(Widget widget){
		return getMinHeightSwitch.getProperty(widget);
	}
	public void setMinHeight(Widget widget, Integer value){
		setMinHeightSwitch.setProperty(widget, value);
	}
	public Integer getRightMargin(Widget widget){
		return getRightMarginSwitch.getProperty(widget);
	}
	public void setRightMargin(Widget widget, Integer value){
		setRightMarginSwitch.setProperty(widget, value);
	}
	public Point getLocation(Widget widget){
		return getLocationSwitch.getProperty(widget);
	}
	public void setLocation(Widget widget, Point value){
		setLocationSwitch.setProperty(widget, value);
	}
	public Integer getSpacing(Widget widget){
		return getSpacingSwitch.getProperty(widget);
	}
	public void setSpacing(Widget widget, Integer value){
		setSpacingSwitch.setProperty(widget, value);
	}
	public Point getMinimumSize(Widget widget){
		return getMinimumSizeSwitch.getProperty(widget);
	}
	public void setMinimumSize(Widget widget, Point value){
		setMinimumSizeSwitch.setProperty(widget, value);
	}
	public Control getDescriptionControl(Widget widget){
		return getDescriptionControlSwitch.getProperty(widget);
	}
	public void setDescriptionControl(Widget widget, Control value){
		setDescriptionControlSwitch.setProperty(widget, value);
	}
	public String getText(Widget widget){
		return getTextSwitch.getProperty(widget);
	}
	public void setText(Widget widget, String value){
		setTextSwitch.setProperty(widget, value);
	}
	public Integer getTabs(Widget widget){
		return getTabsSwitch.getProperty(widget);
	}
	public void setTabs(Widget widget, Integer value){
		setTabsSwitch.setProperty(widget, value);
	}
	public Boolean getBorderVisible(Widget widget){
		return getBorderVisibleSwitch.getProperty(widget);
	}
	public void setBorderVisible(Widget widget, Boolean value){
		setBorderVisibleSwitch.setProperty(widget, value);
	}
	public Integer getState(Widget widget){
		return getStateSwitch.getProperty(widget);
	}
	public void setState(Widget widget, Integer value){
		setStateSwitch.setProperty(widget, value);
	}
	public TreeItem getTopItem(Widget widget){
		return getTopItemSwitch.getProperty(widget);
	}
	public void setTopItem(Widget widget, TreeItem value){
		setTopItemSwitch.setProperty(widget, value);
	}
	public Control[] getTabList(Widget widget){
		return getTabListSwitch.getProperty(widget);
	}
	public void setTabList(Widget widget, Control[] value){
		setTabListSwitch.setProperty(widget, value);
	}
	public Control getTopCenter(Widget widget){
		return getTopCenterSwitch.getProperty(widget);
	}
	public void setTopCenter(Widget widget, Control value){
		setTopCenterSwitch.setProperty(widget, value);
	}
	public Boolean getExpandHorizontal(Widget widget){
		return getExpandHorizontalSwitch.getProperty(widget);
	}
	public void setExpandHorizontal(Widget widget, Boolean value){
		setExpandHorizontalSwitch.setProperty(widget, value);
	}
	public int[] getTabStops(Widget widget){
		return getTabStopsSwitch.getProperty(widget);
	}
	public void setTabStops(Widget widget, int[] value){
		setTabStopsSwitch.setProperty(widget, value);
	}
	public Integer getMinutes(Widget widget){
		return getMinutesSwitch.getProperty(widget);
	}
	public void setMinutes(Widget widget, Integer value){
		setMinutesSwitch.setProperty(widget, value);
	}
	public Boolean getExpandVertical(Widget widget){
		return getExpandVerticalSwitch.getProperty(widget);
	}
	public void setExpandVertical(Widget widget, Boolean value){
		setExpandVerticalSwitch.setProperty(widget, value);
	}
	public Image getHotImage(Widget widget){
		return getHotImageSwitch.getProperty(widget);
	}
	public void setHotImage(Widget widget, Image value){
		setHotImageSwitch.setProperty(widget, value);
	}
	public Integer getMinimumCharacters(Widget widget){
		return getMinimumCharactersSwitch.getProperty(widget);
	}
	public void setMinimumCharacters(Widget widget, Integer value){
		setMinimumCharactersSwitch.setProperty(widget, value);
	}	
}
