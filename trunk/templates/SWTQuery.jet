<%@ jet
    package="kr.or.eclipse.swt.query.internal.gen"
    class="SWTQueryGenerator" 
    imports="java.util.* org.eclipse.swt.* kr.or.eclipse.swt.query.* kr.or.eclipse.swt.query.internal.grammar.* kr.or.eclipse.swt.query.internal.gen.* kr.or.eclipse.swt.query.filter.* kr.or.eclipse.swt.query.internal.* kr.or.eclipse.swt.query.util.*"
    %>
<%@ include file="copyright.txt" %>
<% 
@SuppressWarnings("unchecked")
Collection<Property> properties = (Collection<Property>)argument; 
%>
package kr.or.eclipse.swt.query;

<% GenUtil.startImport();
GenUtil.addImportStatement(ArrayList.class);
GenUtil.addImportStatement(List.class);
GenUtil.addImportStatement(Map.class);
GenUtil.addImportStatement(IWidgetFilter.class);
GenUtil.addImportStatement(ChildrenSwitch.class);
GenUtil.addImportStatement(ParentSwitch.class);
GenUtil.addImportStatement(WidgetPropertySwitch.class);
GenUtil.addImportStatement(UniqueList.class);
GenUtil.addImportStatement(Selector.class);
GenUtil.addImportStatement(SelectorInterpreter.class);
GenUtil.addImportStatement(org.eclipse.swt.dnd.DropTarget.class);
GenUtil.addImportStatement(org.eclipse.swt.dnd.DND.class);
for(Property each : properties){
	if(each.gettableTypes.size() + each.settableTypes.size() > 0){
		GenUtil.addImportStatement(each.propertyType);
	}
}
%>
import org.eclipse.swt.layout.*;
import org.eclipse.swt.widgets.*;
import org.eclipse.swt.*;
import org.eclipse.swt.graphics.GC;

<%=GenUtil.endImport()%>

public final class SWTQuery {
	private static int CURRENT_DEBUG_COLOR = 0;
	
	public static SWTQuery $(Widget w) {
		return new SWTQuery(w);
	}
	
	public static SWTQuery $(Event event) {
		return new SWTQuery(event.widget);
	}
	
	public static SWTQuery $(Widget context, String selector) {
		return new SWTQuery(context).select(selector);
	}
	
	private List<Widget> items;

	public SWTQuery(List<Widget> itemList) {
		this.items = itemList;
	}

	public SWTQuery(Widget... items) {
		this.items = new ArrayList<Widget>();
		for (Widget each : items) {
			this.items.add(each);
		}
	}

	public SWTQuery setGridLayoutData(int style) {
		for (Widget each : items) {
			WidgetPropertySwitch.setLayoutData(each, new GridData(style));
		}
		return this;
	}

	public SWTQuery setGridLayoutData(int horizontalAlignment, int verticalAlignment, boolean grabExcessHorizontalSpace,
			boolean grabExcessVerticalSpace, int horizontalSpan, int verticalSpan) {
		for (Widget each : items) {
			WidgetPropertySwitch.setLayoutData(each, new GridData(horizontalAlignment, verticalAlignment,
					grabExcessHorizontalSpace, grabExcessVerticalSpace, horizontalSpan, verticalSpan));
		}
		return this;
	}

	public SWTQuery select(String selector) {
		List<Selector> selectors = SelectorInterpreter.build(selector);

		List<Widget> result = new UniqueList<Widget>();
		for (Selector each : selectors) {
			result.addAll(each.select(items));
		}
		return new SWTQuery(result);
	}

	public SWTQuery addListener(int eventType, Listener listener) {
		for (Widget each : this.items) {
			each.addListener(eventType, listener);
		}
		return this;
	}

	public SWTQuery each(IWidgetFunction f) {
		for (Widget each : this.items) {
			f.doFunction(each);
		}
		return this;
	}

	@SuppressWarnings("unchecked")
	public <T> T getData(String key) {
		if (items.size() > 0) {
			return (T) items.get(0).getData(key);
		} else {
			return null;
		}
	}

	public SWTQuery layout() {
		for (Widget each : this.items) {
			if (each instanceof Composite) {
				((Composite) each).layout();
			}
		}
		return this;
	}

	public SWTQuery layout(boolean changed) {
		for (Widget each : this.items) {
			if (each instanceof Composite) {
				((Composite) each).layout(changed);
			}
		}
		return this;
	}

	public SWTQuery layout(boolean changed, boolean all) {
		for (Widget each : this.items) {
			if (each instanceof Composite) {
				((Composite) each).layout(changed, all);
			}
		}
		return this;
	}

	public SWTQuery next() {
		return next(1);
	}

	public SWTQuery next(int delta) {
		return translate(delta);
	}

	public SWTQuery parent() {
		ArrayList<Widget> parents = new ArrayList<Widget>();
		for (Widget each : this.items) {
			Widget eachParent = ParentSwitch.INSTANCE.doSwitch(each);
			if (eachParent != null) {
				parents.add(eachParent);
			}
		}
		return parent();
	}

	public SWTQuery prev() {
		return prev(-1);
	}

	public SWTQuery prev(int delta) {
		return translate(delta);
	}

	public SWTQuery redraw() {
		for (Widget each : this.items) {
			if (each instanceof Control) {
				((Control) each).redraw();
			}
		}
		return this;
	}

	public SWTQuery setData(String key, Object data) {
		for (Widget each : items) {
			each.setData(key, data);
		}
		return this;
	}

	private SWTQuery translate(int delta) {
		ArrayList<Widget> result = new ArrayList<Widget>();

		for (Widget each : this.items) {
			Widget parent = ParentSwitch.INSTANCE.doSwitch(each);
			if (parent == null) {
				continue;
			}
			List<Widget> sibilings = ChildrenSwitch.INSTANCE.doSwitch(parent);
			int index = sibilings.indexOf(each);

			int newIndex = index + delta;
			if (newIndex >= 0 && newIndex < sibilings.size()) {
				result.add(sibilings.get(newIndex));
			}
		}

		return new SWTQuery(result);
	}
	
	public SWTQuery schedule(final IWidgetFunction function) {
		Display.getCurrent().asyncExec(new Runnable() {
			@Override
			public void run() {
				SWTQuery.this.each(function);
			}
		});
		return this;
	}
	
	public SWTQuery addProperties(Map<String, Object> wClass) {
		for (String each : wClass.keySet()) {
			for (Widget item : items) {
				WidgetPropertySwitch.setProperty(item, each, wClass.get(each));
			}
		}
		return this;
	}

<% for(Property each : properties){
	if(each.settableTypes.size() == 0) continue;
 %>
	/**
	 * Sets a <%=each.propertyName%> property.
	 * 
	 * @param value a <%=each.propertyName%> value to set.
	 *
<% for(Class<?> eachWidgetType : each.settableTypes){ %>
	 * @see <%=eachWidgetType.getSimpleName()%>
<% } %>	 
	 */
	public SWTQuery set<%=each.propertyName%>(<%=each.propertyType.getSimpleName()%> value){
		for(Widget each : items){
			WidgetPropertySwitch.set<%=each.propertyName%>(each, value);
		}
		return this;
	}
<% } %>

<% for(Property each : properties){
	if(each.gettableTypes.size() == 0) continue;
 %>
	/**
	 * Gets a <%=each.propertyName%> property value.
	 * 
	 * @return value a <%=each.propertyName%>.
	 *
<% for(Class<?> eachWidgetType : each.gettableTypes){ %>
	 * @see <%=eachWidgetType.getSimpleName()%>
<% } %>	 
	 */	
	public <%=each.propertyType.getSimpleName()%> <%=each.propertyType == Boolean.class ? "is" : "get"%><%=each.propertyName%>(){
		if(items.size() > 0){
			return WidgetPropertySwitch.get<%=each.propertyName%>(items.get(0));
		}
		else{
			return null;
		}
	}
<% } %>
	public SWTQuery debug(final String text) {
		final int color = (CURRENT_DEBUG_COLOR + 2);
		CURRENT_DEBUG_COLOR = (++CURRENT_DEBUG_COLOR % 15);
		
		this.addListener(SWT.Paint, new Listener() {
			@Override
			public void handleEvent(Event event) {
				Rectangle bounds = $(event).getBounds();
				GC gc = event.gc;
				gc.setAlpha(150);
				gc.setBackground(Display.getDefault().getSystemColor(color));
				gc.fillRectangle(0, 0, bounds.width - 1, bounds.height - 1);
				gc.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
				gc.setAlpha(255);
				gc.drawText(text, 1, 1, true);
			}
		});
		return this;
	}
	
	public SWTQuery debug() {
		final int color = (CURRENT_DEBUG_COLOR + 2);
		CURRENT_DEBUG_COLOR = (++CURRENT_DEBUG_COLOR % 15);
		
		this.addListener(SWT.Paint, new Listener() {
			@Override
			public void handleEvent(Event event) {
				Rectangle bounds = $(event).getBounds();
				GC gc = event.gc;
				gc.setAlpha(150);
				gc.setBackground(Display.getDefault().getSystemColor(color));
				gc.fillRectangle(0, 0, bounds.width - 1, bounds.height - 1);
				gc.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
			}
		});
		return this;
	}
	
	public SWTQuery createDropTarget(int style) {
		ArrayList<Widget> dropTargets = new ArrayList<Widget>();
		for (Widget each : items) {
			if (each instanceof Control) {
				dropTargets.add(new DropTarget((Control) each, style));
			}
		}
		return new SWTQuery(dropTargets);
	}

	public SWTQuery getDropTarget(int style) {
		ArrayList<Widget> dropTargets = new ArrayList<Widget>();
		for (Widget each : items) {
			if (each instanceof Control) {
				Object target = ((Control) each).getData(DND.DROP_TARGET_KEY);
				if (target instanceof DropTarget) {
					dropTargets.add((Widget) target);
				}
			}
		}
		return new SWTQuery(dropTargets);
	}

	public int size() {
		return items.size();
	}
	

}
