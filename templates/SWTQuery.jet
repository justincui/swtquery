<%@ jet
    package="kr.or.eclipse.swt.query.internal.generators"
    class="SWTQueryGenerator" 
    imports="java.util.*"
    %>
<%@ include file="copyright.txt" %>
<% 
@SuppressWarnings("unchecked")
Collection<Property> properties = (Collection<Property>)argument; 
%>
package kr.or.eclipse.swt.query;

<% GenUtil.startImport();
for(Property each : properties){
	if(each.gettableTypes.size() + each.settableTypes.size() > 0){
		GenUtil.addImportStatement(each.propertyType);
	}
}
%>
<%=GenUtil.endImport()%>

import org.eclipse.swt.layout.*;
import org.eclipse.swt.widgets.*;
import org.eclipse.swt.*;
import org.eclipse.swt.events.*;
import org.eclipse.swt.graphics.*;
import org.eclipse.swt.dnd.*;
import org.eclipse.core.runtime.Platform;
import java.lang.reflect.*;

import kr.or.eclipse.swt.query.util.*;
import kr.or.eclipse.swt.query.util.internal.*;
import kr.or.eclipse.swt.query.internal.grammar.*;
import kr.or.eclipse.swt.query.internal.*;
import kr.or.eclipse.swt.query.internal.generators.*;
import org.eclipse.core.commands.ExecutionEvent;

import java.util.*;
import java.util.List;

public final class SWTQuery {
	private static int CURRENT_DEBUG_COLOR = 0;
	
	public static SWTQuery $(Widget... w) {
		List<Widget> list = Arrays.asList(w);
		return new SWTQuery(list);
	}
	
	public static SWTQuery $(Collection<Widget> itemList) {
		return $(itemList.toArray(new Widget[itemList.size()]));
	}
	
	public static SWTQuery $(Event event) {
		return new SWTQuery(event.widget);
	}
	
	public static SWTQuery $(TypedEvent event){
		return new SWTQuery(event.widget);
	}
	
	public static SWTQuery $(ExecutionEvent e) {
		if (e.getTrigger() instanceof Event) {
			return $((Event) e.getTrigger());
		} else {
			return new SWTQuery(new Widget[0]);
		}
	}

	/**
	 * Creates {@link SWTQuery} for sender of {@link DropTargetEvent}.
	 * 
	 * @param event
	 * @return {@link SWTQuery} for {@link DropTarget}.
	 */
	public static SWTQuery $(DropTargetEvent event) {
		return new SWTQuery(event.widget);
	}
	
	public static SWTQuery $(Widget context, String selector) {
		return new SWTQuery(context).select(selector);
	}
	
	private List<Widget> items;

	private SWTQuery(List<Widget> itemList) {
		this.items = itemList;
	}

	private SWTQuery(Widget... items) {
		this.items = new ArrayList<Widget>();
		for (Widget each : items) {
			this.items.add(each);
		}
	}
	
	public SWTQuery setGridLayout() {
		for (Widget each : items) {
			GridLayout layout = new GridLayout();
			WidgetPropertySwitch.setLayout(each, layout);
		}
		return this;
	}
	
	public SWTQuery setGridLayout(int numColumns, boolean makeColumnsEqualWidth) {
		for (Widget each : items) {
			GridLayout layout = new GridLayout(numColumns, makeColumnsEqualWidth);
			WidgetPropertySwitch.setLayout(each, layout);
		}
		return this;
	}
	
	public SWTQuery setRowLayout() {
		for (Widget each : items) {
			WidgetPropertySwitch.setLayout(each, new RowLayout());
		}
		return this;
	}
	
	/**
	 * 
	 * @param type {@link SWT#HORIZONTAL} or {@link SWT#VERTICAL}.
	 * @return
	 */
	public SWTQuery setRowLayout(int type) {
		for (Widget each : items) {
			WidgetPropertySwitch.setLayout(each, new RowLayout(type));
		}
		return this;
	}
	
	public SWTQuery setFillLayout() {
		for (Widget each : this.items) {
			WidgetPropertySwitch.setLayout(each, new FillLayout());
		}
		return this;
	}
	
	public SWTQuery setGridLayoutData(int style) {
		for (Widget each : items) {
			WidgetPropertySwitch.setLayoutData(each, new GridData(style));
		}
		return this;
	}
	
	public SWTQuery setGridLayoutData(int horizontalAlignment, int verticalAlignment, boolean grabExcessHorizontalSpace,
			boolean grabExcessVerticalSpace, int horizontalSpan, int verticalSpan) {
		for (Widget each : items) {
			WidgetPropertySwitch.setLayoutData(each, new GridData(horizontalAlignment, verticalAlignment,
					grabExcessHorizontalSpace, grabExcessVerticalSpace, horizontalSpan, verticalSpan));
		}
		return this;
	}

	public SWTQuery select(String selector) {
		List<Selector> selectors = SelectorInterpreter.build(selector);

		List<Widget> result = new UniqueList<Widget>();
		for (Selector each : selectors) {
			result.addAll(each.select(items));
		}
		return new SWTQuery(result);
	}

	public SWTQuery addListener(int eventType, Listener listener) {
		for (Widget each : this.items) {
			each.addListener(eventType, listener);
		}
		return this;
	}
	
	public SWTQuery addListener(int[] eventTypes, Listener listener) {
		for (Widget each : this.items) {
			for (int eachType : eventTypes) {
				each.addListener(eachType, listener);
			}
		}
		return this;
	}
	
	public SWTQuery removeListener(int eventType, Listener listener) {
		for (Widget each : this.items) {
			each.removeListener(eventType, listener);
		}
		return this;
	}

	public SWTQuery each(IWidgetFunction f) {
		for (Widget each : this.items) {
			f.doFunction(each);
		}
		return this;
	}
	
	@SuppressWarnings("unchecked")
	public <T extends Widget> SWTQuery each(Class<T> type, IWidgetFunction<T> f) {
		for (Widget each : this.items) {
			if (type.isInstance(each)) {
				f.doFunction((T) each);
			}
		}
		return this;
	}

	@SuppressWarnings("unchecked")
	public <T> T getData(String key) {
		if (items.size() > 0) {
			return (T) items.get(0).getData(key);
		} else {
			return null;
		}
	}

	public SWTQuery layout() {
		for (Widget each : this.items) {
			if (each instanceof Composite) {
				((Composite) each).layout();
			}
		}
		return this;
	}

	public SWTQuery layout(boolean changed) {
		for (Widget each : this.items) {
			if (each instanceof Composite) {
				((Composite) each).layout(changed);
			}
		}
		return this;
	}

	public SWTQuery layout(boolean changed, boolean all) {
		for (Widget each : this.items) {
			if (each instanceof Composite) {
				((Composite) each).layout(changed, all);
			}
		}
		return this;
	}

	public SWTQuery next() {
		return next(1);
	}

	public SWTQuery next(int delta) {
		return translate(delta);
	}

	public SWTQuery parent() {
		ArrayList<Widget> parents = new UniqueList<Widget>();
		for (Widget each : this.items) {
			Widget eachParent = ParentSwitch.INSTANCE.doSwitch(each);
			if (eachParent != null) {
				parents.add(eachParent);
			}
		}
		return new SWTQuery(parents);
	}

	public SWTQuery prev() {
		return prev(-1);
	}

	public SWTQuery prev(int delta) {
		return translate(delta);
	}

	public SWTQuery redraw() {
		for (Widget each : this.items) {
			if (each instanceof Control) {
				((Control) each).redraw();
			}
		}
		return this;
	}

	public SWTQuery redraw(int x, int y, int w, int h, boolean redrawChildren) {
		for (Widget each : this.items) {
			if (each instanceof Control) {
				((Control) each).redraw(x, y, w, h, redrawChildren);
			}
		}
		return this;
	}

	public SWTQuery setData(String key, Object data) {
		for (Widget each : items) {
			each.setData(key, data);
		}
		return this;
	}

	private SWTQuery translate(int delta) {
		ArrayList<Widget> result = new ArrayList<Widget>();

		for (Widget each : this.items) {
			Widget parent = ParentSwitch.INSTANCE.doSwitch(each);
			if (parent == null) {
				continue;
			}
			List<Widget> sibilings = ChildrenSwitch.INSTANCE.doSwitch(parent);
			int index = sibilings.indexOf(each);

			int newIndex = index + delta;
			if (newIndex >= 0 && newIndex < sibilings.size()) {
				result.add(sibilings.get(newIndex));
			}
		}

		return new SWTQuery(result);
	}
	
	public SWTQuery schedule(final IWidgetFunction function) {
		Display.getCurrent().asyncExec(new Runnable() {
			@Override
			public void run() {
				SWTQuery.this.each(function);
			}
		});
		return this;
	}
	
	public SWTQuery addProperties(Map<String, Object> map) {
		for (String propName : map.keySet()) {
			for (Widget item : items) {
				WidgetPropertySwitch.setProperty(item, propName, map.get(propName));
			}
		}
		return this;
	}

<% for(Property each : properties){
	if(each.settableTypes.size() == 0) continue;
 %>
	/**
	 * Sets a <%=each.propertyName%> property.
	 * 
	 * @param value a <%=each.propertyName%> value to set.
	 *
<% for(Class<?> eachWidgetType : each.settableTypes){ %>
	 * @see <%=eachWidgetType.getSimpleName()%>
<% } %>	 
	 */
	public SWTQuery set<%=each.propertyName%>(<%=each.propertyType.getSimpleName()%> value){
		for(Widget each : items){
			WidgetPropertySwitch.set<%=each.propertyName%>(each, value);
		}
		return this;
	}
<% if(each.propertyType == Boolean.class) { %>

	/**
	 *Inverts <%=each.propertyName%> property.
	 *
<% for(Class<?> eachWidgetType : each.settableTypes){ %>
	 * @see <%=eachWidgetType.getSimpleName()%>
<% } %>	 
	 */
	public SWTQuery toggle<%=each.propertyName%>(){
		for(Widget each : items){
			Boolean old = WidgetPropertySwitch.get<%=each.propertyName%>(each);
			WidgetPropertySwitch.set<%=each.propertyName%>(each, !old);
		}
		return this;
	}
<% } %>	

<% } %>

<% for(Property each : properties){
	if(each.gettableTypes.size() == 0) continue;
 %>
	/**
	 * Gets a <%=each.propertyName%> property value.
	 * 
	 * @return value a <%=each.propertyName%>.
	 *
<% for(Class<?> eachWidgetType : each.gettableTypes){ %>
	 * @see <%=eachWidgetType.getSimpleName()%>
<% } %>	 
	 */	
	public <%=each.propertyType.getSimpleName()%> <%=each.propertyType == Boolean.class ? "is" : "get"%><%=each.propertyName%>(){
		if(items.size() > 0){
			return WidgetPropertySwitch.get<%=each.propertyName%>(items.get(0));
		}
		else{
			return null;
		}
	}
<% } %>
	public SWTQuery debug(final String text) {
		final int color = (CURRENT_DEBUG_COLOR + 2);
		CURRENT_DEBUG_COLOR = (++CURRENT_DEBUG_COLOR % 15);
		
		this.addListener(SWT.Paint, new Listener() {
			@Override
			public void handleEvent(Event event) {
				Rectangle bounds = $(event).getBounds();
				GC gc = event.gc;
				gc.setAlpha(150);
				gc.setBackground(Display.getDefault().getSystemColor(color));
				gc.fillRectangle(0, 0, bounds.width - 1, bounds.height - 1);
				gc.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
				gc.setAlpha(255);
				gc.drawText(text, 1, 1, true);
			}
		});
		
		this.redraw();
		return this;
	}
	
	public SWTQuery debug() {
		final int color = (CURRENT_DEBUG_COLOR + 2);
		CURRENT_DEBUG_COLOR = (++CURRENT_DEBUG_COLOR % 15);
		
		this.addListener(SWT.Paint, new Listener() {
			@Override
			public void handleEvent(Event event) {
				Rectangle bounds = $(event).getBounds();
				GC gc = event.gc;
				gc.setAlpha(150);
				gc.setBackground(Display.getDefault().getSystemColor(color));
				gc.fillRectangle(0, 0, bounds.width - 1, bounds.height - 1);
				gc.setForeground(Display.getDefault().getSystemColor(SWT.COLOR_WHITE));
			}
		});
		this.redraw();
		return this;
	}
	
	public SWTQuery createDropTarget(int style) {
		ArrayList<Widget> dropTargets = new ArrayList<Widget>();
		for (Widget each : items) {
			if (each instanceof Control) {
				dropTargets.add(new DropTarget((Control) each, style));
			}
		}
		return new SWTQuery(dropTargets);
	}

	public SWTQuery getDropTarget(int style) {
		ArrayList<Widget> dropTargets = new ArrayList<Widget>();
		for (Widget each : items) {
			if (each instanceof Control) {
				Object target = ((Control) each).getData(DND.DROP_TARGET_KEY);
				if (target instanceof DropTarget) {
					dropTargets.add((Widget) target);
				}
			}
		}
		return new SWTQuery(dropTargets);
	}

	/**
	 * 
	 * @return Number of selected widgets.
	 */
	public int size() {
		return items.size();
	}

	/**
	 * Select a first widget from current selection.
	 * 
	 * @return {@link SWTQuery} for first widget of current context.
	 */
	public SWTQuery first() {
		if (items.size() > 0) {
			return new SWTQuery(items.get(0));
		} else {
			return new SWTQuery(new UniqueList<Widget>());
		}
	}

	/**
	 * Select a last widget from current selection.
	 * 
	 * @return {@link SWTQuery} for last widget of current context.
	 */
	public SWTQuery last() {
		if (items.size() > 0) {
			return new SWTQuery(items.get(items.size() - 1));
		} else {
			return new SWTQuery(new UniqueList<Widget>());
		}
	}

	/**
	 * Get {@link SWTQuery} for a widget with specified index.
	 * 
	 * @param index
	 * @return {@link SWTQuery} for a specified widget.
	 */
	public SWTQuery get(int index) {
		if (items.size() > index) {
			return new SWTQuery(items.get(index));
		} else {
			return new SWTQuery(new UniqueList<Widget>());
		}
	}

	/**
	 * Reverese order of selected widgets, Some methods likes
	 * {@link #setEnabled(Boolean)} needs to be applied reverse order, because
	 * disabled parent widget prevents messages to child widgets.
	 * 
	 * @return Reveresed {@link SWTQuery}.
	 * 
	 * @see #toggleEnabled()
	 * @see #setEnabled(Boolean)
	 */
	public SWTQuery reverse() {
		ArrayList<Widget> copied = new ArrayList<Widget>(items);
		Collections.reverse(copied);
		return new SWTQuery(copied);
	}
	
	/**
	 * Adds Transfer into {@link DragSource} or {@link DropTarget}.
	 * 
	 * @param transfer
	 *        {@link Transfer} to add.
	 * @return {@link SWTQuery}.
	 * 
	 * @see DragSource
	 * @see DropTarget
	 * @see #createDropTarget(int)
	 * @see #getDropTarget(int)
	 */
	public SWTQuery addTransfer(Transfer... transfers) {
		for (Widget each : items) {
			if (each instanceof DropTarget) {
				DropTarget dropTarget = (DropTarget) each;
				List<Transfer> list = new ArrayList<Transfer>(Arrays.asList(dropTarget.getTransfer()));

				for (Transfer transfer : transfers) {
					if (!list.contains(transfer)) {
						list.add(transfer);
						dropTarget.setTransfer(list.toArray(new Transfer[list.size()]));
					}
				}
			}

			if (each instanceof DragSource) {
				DragSource dragSource = (DragSource) each;
				List<Transfer> list = new ArrayList<Transfer>(Arrays.asList(dragSource.getTransfer()));
				for (Transfer transfer : transfers) {
					if (!list.contains(transfer)) {
						list.add(transfer);
						dragSource.setTransfer(list.toArray(new Transfer[list.size()]));
					}
				}
			}
		}
		return this;
	}
	
	public SWTQuery addDropListener(DropTargetListener listener){
		for(Widget each : items){
			if(each instanceof DropTarget){
				((DropTarget)each).addDropListener(listener);
			}
		}
		return this;
	}
	
	/**
	 * Let an Animator takes animation start key frame from currently selected
	 * {@link Widget}s. Marked widgets will be animated automatically if they
	 * have changed properties which can be animated.
	 * 
	 * @param duration
	 *        Animation length in seconds. must be in 0.1 ~ 5.
	 * 
	 * @param timingFunction
	 *        timing function. {@link TimingFunction#EASE_IN},
	 *        {@link TimingFunction#EASE_IN_OUT} and
	 *        {@link TimingFunction#EASE_OUT} are provded in
	 *        {@link TimingFunction}. can be null.
	 * 
	 * @see #setBounds(Rectangle)
	 * @see #setLocation(Point)
	 * @see #setSize(Point)
	 * @see #setForeground(Color)
	 * @see #setBackground(Color)
	 * @see TimingFunction#EASE_IN
	 * @see TimingFunction#EASE_IN_OUT
	 * @see TimingFunction#EASE_OUT
	 * 
	 * @return {@link SWTQuery} same context.
	 */
	public SWTQuery markAnimationStart(double duration, TimingFunction timingFunction) {
		if (duration < 0.1 || duration > 5) {
			throw new IllegalArgumentException("duration must be in 0.1 to 5.0");
		}

		final Animator animator = new Animator();
		animator.setLength((long) (duration * 1000L));
		animator.setTimingFunction(timingFunction);

		for (Widget each : items) {
			animator.mark(each);
		}

		Display.getDefault().asyncExec(new Runnable() {
			@Override
			public void run() {
				animator.schedule();
			}
		});

		return this;
	}
	
	
	/**
	 * Let an Animator takes animation start key frame from currently selected
	 * {@link Widget}s. Marked widgets will be animated automatically if they
	 * have changed properties which can be animated.
	 * 
	 * @param duration
	 *        Animation length in seconds. must be in 0.1 ~ 5.
	 * 
	 * @see #setBounds(Rectangle)
	 * @see #setLocation(Point)
	 * @see #setSize(Point)
	 * @see #setForeground(Color)
	 * @see #setBackground(Color)
	 * @see TimingFunction#EASE_IN
	 * @see TimingFunction#EASE_IN_OUT
	 * @see TimingFunction#EASE_OUT
	 * 
	 * @return {@link SWTQuery} same context.
	 */
	public SWTQuery markAnimationStart(double duration) {
		return markAnimationStart(duration, TimingFunction.EASE_IN_OUT);
	}

	/**
	 * Let an Animator takes animation start key frame from currently selected
	 * {@link Widget}s. Marked widgets will be animated automatically if they
	 * have changed properties which can be animated.
	 * 
	 * @see #setBounds(Rectangle)
	 * @see #setLocation(Point)
	 * @see #setSize(Point)
	 * @see #setForeground(Color)
	 * @see #setBackground(Color)
	 * @see TimingFunction#EASE_IN
	 * @see TimingFunction#EASE_IN_OUT
	 * @see TimingFunction#EASE_OUT
	 * 
	 * @return {@link SWTQuery} same context.
	 */
	public SWTQuery markAnimationStart() {
		return markAnimationStart(0.4, TimingFunction.EASE_IN_OUT);
	}
	
	/**
	 * merges selected widgets with other {@link SWTQuery}
	 * 
	 * @param query
	 *        {@link SWTQuery} to merge.
	 * @return merged {@link SWTQuery}.
	 */
	public SWTQuery and(SWTQuery query) {
		UniqueList<Widget> list = new UniqueList<Widget>(items);
		list.addAll(query.items);
		return new SWTQuery(list);
	}
	
	/**
	 * Create child widgets on currently selected widgets.
	 * 
	 * @param type
	 *        types to create.
	 * @param style
	 *        style.
	 * @return {@link SWTQuery} contains new children.
	 */
	public SWTQuery create(Class<? extends Widget> type, int style) {
		UniqueList<Widget> result = new UniqueList<Widget>();

		CreatorSwitch creator = new CreatorSwitch();
		for (Widget each : this.items) {
			ConstructorArgs args = new ConstructorArgs(each, style);
			Widget eachResult = creator.doSwitch(type, args);
			if (eachResult != null) {
				result.add(eachResult);
			}
		}

		return new SWTQuery(result);
	}
	
	/**
	 * Create child widgets on currently selected widgets.
	 * 
	 * @param type
	 *        types to create.
	 * @return {@link SWTQuery} contains new children.
	 */
	public SWTQuery create(Class<? extends Widget> type) {
		UniqueList<Widget> result = new UniqueList<Widget>();

		CreatorSwitch creator = new CreatorSwitch();
		for (Widget each : this.items) {
			ConstructorArgs args = new ConstructorArgs(each, SWT.NORMAL);
			Widget eachResult = creator.doSwitch(type, args);
			if (eachResult != null) {
				result.add(eachResult);
			}
		}

		return new SWTQuery(result);
	}
	
	/**
	 * Dispose given {@link Resource}s when any one of currently selected
	 * widgets is disposed.
	 * 
	 * @param r
	 * @return
	 */
	public SWTQuery chainDispose(final Resource... r) {
		Listener disposer = new Listener() {
			boolean disposed = false;
			@Override
			public void handleEvent(Event event) {
				if (this.disposed) {
					return;
				}
				for (Resource each : r) {
					if (!each.isDisposed()) {
						each.dispose();
					}
				}
				this.disposed = true;
			}
		};
		addListener(SWT.Dispose, disposer);
		return this;
	}
	
	public SWTQuery dispose() {
		for (Widget each : this.items) {
			if (!each.isDisposed()) {
				each.dispose();
			}
		}
		return this;
	}
	
	public Rectangle getAbsoluteBounds() {
		if (this.items.size() > 0) {
			return new AbsoluteBounds().doSwitch(this.items.get(0));
		}
		return null;
	}

	public SWTQuery setBackground(int systemColor) {
		this.setBackground(Display.getDefault().getSystemColor(systemColor));
		return this;
	}
	
	public SWTQuery setForeground(int systemColor) {
		this.setForeground(Display.getDefault().getSystemColor(systemColor));
		return this;
	}
	
	public SWTQuery open() {
		for (Widget each : this.items) {
			if (each instanceof Shell) {
				((Shell) each).open();
			}
		}
		return this;
	}
	
	public SWTQuery pack() {
		for (Widget each : this.items) {
			if (each instanceof Control) {
				((Control) each).pack();
			}
		}
		return this;
	}
	
	public SWTQuery notifyListener(int type, Event e) {
		for (Widget each : this.items) {
			if (each instanceof Control) {
				Event clonedEvent = EventUtil.clone(e);
				clonedEvent.widget = each;
				each.notifyListeners(type, clonedEvent);
			}
		}
		return this;
	}
	
	@SuppressWarnings("unchecked")
	public <T extends Widget> T as() {
		if (this.items.size() > 0) {
			return (T) this.items.get(0);
		}
		return null;
	}
	
	/**
	 * runs an UI event loop until any one widget of this context will be
	 * disposed.
	 */
	public SWTQuery runEventLoopUntilDispose() {
		final Set<Widget> disposed = new HashSet<Widget>();
		addListener(SWT.Dispose, new Listener() {
			@Override
			public void handleEvent(Event event) {
				disposed.add(event.widget);
			}
		});

		Display display = Display.getDefault();
		while (disposed.size() == 0) {
			if (!display.readAndDispatch()) {
				display.sleep();
			}
		}

		return this;
	}
	
	@SuppressWarnings("unchecked")
	public <T> T getAdpater(Class<T> type) {
		return (T) Platform.getAdapterManager().getAdapter(this, type);
	}
	
	public <T extends SWTQueryExtension> T getPlugin(Class<T> pluginAPI) {
		try {
			Constructor<T> constructor = pluginAPI.getConstructor(SWTQuery.class);
			T result = constructor.newInstance(this);
			return result;
		} catch (Exception e) {
			throw new RuntimeException(e);
		}
	}
}
