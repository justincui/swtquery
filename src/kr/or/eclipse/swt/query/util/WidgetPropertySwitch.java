/**
 * Copyright 2011 jeeeyul@gmail.com
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 */

package kr.or.eclipse.swt.query.util;

import java.util.*;
import org.eclipse.swt.widgets.Widget;
import kr.or.eclipse.swt.query.util.internal.*;
import org.eclipse.ui.forms.widgets.FormText;
import java.lang.Boolean;
import org.eclipse.swt.widgets.TreeItem;
import org.eclipse.swt.graphics.Region;
import org.eclipse.swt.custom.StyleRange;
import org.eclipse.swt.graphics.Font;
import org.eclipse.jface.viewers.ILabelProvider;
import org.eclipse.swt.custom.CTabFolderRenderer;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.graphics.Color;
import org.eclipse.swt.graphics.Image;
import java.lang.Character;
import org.eclipse.swt.widgets.ToolTip;
import org.eclipse.swt.widgets.Caret;
import org.eclipse.swt.graphics.Point;
import org.eclipse.swt.dnd.DropTargetEffect;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.ui.forms.HyperlinkSettings;
import java.lang.Object;
import org.eclipse.swt.widgets.Layout;
import java.lang.Integer;
import java.lang.String;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.dnd.Transfer;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.dnd.DragSourceEffect;
import org.eclipse.swt.widgets.IME;
import org.eclipse.swt.graphics.Cursor;
import org.eclipse.swt.widgets.MenuItem;


/*
 * This file was generated by SWT Query SDK.
 * So you should not modify it manually.
 * If you want to customize this code, contact below:
 *
 * http://code.google.com/p/swtquery/
 */
public class WidgetPropertySwitch{
	private static final Map<String, PropertyEntry> map = new HashMap();
	
	private static class PropertyEntry{
		public String name;
		public Class<?> type;
		
		public PropertyEntry(String name, Class<?> type){
			this.name = name.trim().toLowerCase();
			this.type = type;
		}
	}
	
	static{
		map.put("maximized", new PropertyEntry("Maximized", Boolean.class));
		map.put("visible", new PropertyEntry("Visible", Boolean.class));
		map.put("horizontalpixel", new PropertyEntry("HorizontalPixel", Integer.class));
		map.put("moveable", new PropertyEntry("Moveable", Boolean.class));
		map.put("horizontalindex", new PropertyEntry("HorizontalIndex", Integer.class));
		map.put("origin", new PropertyEntry("Origin", Point.class));
		map.put("images", new PropertyEntry("Images", Image[].class));
		map.put("single", new PropertyEntry("Single", Boolean.class));
		map.put("data", new PropertyEntry("Data", Object.class));
		map.put("echochar", new PropertyEntry("EchoChar", Character.class));
		map.put("headclient", new PropertyEntry("HeadClient", Control.class));
		map.put("tooltiptext", new PropertyEntry("ToolTipText", String.class));
		map.put("menubar", new PropertyEntry("MenuBar", Menu.class));
		map.put("unselectedimagevisible", new PropertyEntry("UnselectedImageVisible", Boolean.class));
		map.put("url", new PropertyEntry("Url", String.class));
		map.put("modified", new PropertyEntry("Modified", Boolean.class));
		map.put("paragraphsseparated", new PropertyEntry("ParagraphsSeparated", Boolean.class));
		map.put("increment", new PropertyEntry("Increment", Integer.class));
		map.put("sortdirection", new PropertyEntry("SortDirection", Integer.class));
		map.put("seconds", new PropertyEntry("Seconds", Integer.class));
		map.put("fullscreen", new PropertyEntry("FullScreen", Boolean.class));
		map.put("labelprovider", new PropertyEntry("LabelProvider", ILabelProvider.class));
		map.put("visibleitemcount", new PropertyEntry("VisibleItemCount", Integer.class));
		map.put("parent", new PropertyEntry("Parent", Composite.class));
		map.put("thumb", new PropertyEntry("Thumb", Integer.class));
		map.put("wordwrap", new PropertyEntry("WordWrap", Boolean.class));
		map.put("minimized", new PropertyEntry("Minimized", Boolean.class));
		map.put("caretoffset", new PropertyEntry("CaretOffset", Integer.class));
		map.put("decorationcolor", new PropertyEntry("DecorationColor", Color.class));
		map.put("bounds", new PropertyEntry("Bounds", Rectangle.class));
		map.put("digits", new PropertyEntry("Digits", Integer.class));
		map.put("ignorecase", new PropertyEntry("IgnoreCase", Boolean.class));
		map.put("left", new PropertyEntry("Left", Control.class));
		map.put("bottom", new PropertyEntry("Bottom", Control.class));
		map.put("filter", new PropertyEntry("Filter", String.class));
		map.put("allowduplicates", new PropertyEntry("AllowDuplicates", Boolean.class));
		map.put("layout", new PropertyEntry("Layout", Layout.class));
		map.put("backgroundimage", new PropertyEntry("BackgroundImage", Image.class));
		map.put("tabposition", new PropertyEntry("TabPosition", Integer.class));
		map.put("titlebarbackground", new PropertyEntry("TitleBarBackground", Color.class));
		map.put("textchars", new PropertyEntry("TextChars", char[].class));
		map.put("ime", new PropertyEntry("IME", IME.class));
		map.put("tabheight", new PropertyEntry("TabHeight", Integer.class));
		map.put("maximizevisible", new PropertyEntry("MaximizeVisible", Boolean.class));
		map.put("dragdetect", new PropertyEntry("DragDetect", Boolean.class));
		map.put("alpha", new PropertyEntry("Alpha", Integer.class));
		map.put("javascriptenabled", new PropertyEntry("JavascriptEnabled", Boolean.class));
		map.put("preferredsize", new PropertyEntry("PreferredSize", Point.class));
		map.put("background", new PropertyEntry("Background", Color.class));
		map.put("topmargin", new PropertyEntry("TopMargin", Integer.class));
		map.put("weights", new PropertyEntry("Weights", int[].class));
		map.put("doubleclickenabled", new PropertyEntry("DoubleClickEnabled", Boolean.class));
		map.put("layoutdata", new PropertyEntry("LayoutData", Object.class));
		map.put("styleranges", new PropertyEntry("StyleRanges", StyleRange[].class));
		map.put("control", new PropertyEntry("Control", Control.class));
		map.put("sashwidth", new PropertyEntry("SashWidth", Integer.class));
		map.put("renderer", new PropertyEntry("Renderer", CTabFolderRenderer.class));
		map.put("font", new PropertyEntry("Font", Font.class));
		map.put("image", new PropertyEntry("Image", Image.class));
		map.put("rightminimumsize", new PropertyEntry("RightMinimumSize", Point.class));
		map.put("expanded", new PropertyEntry("Expanded", Boolean.class));
		map.put("client", new PropertyEntry("Client", Control.class));
		map.put("titlebarforeground", new PropertyEntry("TitleBarForeground", Color.class));
		map.put("rectangles", new PropertyEntry("Rectangles", Rectangle[].class));
		map.put("right", new PropertyEntry("Right", Control.class));
		map.put("items", new PropertyEntry("Items", String[].class));
		map.put("defaultitem", new PropertyEntry("DefaultItem", MenuItem.class));
		map.put("orientation", new PropertyEntry("Orientation", Integer.class));
		map.put("message", new PropertyEntry("Message", String.class));
		map.put("unselectedclosevisible", new PropertyEntry("UnselectedCloseVisible", Boolean.class));
		map.put("leftmargin", new PropertyEntry("LeftMargin", Integer.class));
		map.put("hours", new PropertyEntry("Hours", Integer.class));
		map.put("hoverimage", new PropertyEntry("HoverImage", Image.class));
		map.put("linesvisible", new PropertyEntry("LinesVisible", Boolean.class));
		map.put("defaultbutton", new PropertyEntry("DefaultButton", Button.class));
		map.put("bottommargin", new PropertyEntry("BottomMargin", Integer.class));
		map.put("minimum", new PropertyEntry("Minimum", Integer.class));
		map.put("alignment", new PropertyEntry("Alignment", Integer.class));
		map.put("alwaysshowscrollbars", new PropertyEntry("AlwaysShowScrollBars", Boolean.class));
		map.put("topleft", new PropertyEntry("TopLeft", Control.class));
		map.put("indent", new PropertyEntry("Indent", Integer.class));
		map.put("imeinputmode", new PropertyEntry("ImeInputMode", Integer.class));
		map.put("topindex", new PropertyEntry("TopIndex", Integer.class));
		map.put("rightwidth", new PropertyEntry("RightWidth", Integer.class));
		map.put("layoutdeferred", new PropertyEntry("LayoutDeferred", Boolean.class));
		map.put("separatorcontrol", new PropertyEntry("SeparatorControl", Control.class));
		map.put("foreground", new PropertyEntry("Foreground", Color.class));
		map.put("maximizedcontrol", new PropertyEntry("MaximizedControl", Control.class));
		map.put("listvisible", new PropertyEntry("ListVisible", Boolean.class));
		map.put("headervisible", new PropertyEntry("HeaderVisible", Boolean.class));
		map.put("textclient", new PropertyEntry("TextClient", Control.class));
		map.put("month", new PropertyEntry("Month", Integer.class));
		map.put("blockselection", new PropertyEntry("BlockSelection", Boolean.class));
		map.put("menu", new PropertyEntry("Menu", Menu.class));
		map.put("minimizevisible", new PropertyEntry("MinimizeVisible", Boolean.class));
		map.put("linespacing", new PropertyEntry("LineSpacing", Integer.class));
		map.put("id", new PropertyEntry("ID", Integer.class));
		map.put("href", new PropertyEntry("Href", Object.class));
		map.put("resizable", new PropertyEntry("Resizable", Boolean.class));
		map.put("width", new PropertyEntry("Width", Integer.class));
		map.put("justify", new PropertyEntry("Justify", Boolean.class));
		map.put("tooltip", new PropertyEntry("ToolTip", ToolTip.class));
		map.put("hoverdecorationcolor", new PropertyEntry("HoverDecorationColor", Color.class));
		map.put("size", new PropertyEntry("Size", Point.class));
		map.put("stippled", new PropertyEntry("Stippled", Boolean.class));
		map.put("selectionbackground", new PropertyEntry("SelectionBackground", Color.class));
		map.put("textlimit", new PropertyEntry("TextLimit", Integer.class));
		map.put("maximum", new PropertyEntry("Maximum", Integer.class));
		map.put("itemcount", new PropertyEntry("ItemCount", Integer.class));
		map.put("height", new PropertyEntry("Height", Integer.class));
		map.put("topright", new PropertyEntry("TopRight", Control.class));
		map.put("hyperlinksettings", new PropertyEntry("HyperlinkSettings", HyperlinkSettings.class));
		map.put("minwidth", new PropertyEntry("MinWidth", Integer.class));
		map.put("transfer", new PropertyEntry("Transfer", Transfer[].class));
		map.put("activeimage", new PropertyEntry("ActiveImage", Image.class));
		map.put("editable", new PropertyEntry("Editable", Boolean.class));
		map.put("formtext", new PropertyEntry("FormText", FormText.class));
		map.put("touchenabled", new PropertyEntry("TouchEnabled", Boolean.class));
		map.put("droptargeteffect", new PropertyEntry("DropTargetEffect", DropTargetEffect.class));
		map.put("simple", new PropertyEntry("Simple", Boolean.class));
		map.put("margincolor", new PropertyEntry("MarginColor", Color.class));
		map.put("toppixel", new PropertyEntry("TopPixel", Integer.class));
		map.put("checked", new PropertyEntry("Checked", Boolean.class));
		map.put("titlebarbordercolor", new PropertyEntry("TitleBarBorderColor", Color.class));
		map.put("locked", new PropertyEntry("Locked", Boolean.class));
		map.put("caret", new PropertyEntry("Caret", Caret.class));
		map.put("wrapindent", new PropertyEntry("WrapIndent", Integer.class));
		map.put("autohide", new PropertyEntry("AutoHide", Boolean.class));
		map.put("enabled", new PropertyEntry("Enabled", Boolean.class));
		map.put("dragsourceeffect", new PropertyEntry("DragSourceEffect", DragSourceEffect.class));
		map.put("showfocusedcontrol", new PropertyEntry("ShowFocusedControl", Boolean.class));
		map.put("columnorder", new PropertyEntry("ColumnOrder", int[].class));
		map.put("mruvisible", new PropertyEntry("MRUVisible", Boolean.class));
		map.put("grayed", new PropertyEntry("Grayed", Boolean.class));
		map.put("day", new PropertyEntry("Day", Integer.class));
		map.put("cursor", new PropertyEntry("Cursor", Cursor.class));
		map.put("year", new PropertyEntry("Year", Integer.class));
		map.put("toolbarverticalalignment", new PropertyEntry("ToolBarVerticalAlignment", Integer.class));
		map.put("region", new PropertyEntry("Region", Region.class));
		map.put("accelerator", new PropertyEntry("Accelerator", Integer.class));
		map.put("wrapindices", new PropertyEntry("WrapIndices", int[].class));
		map.put("pageincrement", new PropertyEntry("PageIncrement", Integer.class));
		map.put("matchemptystring", new PropertyEntry("MatchEmptyString", Boolean.class));
		map.put("compositionoffset", new PropertyEntry("CompositionOffset", Integer.class));
		map.put("description", new PropertyEntry("Description", String.class));
		map.put("showclose", new PropertyEntry("ShowClose", Boolean.class));
		map.put("selectionforeground", new PropertyEntry("SelectionForeground", Color.class));
		map.put("backgroundmode", new PropertyEntry("BackgroundMode", Integer.class));
		map.put("titlebargradientbackground", new PropertyEntry("TitleBarGradientBackground", Color.class));
		map.put("blockselectionbounds", new PropertyEntry("BlockSelectionBounds", Rectangle.class));
		map.put("minheight", new PropertyEntry("MinHeight", Integer.class));
		map.put("rightmargin", new PropertyEntry("RightMargin", Integer.class));
		map.put("location", new PropertyEntry("Location", Point.class));
		map.put("spacing", new PropertyEntry("Spacing", Integer.class));
		map.put("minimumsize", new PropertyEntry("MinimumSize", Point.class));
		map.put("descriptioncontrol", new PropertyEntry("DescriptionControl", Control.class));
		map.put("text", new PropertyEntry("Text", String.class));
		map.put("tabs", new PropertyEntry("Tabs", Integer.class));
		map.put("bordervisible", new PropertyEntry("BorderVisible", Boolean.class));
		map.put("state", new PropertyEntry("State", Integer.class));
		map.put("topitem", new PropertyEntry("TopItem", TreeItem.class));
		map.put("tablist", new PropertyEntry("TabList", Control[].class));
		map.put("topcenter", new PropertyEntry("TopCenter", Control.class));
		map.put("expandhorizontal", new PropertyEntry("ExpandHorizontal", Boolean.class));
		map.put("tabstops", new PropertyEntry("TabStops", int[].class));
		map.put("minutes", new PropertyEntry("Minutes", Integer.class));
		map.put("expandvertical", new PropertyEntry("ExpandVertical", Boolean.class));
		map.put("hotimage", new PropertyEntry("HotImage", Image.class));
		map.put("minimumcharacters", new PropertyEntry("MinimumCharacters", Integer.class));	
	}

	private static final GetMaximizedSwitch getMaximizedSwitch = new GetMaximizedSwitch();
	private static final SetMaximizedSwitch setMaximizedSwitch = new SetMaximizedSwitch();
	private static final GetVisibleSwitch getVisibleSwitch = new GetVisibleSwitch();
	private static final SetVisibleSwitch setVisibleSwitch = new SetVisibleSwitch();
	private static final GetHorizontalPixelSwitch getHorizontalPixelSwitch = new GetHorizontalPixelSwitch();
	private static final SetHorizontalPixelSwitch setHorizontalPixelSwitch = new SetHorizontalPixelSwitch();
	private static final GetMoveableSwitch getMoveableSwitch = new GetMoveableSwitch();
	private static final SetMoveableSwitch setMoveableSwitch = new SetMoveableSwitch();
	private static final GetHorizontalIndexSwitch getHorizontalIndexSwitch = new GetHorizontalIndexSwitch();
	private static final SetHorizontalIndexSwitch setHorizontalIndexSwitch = new SetHorizontalIndexSwitch();
	private static final GetOriginSwitch getOriginSwitch = new GetOriginSwitch();
	private static final SetOriginSwitch setOriginSwitch = new SetOriginSwitch();
	private static final GetImagesSwitch getImagesSwitch = new GetImagesSwitch();
	private static final SetImagesSwitch setImagesSwitch = new SetImagesSwitch();
	private static final GetSingleSwitch getSingleSwitch = new GetSingleSwitch();
	private static final SetSingleSwitch setSingleSwitch = new SetSingleSwitch();
	private static final GetDataSwitch getDataSwitch = new GetDataSwitch();
	private static final SetDataSwitch setDataSwitch = new SetDataSwitch();
	private static final GetEchoCharSwitch getEchoCharSwitch = new GetEchoCharSwitch();
	private static final SetEchoCharSwitch setEchoCharSwitch = new SetEchoCharSwitch();
	private static final GetHeadClientSwitch getHeadClientSwitch = new GetHeadClientSwitch();
	private static final SetHeadClientSwitch setHeadClientSwitch = new SetHeadClientSwitch();
	private static final GetToolTipTextSwitch getToolTipTextSwitch = new GetToolTipTextSwitch();
	private static final SetToolTipTextSwitch setToolTipTextSwitch = new SetToolTipTextSwitch();
	private static final GetMenuBarSwitch getMenuBarSwitch = new GetMenuBarSwitch();
	private static final SetMenuBarSwitch setMenuBarSwitch = new SetMenuBarSwitch();
	private static final GetUnselectedImageVisibleSwitch getUnselectedImageVisibleSwitch = new GetUnselectedImageVisibleSwitch();
	private static final SetUnselectedImageVisibleSwitch setUnselectedImageVisibleSwitch = new SetUnselectedImageVisibleSwitch();
	private static final GetUrlSwitch getUrlSwitch = new GetUrlSwitch();
	private static final SetUrlSwitch setUrlSwitch = new SetUrlSwitch();
	private static final GetModifiedSwitch getModifiedSwitch = new GetModifiedSwitch();
	private static final SetModifiedSwitch setModifiedSwitch = new SetModifiedSwitch();
	private static final GetParagraphsSeparatedSwitch getParagraphsSeparatedSwitch = new GetParagraphsSeparatedSwitch();
	private static final SetParagraphsSeparatedSwitch setParagraphsSeparatedSwitch = new SetParagraphsSeparatedSwitch();
	private static final GetIncrementSwitch getIncrementSwitch = new GetIncrementSwitch();
	private static final SetIncrementSwitch setIncrementSwitch = new SetIncrementSwitch();
	private static final GetSortDirectionSwitch getSortDirectionSwitch = new GetSortDirectionSwitch();
	private static final SetSortDirectionSwitch setSortDirectionSwitch = new SetSortDirectionSwitch();
	private static final GetSecondsSwitch getSecondsSwitch = new GetSecondsSwitch();
	private static final SetSecondsSwitch setSecondsSwitch = new SetSecondsSwitch();
	private static final GetFullScreenSwitch getFullScreenSwitch = new GetFullScreenSwitch();
	private static final SetFullScreenSwitch setFullScreenSwitch = new SetFullScreenSwitch();
	private static final GetLabelProviderSwitch getLabelProviderSwitch = new GetLabelProviderSwitch();
	private static final SetLabelProviderSwitch setLabelProviderSwitch = new SetLabelProviderSwitch();
	private static final GetVisibleItemCountSwitch getVisibleItemCountSwitch = new GetVisibleItemCountSwitch();
	private static final SetVisibleItemCountSwitch setVisibleItemCountSwitch = new SetVisibleItemCountSwitch();
	private static final GetParentSwitch getParentSwitch = new GetParentSwitch();
	private static final SetParentSwitch setParentSwitch = new SetParentSwitch();
	private static final GetThumbSwitch getThumbSwitch = new GetThumbSwitch();
	private static final SetThumbSwitch setThumbSwitch = new SetThumbSwitch();
	private static final GetWordWrapSwitch getWordWrapSwitch = new GetWordWrapSwitch();
	private static final SetWordWrapSwitch setWordWrapSwitch = new SetWordWrapSwitch();
	private static final GetMinimizedSwitch getMinimizedSwitch = new GetMinimizedSwitch();
	private static final SetMinimizedSwitch setMinimizedSwitch = new SetMinimizedSwitch();
	private static final GetCaretOffsetSwitch getCaretOffsetSwitch = new GetCaretOffsetSwitch();
	private static final SetCaretOffsetSwitch setCaretOffsetSwitch = new SetCaretOffsetSwitch();
	private static final GetDecorationColorSwitch getDecorationColorSwitch = new GetDecorationColorSwitch();
	private static final SetDecorationColorSwitch setDecorationColorSwitch = new SetDecorationColorSwitch();
	private static final GetBoundsSwitch getBoundsSwitch = new GetBoundsSwitch();
	private static final SetBoundsSwitch setBoundsSwitch = new SetBoundsSwitch();
	private static final GetDigitsSwitch getDigitsSwitch = new GetDigitsSwitch();
	private static final SetDigitsSwitch setDigitsSwitch = new SetDigitsSwitch();
	private static final GetIgnoreCaseSwitch getIgnoreCaseSwitch = new GetIgnoreCaseSwitch();
	private static final SetIgnoreCaseSwitch setIgnoreCaseSwitch = new SetIgnoreCaseSwitch();
	private static final GetLeftSwitch getLeftSwitch = new GetLeftSwitch();
	private static final SetLeftSwitch setLeftSwitch = new SetLeftSwitch();
	private static final GetBottomSwitch getBottomSwitch = new GetBottomSwitch();
	private static final SetBottomSwitch setBottomSwitch = new SetBottomSwitch();
	private static final GetFilterSwitch getFilterSwitch = new GetFilterSwitch();
	private static final SetFilterSwitch setFilterSwitch = new SetFilterSwitch();
	private static final GetAllowDuplicatesSwitch getAllowDuplicatesSwitch = new GetAllowDuplicatesSwitch();
	private static final SetAllowDuplicatesSwitch setAllowDuplicatesSwitch = new SetAllowDuplicatesSwitch();
	private static final GetLayoutSwitch getLayoutSwitch = new GetLayoutSwitch();
	private static final SetLayoutSwitch setLayoutSwitch = new SetLayoutSwitch();
	private static final GetBackgroundImageSwitch getBackgroundImageSwitch = new GetBackgroundImageSwitch();
	private static final SetBackgroundImageSwitch setBackgroundImageSwitch = new SetBackgroundImageSwitch();
	private static final GetTabPositionSwitch getTabPositionSwitch = new GetTabPositionSwitch();
	private static final SetTabPositionSwitch setTabPositionSwitch = new SetTabPositionSwitch();
	private static final GetTitleBarBackgroundSwitch getTitleBarBackgroundSwitch = new GetTitleBarBackgroundSwitch();
	private static final SetTitleBarBackgroundSwitch setTitleBarBackgroundSwitch = new SetTitleBarBackgroundSwitch();
	private static final GetTextCharsSwitch getTextCharsSwitch = new GetTextCharsSwitch();
	private static final SetTextCharsSwitch setTextCharsSwitch = new SetTextCharsSwitch();
	private static final GetIMESwitch getIMESwitch = new GetIMESwitch();
	private static final SetIMESwitch setIMESwitch = new SetIMESwitch();
	private static final GetTabHeightSwitch getTabHeightSwitch = new GetTabHeightSwitch();
	private static final SetTabHeightSwitch setTabHeightSwitch = new SetTabHeightSwitch();
	private static final GetMaximizeVisibleSwitch getMaximizeVisibleSwitch = new GetMaximizeVisibleSwitch();
	private static final SetMaximizeVisibleSwitch setMaximizeVisibleSwitch = new SetMaximizeVisibleSwitch();
	private static final GetDragDetectSwitch getDragDetectSwitch = new GetDragDetectSwitch();
	private static final SetDragDetectSwitch setDragDetectSwitch = new SetDragDetectSwitch();
	private static final GetAlphaSwitch getAlphaSwitch = new GetAlphaSwitch();
	private static final SetAlphaSwitch setAlphaSwitch = new SetAlphaSwitch();
	private static final GetJavascriptEnabledSwitch getJavascriptEnabledSwitch = new GetJavascriptEnabledSwitch();
	private static final SetJavascriptEnabledSwitch setJavascriptEnabledSwitch = new SetJavascriptEnabledSwitch();
	private static final GetPreferredSizeSwitch getPreferredSizeSwitch = new GetPreferredSizeSwitch();
	private static final SetPreferredSizeSwitch setPreferredSizeSwitch = new SetPreferredSizeSwitch();
	private static final GetBackgroundSwitch getBackgroundSwitch = new GetBackgroundSwitch();
	private static final SetBackgroundSwitch setBackgroundSwitch = new SetBackgroundSwitch();
	private static final GetTopMarginSwitch getTopMarginSwitch = new GetTopMarginSwitch();
	private static final SetTopMarginSwitch setTopMarginSwitch = new SetTopMarginSwitch();
	private static final GetWeightsSwitch getWeightsSwitch = new GetWeightsSwitch();
	private static final SetWeightsSwitch setWeightsSwitch = new SetWeightsSwitch();
	private static final GetDoubleClickEnabledSwitch getDoubleClickEnabledSwitch = new GetDoubleClickEnabledSwitch();
	private static final SetDoubleClickEnabledSwitch setDoubleClickEnabledSwitch = new SetDoubleClickEnabledSwitch();
	private static final GetLayoutDataSwitch getLayoutDataSwitch = new GetLayoutDataSwitch();
	private static final SetLayoutDataSwitch setLayoutDataSwitch = new SetLayoutDataSwitch();
	private static final GetStyleRangesSwitch getStyleRangesSwitch = new GetStyleRangesSwitch();
	private static final SetStyleRangesSwitch setStyleRangesSwitch = new SetStyleRangesSwitch();
	private static final GetControlSwitch getControlSwitch = new GetControlSwitch();
	private static final SetControlSwitch setControlSwitch = new SetControlSwitch();
	private static final GetSashWidthSwitch getSashWidthSwitch = new GetSashWidthSwitch();
	private static final SetSashWidthSwitch setSashWidthSwitch = new SetSashWidthSwitch();
	private static final GetRendererSwitch getRendererSwitch = new GetRendererSwitch();
	private static final SetRendererSwitch setRendererSwitch = new SetRendererSwitch();
	private static final GetFontSwitch getFontSwitch = new GetFontSwitch();
	private static final SetFontSwitch setFontSwitch = new SetFontSwitch();
	private static final GetImageSwitch getImageSwitch = new GetImageSwitch();
	private static final SetImageSwitch setImageSwitch = new SetImageSwitch();
	private static final GetRightMinimumSizeSwitch getRightMinimumSizeSwitch = new GetRightMinimumSizeSwitch();
	private static final SetRightMinimumSizeSwitch setRightMinimumSizeSwitch = new SetRightMinimumSizeSwitch();
	private static final GetExpandedSwitch getExpandedSwitch = new GetExpandedSwitch();
	private static final SetExpandedSwitch setExpandedSwitch = new SetExpandedSwitch();
	private static final GetClientSwitch getClientSwitch = new GetClientSwitch();
	private static final SetClientSwitch setClientSwitch = new SetClientSwitch();
	private static final GetTitleBarForegroundSwitch getTitleBarForegroundSwitch = new GetTitleBarForegroundSwitch();
	private static final SetTitleBarForegroundSwitch setTitleBarForegroundSwitch = new SetTitleBarForegroundSwitch();
	private static final GetRectanglesSwitch getRectanglesSwitch = new GetRectanglesSwitch();
	private static final SetRectanglesSwitch setRectanglesSwitch = new SetRectanglesSwitch();
	private static final GetRightSwitch getRightSwitch = new GetRightSwitch();
	private static final SetRightSwitch setRightSwitch = new SetRightSwitch();
	private static final GetItemsSwitch getItemsSwitch = new GetItemsSwitch();
	private static final SetItemsSwitch setItemsSwitch = new SetItemsSwitch();
	private static final GetDefaultItemSwitch getDefaultItemSwitch = new GetDefaultItemSwitch();
	private static final SetDefaultItemSwitch setDefaultItemSwitch = new SetDefaultItemSwitch();
	private static final GetOrientationSwitch getOrientationSwitch = new GetOrientationSwitch();
	private static final SetOrientationSwitch setOrientationSwitch = new SetOrientationSwitch();
	private static final GetMessageSwitch getMessageSwitch = new GetMessageSwitch();
	private static final SetMessageSwitch setMessageSwitch = new SetMessageSwitch();
	private static final GetUnselectedCloseVisibleSwitch getUnselectedCloseVisibleSwitch = new GetUnselectedCloseVisibleSwitch();
	private static final SetUnselectedCloseVisibleSwitch setUnselectedCloseVisibleSwitch = new SetUnselectedCloseVisibleSwitch();
	private static final GetLeftMarginSwitch getLeftMarginSwitch = new GetLeftMarginSwitch();
	private static final SetLeftMarginSwitch setLeftMarginSwitch = new SetLeftMarginSwitch();
	private static final GetHoursSwitch getHoursSwitch = new GetHoursSwitch();
	private static final SetHoursSwitch setHoursSwitch = new SetHoursSwitch();
	private static final GetHoverImageSwitch getHoverImageSwitch = new GetHoverImageSwitch();
	private static final SetHoverImageSwitch setHoverImageSwitch = new SetHoverImageSwitch();
	private static final GetLinesVisibleSwitch getLinesVisibleSwitch = new GetLinesVisibleSwitch();
	private static final SetLinesVisibleSwitch setLinesVisibleSwitch = new SetLinesVisibleSwitch();
	private static final GetDefaultButtonSwitch getDefaultButtonSwitch = new GetDefaultButtonSwitch();
	private static final SetDefaultButtonSwitch setDefaultButtonSwitch = new SetDefaultButtonSwitch();
	private static final GetBottomMarginSwitch getBottomMarginSwitch = new GetBottomMarginSwitch();
	private static final SetBottomMarginSwitch setBottomMarginSwitch = new SetBottomMarginSwitch();
	private static final GetMinimumSwitch getMinimumSwitch = new GetMinimumSwitch();
	private static final SetMinimumSwitch setMinimumSwitch = new SetMinimumSwitch();
	private static final GetAlignmentSwitch getAlignmentSwitch = new GetAlignmentSwitch();
	private static final SetAlignmentSwitch setAlignmentSwitch = new SetAlignmentSwitch();
	private static final GetAlwaysShowScrollBarsSwitch getAlwaysShowScrollBarsSwitch = new GetAlwaysShowScrollBarsSwitch();
	private static final SetAlwaysShowScrollBarsSwitch setAlwaysShowScrollBarsSwitch = new SetAlwaysShowScrollBarsSwitch();
	private static final GetTopLeftSwitch getTopLeftSwitch = new GetTopLeftSwitch();
	private static final SetTopLeftSwitch setTopLeftSwitch = new SetTopLeftSwitch();
	private static final GetIndentSwitch getIndentSwitch = new GetIndentSwitch();
	private static final SetIndentSwitch setIndentSwitch = new SetIndentSwitch();
	private static final GetImeInputModeSwitch getImeInputModeSwitch = new GetImeInputModeSwitch();
	private static final SetImeInputModeSwitch setImeInputModeSwitch = new SetImeInputModeSwitch();
	private static final GetTopIndexSwitch getTopIndexSwitch = new GetTopIndexSwitch();
	private static final SetTopIndexSwitch setTopIndexSwitch = new SetTopIndexSwitch();
	private static final GetRightWidthSwitch getRightWidthSwitch = new GetRightWidthSwitch();
	private static final SetRightWidthSwitch setRightWidthSwitch = new SetRightWidthSwitch();
	private static final GetLayoutDeferredSwitch getLayoutDeferredSwitch = new GetLayoutDeferredSwitch();
	private static final SetLayoutDeferredSwitch setLayoutDeferredSwitch = new SetLayoutDeferredSwitch();
	private static final GetSeparatorControlSwitch getSeparatorControlSwitch = new GetSeparatorControlSwitch();
	private static final SetSeparatorControlSwitch setSeparatorControlSwitch = new SetSeparatorControlSwitch();
	private static final GetForegroundSwitch getForegroundSwitch = new GetForegroundSwitch();
	private static final SetForegroundSwitch setForegroundSwitch = new SetForegroundSwitch();
	private static final GetMaximizedControlSwitch getMaximizedControlSwitch = new GetMaximizedControlSwitch();
	private static final SetMaximizedControlSwitch setMaximizedControlSwitch = new SetMaximizedControlSwitch();
	private static final GetListVisibleSwitch getListVisibleSwitch = new GetListVisibleSwitch();
	private static final SetListVisibleSwitch setListVisibleSwitch = new SetListVisibleSwitch();
	private static final GetHeaderVisibleSwitch getHeaderVisibleSwitch = new GetHeaderVisibleSwitch();
	private static final SetHeaderVisibleSwitch setHeaderVisibleSwitch = new SetHeaderVisibleSwitch();
	private static final GetTextClientSwitch getTextClientSwitch = new GetTextClientSwitch();
	private static final SetTextClientSwitch setTextClientSwitch = new SetTextClientSwitch();
	private static final GetMonthSwitch getMonthSwitch = new GetMonthSwitch();
	private static final SetMonthSwitch setMonthSwitch = new SetMonthSwitch();
	private static final GetBlockSelectionSwitch getBlockSelectionSwitch = new GetBlockSelectionSwitch();
	private static final SetBlockSelectionSwitch setBlockSelectionSwitch = new SetBlockSelectionSwitch();
	private static final GetMenuSwitch getMenuSwitch = new GetMenuSwitch();
	private static final SetMenuSwitch setMenuSwitch = new SetMenuSwitch();
	private static final GetMinimizeVisibleSwitch getMinimizeVisibleSwitch = new GetMinimizeVisibleSwitch();
	private static final SetMinimizeVisibleSwitch setMinimizeVisibleSwitch = new SetMinimizeVisibleSwitch();
	private static final GetLineSpacingSwitch getLineSpacingSwitch = new GetLineSpacingSwitch();
	private static final SetLineSpacingSwitch setLineSpacingSwitch = new SetLineSpacingSwitch();
	private static final GetIDSwitch getIDSwitch = new GetIDSwitch();
	private static final SetIDSwitch setIDSwitch = new SetIDSwitch();
	private static final GetHrefSwitch getHrefSwitch = new GetHrefSwitch();
	private static final SetHrefSwitch setHrefSwitch = new SetHrefSwitch();
	private static final GetResizableSwitch getResizableSwitch = new GetResizableSwitch();
	private static final SetResizableSwitch setResizableSwitch = new SetResizableSwitch();
	private static final GetWidthSwitch getWidthSwitch = new GetWidthSwitch();
	private static final SetWidthSwitch setWidthSwitch = new SetWidthSwitch();
	private static final GetJustifySwitch getJustifySwitch = new GetJustifySwitch();
	private static final SetJustifySwitch setJustifySwitch = new SetJustifySwitch();
	private static final GetToolTipSwitch getToolTipSwitch = new GetToolTipSwitch();
	private static final SetToolTipSwitch setToolTipSwitch = new SetToolTipSwitch();
	private static final GetHoverDecorationColorSwitch getHoverDecorationColorSwitch = new GetHoverDecorationColorSwitch();
	private static final SetHoverDecorationColorSwitch setHoverDecorationColorSwitch = new SetHoverDecorationColorSwitch();
	private static final GetSizeSwitch getSizeSwitch = new GetSizeSwitch();
	private static final SetSizeSwitch setSizeSwitch = new SetSizeSwitch();
	private static final GetStippledSwitch getStippledSwitch = new GetStippledSwitch();
	private static final SetStippledSwitch setStippledSwitch = new SetStippledSwitch();
	private static final GetSelectionBackgroundSwitch getSelectionBackgroundSwitch = new GetSelectionBackgroundSwitch();
	private static final SetSelectionBackgroundSwitch setSelectionBackgroundSwitch = new SetSelectionBackgroundSwitch();
	private static final GetTextLimitSwitch getTextLimitSwitch = new GetTextLimitSwitch();
	private static final SetTextLimitSwitch setTextLimitSwitch = new SetTextLimitSwitch();
	private static final GetMaximumSwitch getMaximumSwitch = new GetMaximumSwitch();
	private static final SetMaximumSwitch setMaximumSwitch = new SetMaximumSwitch();
	private static final GetItemCountSwitch getItemCountSwitch = new GetItemCountSwitch();
	private static final SetItemCountSwitch setItemCountSwitch = new SetItemCountSwitch();
	private static final GetHeightSwitch getHeightSwitch = new GetHeightSwitch();
	private static final SetHeightSwitch setHeightSwitch = new SetHeightSwitch();
	private static final GetTopRightSwitch getTopRightSwitch = new GetTopRightSwitch();
	private static final SetTopRightSwitch setTopRightSwitch = new SetTopRightSwitch();
	private static final GetHyperlinkSettingsSwitch getHyperlinkSettingsSwitch = new GetHyperlinkSettingsSwitch();
	private static final SetHyperlinkSettingsSwitch setHyperlinkSettingsSwitch = new SetHyperlinkSettingsSwitch();
	private static final GetMinWidthSwitch getMinWidthSwitch = new GetMinWidthSwitch();
	private static final SetMinWidthSwitch setMinWidthSwitch = new SetMinWidthSwitch();
	private static final GetTransferSwitch getTransferSwitch = new GetTransferSwitch();
	private static final SetTransferSwitch setTransferSwitch = new SetTransferSwitch();
	private static final GetActiveImageSwitch getActiveImageSwitch = new GetActiveImageSwitch();
	private static final SetActiveImageSwitch setActiveImageSwitch = new SetActiveImageSwitch();
	private static final GetEditableSwitch getEditableSwitch = new GetEditableSwitch();
	private static final SetEditableSwitch setEditableSwitch = new SetEditableSwitch();
	private static final GetFormTextSwitch getFormTextSwitch = new GetFormTextSwitch();
	private static final SetFormTextSwitch setFormTextSwitch = new SetFormTextSwitch();
	private static final GetTouchEnabledSwitch getTouchEnabledSwitch = new GetTouchEnabledSwitch();
	private static final SetTouchEnabledSwitch setTouchEnabledSwitch = new SetTouchEnabledSwitch();
	private static final GetDropTargetEffectSwitch getDropTargetEffectSwitch = new GetDropTargetEffectSwitch();
	private static final SetDropTargetEffectSwitch setDropTargetEffectSwitch = new SetDropTargetEffectSwitch();
	private static final GetSimpleSwitch getSimpleSwitch = new GetSimpleSwitch();
	private static final SetSimpleSwitch setSimpleSwitch = new SetSimpleSwitch();
	private static final GetMarginColorSwitch getMarginColorSwitch = new GetMarginColorSwitch();
	private static final SetMarginColorSwitch setMarginColorSwitch = new SetMarginColorSwitch();
	private static final GetTopPixelSwitch getTopPixelSwitch = new GetTopPixelSwitch();
	private static final SetTopPixelSwitch setTopPixelSwitch = new SetTopPixelSwitch();
	private static final GetCheckedSwitch getCheckedSwitch = new GetCheckedSwitch();
	private static final SetCheckedSwitch setCheckedSwitch = new SetCheckedSwitch();
	private static final GetTitleBarBorderColorSwitch getTitleBarBorderColorSwitch = new GetTitleBarBorderColorSwitch();
	private static final SetTitleBarBorderColorSwitch setTitleBarBorderColorSwitch = new SetTitleBarBorderColorSwitch();
	private static final GetLockedSwitch getLockedSwitch = new GetLockedSwitch();
	private static final SetLockedSwitch setLockedSwitch = new SetLockedSwitch();
	private static final GetCaretSwitch getCaretSwitch = new GetCaretSwitch();
	private static final SetCaretSwitch setCaretSwitch = new SetCaretSwitch();
	private static final GetWrapIndentSwitch getWrapIndentSwitch = new GetWrapIndentSwitch();
	private static final SetWrapIndentSwitch setWrapIndentSwitch = new SetWrapIndentSwitch();
	private static final GetAutoHideSwitch getAutoHideSwitch = new GetAutoHideSwitch();
	private static final SetAutoHideSwitch setAutoHideSwitch = new SetAutoHideSwitch();
	private static final GetEnabledSwitch getEnabledSwitch = new GetEnabledSwitch();
	private static final SetEnabledSwitch setEnabledSwitch = new SetEnabledSwitch();
	private static final GetDragSourceEffectSwitch getDragSourceEffectSwitch = new GetDragSourceEffectSwitch();
	private static final SetDragSourceEffectSwitch setDragSourceEffectSwitch = new SetDragSourceEffectSwitch();
	private static final GetShowFocusedControlSwitch getShowFocusedControlSwitch = new GetShowFocusedControlSwitch();
	private static final SetShowFocusedControlSwitch setShowFocusedControlSwitch = new SetShowFocusedControlSwitch();
	private static final GetColumnOrderSwitch getColumnOrderSwitch = new GetColumnOrderSwitch();
	private static final SetColumnOrderSwitch setColumnOrderSwitch = new SetColumnOrderSwitch();
	private static final GetMRUVisibleSwitch getMRUVisibleSwitch = new GetMRUVisibleSwitch();
	private static final SetMRUVisibleSwitch setMRUVisibleSwitch = new SetMRUVisibleSwitch();
	private static final GetGrayedSwitch getGrayedSwitch = new GetGrayedSwitch();
	private static final SetGrayedSwitch setGrayedSwitch = new SetGrayedSwitch();
	private static final GetDaySwitch getDaySwitch = new GetDaySwitch();
	private static final SetDaySwitch setDaySwitch = new SetDaySwitch();
	private static final GetCursorSwitch getCursorSwitch = new GetCursorSwitch();
	private static final SetCursorSwitch setCursorSwitch = new SetCursorSwitch();
	private static final GetYearSwitch getYearSwitch = new GetYearSwitch();
	private static final SetYearSwitch setYearSwitch = new SetYearSwitch();
	private static final GetToolBarVerticalAlignmentSwitch getToolBarVerticalAlignmentSwitch = new GetToolBarVerticalAlignmentSwitch();
	private static final SetToolBarVerticalAlignmentSwitch setToolBarVerticalAlignmentSwitch = new SetToolBarVerticalAlignmentSwitch();
	private static final GetRegionSwitch getRegionSwitch = new GetRegionSwitch();
	private static final SetRegionSwitch setRegionSwitch = new SetRegionSwitch();
	private static final GetAcceleratorSwitch getAcceleratorSwitch = new GetAcceleratorSwitch();
	private static final SetAcceleratorSwitch setAcceleratorSwitch = new SetAcceleratorSwitch();
	private static final GetWrapIndicesSwitch getWrapIndicesSwitch = new GetWrapIndicesSwitch();
	private static final SetWrapIndicesSwitch setWrapIndicesSwitch = new SetWrapIndicesSwitch();
	private static final GetPageIncrementSwitch getPageIncrementSwitch = new GetPageIncrementSwitch();
	private static final SetPageIncrementSwitch setPageIncrementSwitch = new SetPageIncrementSwitch();
	private static final GetMatchEmptyStringSwitch getMatchEmptyStringSwitch = new GetMatchEmptyStringSwitch();
	private static final SetMatchEmptyStringSwitch setMatchEmptyStringSwitch = new SetMatchEmptyStringSwitch();
	private static final GetCompositionOffsetSwitch getCompositionOffsetSwitch = new GetCompositionOffsetSwitch();
	private static final SetCompositionOffsetSwitch setCompositionOffsetSwitch = new SetCompositionOffsetSwitch();
	private static final GetDescriptionSwitch getDescriptionSwitch = new GetDescriptionSwitch();
	private static final SetDescriptionSwitch setDescriptionSwitch = new SetDescriptionSwitch();
	private static final GetShowCloseSwitch getShowCloseSwitch = new GetShowCloseSwitch();
	private static final SetShowCloseSwitch setShowCloseSwitch = new SetShowCloseSwitch();
	private static final GetSelectionForegroundSwitch getSelectionForegroundSwitch = new GetSelectionForegroundSwitch();
	private static final SetSelectionForegroundSwitch setSelectionForegroundSwitch = new SetSelectionForegroundSwitch();
	private static final GetBackgroundModeSwitch getBackgroundModeSwitch = new GetBackgroundModeSwitch();
	private static final SetBackgroundModeSwitch setBackgroundModeSwitch = new SetBackgroundModeSwitch();
	private static final GetTitleBarGradientBackgroundSwitch getTitleBarGradientBackgroundSwitch = new GetTitleBarGradientBackgroundSwitch();
	private static final SetTitleBarGradientBackgroundSwitch setTitleBarGradientBackgroundSwitch = new SetTitleBarGradientBackgroundSwitch();
	private static final GetBlockSelectionBoundsSwitch getBlockSelectionBoundsSwitch = new GetBlockSelectionBoundsSwitch();
	private static final SetBlockSelectionBoundsSwitch setBlockSelectionBoundsSwitch = new SetBlockSelectionBoundsSwitch();
	private static final GetMinHeightSwitch getMinHeightSwitch = new GetMinHeightSwitch();
	private static final SetMinHeightSwitch setMinHeightSwitch = new SetMinHeightSwitch();
	private static final GetRightMarginSwitch getRightMarginSwitch = new GetRightMarginSwitch();
	private static final SetRightMarginSwitch setRightMarginSwitch = new SetRightMarginSwitch();
	private static final GetLocationSwitch getLocationSwitch = new GetLocationSwitch();
	private static final SetLocationSwitch setLocationSwitch = new SetLocationSwitch();
	private static final GetSpacingSwitch getSpacingSwitch = new GetSpacingSwitch();
	private static final SetSpacingSwitch setSpacingSwitch = new SetSpacingSwitch();
	private static final GetMinimumSizeSwitch getMinimumSizeSwitch = new GetMinimumSizeSwitch();
	private static final SetMinimumSizeSwitch setMinimumSizeSwitch = new SetMinimumSizeSwitch();
	private static final GetDescriptionControlSwitch getDescriptionControlSwitch = new GetDescriptionControlSwitch();
	private static final SetDescriptionControlSwitch setDescriptionControlSwitch = new SetDescriptionControlSwitch();
	private static final GetTextSwitch getTextSwitch = new GetTextSwitch();
	private static final SetTextSwitch setTextSwitch = new SetTextSwitch();
	private static final GetTabsSwitch getTabsSwitch = new GetTabsSwitch();
	private static final SetTabsSwitch setTabsSwitch = new SetTabsSwitch();
	private static final GetBorderVisibleSwitch getBorderVisibleSwitch = new GetBorderVisibleSwitch();
	private static final SetBorderVisibleSwitch setBorderVisibleSwitch = new SetBorderVisibleSwitch();
	private static final GetStateSwitch getStateSwitch = new GetStateSwitch();
	private static final SetStateSwitch setStateSwitch = new SetStateSwitch();
	private static final GetTopItemSwitch getTopItemSwitch = new GetTopItemSwitch();
	private static final SetTopItemSwitch setTopItemSwitch = new SetTopItemSwitch();
	private static final GetTabListSwitch getTabListSwitch = new GetTabListSwitch();
	private static final SetTabListSwitch setTabListSwitch = new SetTabListSwitch();
	private static final GetTopCenterSwitch getTopCenterSwitch = new GetTopCenterSwitch();
	private static final SetTopCenterSwitch setTopCenterSwitch = new SetTopCenterSwitch();
	private static final GetExpandHorizontalSwitch getExpandHorizontalSwitch = new GetExpandHorizontalSwitch();
	private static final SetExpandHorizontalSwitch setExpandHorizontalSwitch = new SetExpandHorizontalSwitch();
	private static final GetTabStopsSwitch getTabStopsSwitch = new GetTabStopsSwitch();
	private static final SetTabStopsSwitch setTabStopsSwitch = new SetTabStopsSwitch();
	private static final GetMinutesSwitch getMinutesSwitch = new GetMinutesSwitch();
	private static final SetMinutesSwitch setMinutesSwitch = new SetMinutesSwitch();
	private static final GetExpandVerticalSwitch getExpandVerticalSwitch = new GetExpandVerticalSwitch();
	private static final SetExpandVerticalSwitch setExpandVerticalSwitch = new SetExpandVerticalSwitch();
	private static final GetHotImageSwitch getHotImageSwitch = new GetHotImageSwitch();
	private static final SetHotImageSwitch setHotImageSwitch = new SetHotImageSwitch();
	private static final GetMinimumCharactersSwitch getMinimumCharactersSwitch = new GetMinimumCharactersSwitch();
	private static final SetMinimumCharactersSwitch setMinimumCharactersSwitch = new SetMinimumCharactersSwitch();
	@SuppressWarnings("unchecked")
	public static <T> T getProperty(Widget widget, String propertyName){
		if (propertyName.equalsIgnoreCase("Maximized")){
			return (T) getMaximizedSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Visible")){
			return (T) getVisibleSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("HorizontalPixel")){
			return (T) getHorizontalPixelSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Moveable")){
			return (T) getMoveableSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("HorizontalIndex")){
			return (T) getHorizontalIndexSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Origin")){
			return (T) getOriginSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Images")){
			return (T) getImagesSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Single")){
			return (T) getSingleSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Data")){
			return (T) getDataSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("EchoChar")){
			return (T) getEchoCharSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("HeadClient")){
			return (T) getHeadClientSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ToolTipText")){
			return (T) getToolTipTextSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("MenuBar")){
			return (T) getMenuBarSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("UnselectedImageVisible")){
			return (T) getUnselectedImageVisibleSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Url")){
			return (T) getUrlSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Modified")){
			return (T) getModifiedSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ParagraphsSeparated")){
			return (T) getParagraphsSeparatedSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Increment")){
			return (T) getIncrementSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("SortDirection")){
			return (T) getSortDirectionSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Seconds")){
			return (T) getSecondsSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("FullScreen")){
			return (T) getFullScreenSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("LabelProvider")){
			return (T) getLabelProviderSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("VisibleItemCount")){
			return (T) getVisibleItemCountSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Parent")){
			return (T) getParentSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Thumb")){
			return (T) getThumbSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("WordWrap")){
			return (T) getWordWrapSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Minimized")){
			return (T) getMinimizedSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("CaretOffset")){
			return (T) getCaretOffsetSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("DecorationColor")){
			return (T) getDecorationColorSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Bounds")){
			return (T) getBoundsSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Digits")){
			return (T) getDigitsSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("IgnoreCase")){
			return (T) getIgnoreCaseSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Left")){
			return (T) getLeftSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Bottom")){
			return (T) getBottomSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Filter")){
			return (T) getFilterSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("AllowDuplicates")){
			return (T) getAllowDuplicatesSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Layout")){
			return (T) getLayoutSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("BackgroundImage")){
			return (T) getBackgroundImageSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TabPosition")){
			return (T) getTabPositionSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TitleBarBackground")){
			return (T) getTitleBarBackgroundSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TextChars")){
			return (T) getTextCharsSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("IME")){
			return (T) getIMESwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TabHeight")){
			return (T) getTabHeightSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("MaximizeVisible")){
			return (T) getMaximizeVisibleSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("DragDetect")){
			return (T) getDragDetectSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Alpha")){
			return (T) getAlphaSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("JavascriptEnabled")){
			return (T) getJavascriptEnabledSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("PreferredSize")){
			return (T) getPreferredSizeSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Background")){
			return (T) getBackgroundSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TopMargin")){
			return (T) getTopMarginSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Weights")){
			return (T) getWeightsSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("DoubleClickEnabled")){
			return (T) getDoubleClickEnabledSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("LayoutData")){
			return (T) getLayoutDataSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("StyleRanges")){
			return (T) getStyleRangesSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Control")){
			return (T) getControlSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("SashWidth")){
			return (T) getSashWidthSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Renderer")){
			return (T) getRendererSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Font")){
			return (T) getFontSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Image")){
			return (T) getImageSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("RightMinimumSize")){
			return (T) getRightMinimumSizeSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Expanded")){
			return (T) getExpandedSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Client")){
			return (T) getClientSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TitleBarForeground")){
			return (T) getTitleBarForegroundSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Rectangles")){
			return (T) getRectanglesSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Right")){
			return (T) getRightSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Items")){
			return (T) getItemsSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("DefaultItem")){
			return (T) getDefaultItemSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Orientation")){
			return (T) getOrientationSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Message")){
			return (T) getMessageSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("UnselectedCloseVisible")){
			return (T) getUnselectedCloseVisibleSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("LeftMargin")){
			return (T) getLeftMarginSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Hours")){
			return (T) getHoursSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("HoverImage")){
			return (T) getHoverImageSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("LinesVisible")){
			return (T) getLinesVisibleSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("DefaultButton")){
			return (T) getDefaultButtonSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("BottomMargin")){
			return (T) getBottomMarginSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Minimum")){
			return (T) getMinimumSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Alignment")){
			return (T) getAlignmentSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("AlwaysShowScrollBars")){
			return (T) getAlwaysShowScrollBarsSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TopLeft")){
			return (T) getTopLeftSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Indent")){
			return (T) getIndentSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ImeInputMode")){
			return (T) getImeInputModeSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TopIndex")){
			return (T) getTopIndexSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("RightWidth")){
			return (T) getRightWidthSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("LayoutDeferred")){
			return (T) getLayoutDeferredSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("SeparatorControl")){
			return (T) getSeparatorControlSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Foreground")){
			return (T) getForegroundSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("MaximizedControl")){
			return (T) getMaximizedControlSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ListVisible")){
			return (T) getListVisibleSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("HeaderVisible")){
			return (T) getHeaderVisibleSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TextClient")){
			return (T) getTextClientSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Month")){
			return (T) getMonthSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("BlockSelection")){
			return (T) getBlockSelectionSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Menu")){
			return (T) getMenuSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("MinimizeVisible")){
			return (T) getMinimizeVisibleSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("LineSpacing")){
			return (T) getLineSpacingSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ID")){
			return (T) getIDSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Href")){
			return (T) getHrefSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Resizable")){
			return (T) getResizableSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Width")){
			return (T) getWidthSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Justify")){
			return (T) getJustifySwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ToolTip")){
			return (T) getToolTipSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("HoverDecorationColor")){
			return (T) getHoverDecorationColorSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Size")){
			return (T) getSizeSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Stippled")){
			return (T) getStippledSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("SelectionBackground")){
			return (T) getSelectionBackgroundSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TextLimit")){
			return (T) getTextLimitSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Maximum")){
			return (T) getMaximumSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ItemCount")){
			return (T) getItemCountSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Height")){
			return (T) getHeightSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TopRight")){
			return (T) getTopRightSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("HyperlinkSettings")){
			return (T) getHyperlinkSettingsSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("MinWidth")){
			return (T) getMinWidthSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Transfer")){
			return (T) getTransferSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ActiveImage")){
			return (T) getActiveImageSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Editable")){
			return (T) getEditableSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("FormText")){
			return (T) getFormTextSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TouchEnabled")){
			return (T) getTouchEnabledSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("DropTargetEffect")){
			return (T) getDropTargetEffectSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Simple")){
			return (T) getSimpleSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("MarginColor")){
			return (T) getMarginColorSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TopPixel")){
			return (T) getTopPixelSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Checked")){
			return (T) getCheckedSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TitleBarBorderColor")){
			return (T) getTitleBarBorderColorSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Locked")){
			return (T) getLockedSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Caret")){
			return (T) getCaretSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("WrapIndent")){
			return (T) getWrapIndentSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("AutoHide")){
			return (T) getAutoHideSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Enabled")){
			return (T) getEnabledSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("DragSourceEffect")){
			return (T) getDragSourceEffectSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ShowFocusedControl")){
			return (T) getShowFocusedControlSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ColumnOrder")){
			return (T) getColumnOrderSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("MRUVisible")){
			return (T) getMRUVisibleSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Grayed")){
			return (T) getGrayedSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Day")){
			return (T) getDaySwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Cursor")){
			return (T) getCursorSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Year")){
			return (T) getYearSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ToolBarVerticalAlignment")){
			return (T) getToolBarVerticalAlignmentSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Region")){
			return (T) getRegionSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Accelerator")){
			return (T) getAcceleratorSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("WrapIndices")){
			return (T) getWrapIndicesSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("PageIncrement")){
			return (T) getPageIncrementSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("MatchEmptyString")){
			return (T) getMatchEmptyStringSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("CompositionOffset")){
			return (T) getCompositionOffsetSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Description")){
			return (T) getDescriptionSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ShowClose")){
			return (T) getShowCloseSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("SelectionForeground")){
			return (T) getSelectionForegroundSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("BackgroundMode")){
			return (T) getBackgroundModeSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TitleBarGradientBackground")){
			return (T) getTitleBarGradientBackgroundSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("BlockSelectionBounds")){
			return (T) getBlockSelectionBoundsSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("MinHeight")){
			return (T) getMinHeightSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("RightMargin")){
			return (T) getRightMarginSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Location")){
			return (T) getLocationSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Spacing")){
			return (T) getSpacingSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("MinimumSize")){
			return (T) getMinimumSizeSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("DescriptionControl")){
			return (T) getDescriptionControlSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Text")){
			return (T) getTextSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Tabs")){
			return (T) getTabsSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("BorderVisible")){
			return (T) getBorderVisibleSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("State")){
			return (T) getStateSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TopItem")){
			return (T) getTopItemSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TabList")){
			return (T) getTabListSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TopCenter")){
			return (T) getTopCenterSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ExpandHorizontal")){
			return (T) getExpandHorizontalSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("TabStops")){
			return (T) getTabStopsSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("Minutes")){
			return (T) getMinutesSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("ExpandVertical")){
			return (T) getExpandVerticalSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("HotImage")){
			return (T) getHotImageSwitch.getProperty(widget);
		}
		
		else if (propertyName.equalsIgnoreCase("MinimumCharacters")){
			return (T) getMinimumCharactersSwitch.getProperty(widget);
		}
			
		return null;
	}
	
	public static void setProperty(Widget widget, String propertyName, Object value){
		if (propertyName.equalsIgnoreCase("Maximized")){
			setMaximizedSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Visible")){
			setVisibleSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("HorizontalPixel")){
			setHorizontalPixelSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Moveable")){
			setMoveableSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("HorizontalIndex")){
			setHorizontalIndexSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Origin")){
			setOriginSwitch.setProperty(widget, (Point)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Images")){
			setImagesSwitch.setProperty(widget, (Image[])value);
		}
		
		else if (propertyName.equalsIgnoreCase("Single")){
			setSingleSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Data")){
			setDataSwitch.setProperty(widget, (Object)value);
		}
		
		else if (propertyName.equalsIgnoreCase("EchoChar")){
			setEchoCharSwitch.setProperty(widget, (Character)value);
		}
		
		else if (propertyName.equalsIgnoreCase("HeadClient")){
			setHeadClientSwitch.setProperty(widget, (Control)value);
		}
		
		else if (propertyName.equalsIgnoreCase("ToolTipText")){
			setToolTipTextSwitch.setProperty(widget, (String)value);
		}
		
		else if (propertyName.equalsIgnoreCase("MenuBar")){
			setMenuBarSwitch.setProperty(widget, (Menu)value);
		}
		
		else if (propertyName.equalsIgnoreCase("UnselectedImageVisible")){
			setUnselectedImageVisibleSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Url")){
			setUrlSwitch.setProperty(widget, (String)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Modified")){
			setModifiedSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("ParagraphsSeparated")){
			setParagraphsSeparatedSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Increment")){
			setIncrementSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("SortDirection")){
			setSortDirectionSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Seconds")){
			setSecondsSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("FullScreen")){
			setFullScreenSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("LabelProvider")){
			setLabelProviderSwitch.setProperty(widget, (ILabelProvider)value);
		}
		
		else if (propertyName.equalsIgnoreCase("VisibleItemCount")){
			setVisibleItemCountSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Parent")){
			setParentSwitch.setProperty(widget, (Composite)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Thumb")){
			setThumbSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("WordWrap")){
			setWordWrapSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Minimized")){
			setMinimizedSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("CaretOffset")){
			setCaretOffsetSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("DecorationColor")){
			setDecorationColorSwitch.setProperty(widget, (Color)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Bounds")){
			setBoundsSwitch.setProperty(widget, (Rectangle)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Digits")){
			setDigitsSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("IgnoreCase")){
			setIgnoreCaseSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Left")){
			setLeftSwitch.setProperty(widget, (Control)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Bottom")){
			setBottomSwitch.setProperty(widget, (Control)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Filter")){
			setFilterSwitch.setProperty(widget, (String)value);
		}
		
		else if (propertyName.equalsIgnoreCase("AllowDuplicates")){
			setAllowDuplicatesSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Layout")){
			setLayoutSwitch.setProperty(widget, (Layout)value);
		}
		
		else if (propertyName.equalsIgnoreCase("BackgroundImage")){
			setBackgroundImageSwitch.setProperty(widget, (Image)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TabPosition")){
			setTabPositionSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TitleBarBackground")){
			setTitleBarBackgroundSwitch.setProperty(widget, (Color)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TextChars")){
			setTextCharsSwitch.setProperty(widget, (char[])value);
		}
		
		else if (propertyName.equalsIgnoreCase("IME")){
			setIMESwitch.setProperty(widget, (IME)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TabHeight")){
			setTabHeightSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("MaximizeVisible")){
			setMaximizeVisibleSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("DragDetect")){
			setDragDetectSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Alpha")){
			setAlphaSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("JavascriptEnabled")){
			setJavascriptEnabledSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("PreferredSize")){
			setPreferredSizeSwitch.setProperty(widget, (Point)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Background")){
			setBackgroundSwitch.setProperty(widget, (Color)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TopMargin")){
			setTopMarginSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Weights")){
			setWeightsSwitch.setProperty(widget, (int[])value);
		}
		
		else if (propertyName.equalsIgnoreCase("DoubleClickEnabled")){
			setDoubleClickEnabledSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("LayoutData")){
			setLayoutDataSwitch.setProperty(widget, (Object)value);
		}
		
		else if (propertyName.equalsIgnoreCase("StyleRanges")){
			setStyleRangesSwitch.setProperty(widget, (StyleRange[])value);
		}
		
		else if (propertyName.equalsIgnoreCase("Control")){
			setControlSwitch.setProperty(widget, (Control)value);
		}
		
		else if (propertyName.equalsIgnoreCase("SashWidth")){
			setSashWidthSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Renderer")){
			setRendererSwitch.setProperty(widget, (CTabFolderRenderer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Font")){
			setFontSwitch.setProperty(widget, (Font)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Image")){
			setImageSwitch.setProperty(widget, (Image)value);
		}
		
		else if (propertyName.equalsIgnoreCase("RightMinimumSize")){
			setRightMinimumSizeSwitch.setProperty(widget, (Point)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Expanded")){
			setExpandedSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Client")){
			setClientSwitch.setProperty(widget, (Control)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TitleBarForeground")){
			setTitleBarForegroundSwitch.setProperty(widget, (Color)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Rectangles")){
			setRectanglesSwitch.setProperty(widget, (Rectangle[])value);
		}
		
		else if (propertyName.equalsIgnoreCase("Right")){
			setRightSwitch.setProperty(widget, (Control)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Items")){
			setItemsSwitch.setProperty(widget, (String[])value);
		}
		
		else if (propertyName.equalsIgnoreCase("DefaultItem")){
			setDefaultItemSwitch.setProperty(widget, (MenuItem)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Orientation")){
			setOrientationSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Message")){
			setMessageSwitch.setProperty(widget, (String)value);
		}
		
		else if (propertyName.equalsIgnoreCase("UnselectedCloseVisible")){
			setUnselectedCloseVisibleSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("LeftMargin")){
			setLeftMarginSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Hours")){
			setHoursSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("HoverImage")){
			setHoverImageSwitch.setProperty(widget, (Image)value);
		}
		
		else if (propertyName.equalsIgnoreCase("LinesVisible")){
			setLinesVisibleSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("DefaultButton")){
			setDefaultButtonSwitch.setProperty(widget, (Button)value);
		}
		
		else if (propertyName.equalsIgnoreCase("BottomMargin")){
			setBottomMarginSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Minimum")){
			setMinimumSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Alignment")){
			setAlignmentSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("AlwaysShowScrollBars")){
			setAlwaysShowScrollBarsSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TopLeft")){
			setTopLeftSwitch.setProperty(widget, (Control)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Indent")){
			setIndentSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("ImeInputMode")){
			setImeInputModeSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TopIndex")){
			setTopIndexSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("RightWidth")){
			setRightWidthSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("LayoutDeferred")){
			setLayoutDeferredSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("SeparatorControl")){
			setSeparatorControlSwitch.setProperty(widget, (Control)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Foreground")){
			setForegroundSwitch.setProperty(widget, (Color)value);
		}
		
		else if (propertyName.equalsIgnoreCase("MaximizedControl")){
			setMaximizedControlSwitch.setProperty(widget, (Control)value);
		}
		
		else if (propertyName.equalsIgnoreCase("ListVisible")){
			setListVisibleSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("HeaderVisible")){
			setHeaderVisibleSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TextClient")){
			setTextClientSwitch.setProperty(widget, (Control)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Month")){
			setMonthSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("BlockSelection")){
			setBlockSelectionSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Menu")){
			setMenuSwitch.setProperty(widget, (Menu)value);
		}
		
		else if (propertyName.equalsIgnoreCase("MinimizeVisible")){
			setMinimizeVisibleSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("LineSpacing")){
			setLineSpacingSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("ID")){
			setIDSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Href")){
			setHrefSwitch.setProperty(widget, (Object)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Resizable")){
			setResizableSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Width")){
			setWidthSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Justify")){
			setJustifySwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("ToolTip")){
			setToolTipSwitch.setProperty(widget, (ToolTip)value);
		}
		
		else if (propertyName.equalsIgnoreCase("HoverDecorationColor")){
			setHoverDecorationColorSwitch.setProperty(widget, (Color)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Size")){
			setSizeSwitch.setProperty(widget, (Point)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Stippled")){
			setStippledSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("SelectionBackground")){
			setSelectionBackgroundSwitch.setProperty(widget, (Color)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TextLimit")){
			setTextLimitSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Maximum")){
			setMaximumSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("ItemCount")){
			setItemCountSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Height")){
			setHeightSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TopRight")){
			setTopRightSwitch.setProperty(widget, (Control)value);
		}
		
		else if (propertyName.equalsIgnoreCase("HyperlinkSettings")){
			setHyperlinkSettingsSwitch.setProperty(widget, (HyperlinkSettings)value);
		}
		
		else if (propertyName.equalsIgnoreCase("MinWidth")){
			setMinWidthSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Transfer")){
			setTransferSwitch.setProperty(widget, (Transfer[])value);
		}
		
		else if (propertyName.equalsIgnoreCase("ActiveImage")){
			setActiveImageSwitch.setProperty(widget, (Image)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Editable")){
			setEditableSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("FormText")){
			setFormTextSwitch.setProperty(widget, (FormText)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TouchEnabled")){
			setTouchEnabledSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("DropTargetEffect")){
			setDropTargetEffectSwitch.setProperty(widget, (DropTargetEffect)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Simple")){
			setSimpleSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("MarginColor")){
			setMarginColorSwitch.setProperty(widget, (Color)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TopPixel")){
			setTopPixelSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Checked")){
			setCheckedSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TitleBarBorderColor")){
			setTitleBarBorderColorSwitch.setProperty(widget, (Color)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Locked")){
			setLockedSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Caret")){
			setCaretSwitch.setProperty(widget, (Caret)value);
		}
		
		else if (propertyName.equalsIgnoreCase("WrapIndent")){
			setWrapIndentSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("AutoHide")){
			setAutoHideSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Enabled")){
			setEnabledSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("DragSourceEffect")){
			setDragSourceEffectSwitch.setProperty(widget, (DragSourceEffect)value);
		}
		
		else if (propertyName.equalsIgnoreCase("ShowFocusedControl")){
			setShowFocusedControlSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("ColumnOrder")){
			setColumnOrderSwitch.setProperty(widget, (int[])value);
		}
		
		else if (propertyName.equalsIgnoreCase("MRUVisible")){
			setMRUVisibleSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Grayed")){
			setGrayedSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Day")){
			setDaySwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Cursor")){
			setCursorSwitch.setProperty(widget, (Cursor)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Year")){
			setYearSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("ToolBarVerticalAlignment")){
			setToolBarVerticalAlignmentSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Region")){
			setRegionSwitch.setProperty(widget, (Region)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Accelerator")){
			setAcceleratorSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("WrapIndices")){
			setWrapIndicesSwitch.setProperty(widget, (int[])value);
		}
		
		else if (propertyName.equalsIgnoreCase("PageIncrement")){
			setPageIncrementSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("MatchEmptyString")){
			setMatchEmptyStringSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("CompositionOffset")){
			setCompositionOffsetSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Description")){
			setDescriptionSwitch.setProperty(widget, (String)value);
		}
		
		else if (propertyName.equalsIgnoreCase("ShowClose")){
			setShowCloseSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("SelectionForeground")){
			setSelectionForegroundSwitch.setProperty(widget, (Color)value);
		}
		
		else if (propertyName.equalsIgnoreCase("BackgroundMode")){
			setBackgroundModeSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TitleBarGradientBackground")){
			setTitleBarGradientBackgroundSwitch.setProperty(widget, (Color)value);
		}
		
		else if (propertyName.equalsIgnoreCase("BlockSelectionBounds")){
			setBlockSelectionBoundsSwitch.setProperty(widget, (Rectangle)value);
		}
		
		else if (propertyName.equalsIgnoreCase("MinHeight")){
			setMinHeightSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("RightMargin")){
			setRightMarginSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Location")){
			setLocationSwitch.setProperty(widget, (Point)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Spacing")){
			setSpacingSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("MinimumSize")){
			setMinimumSizeSwitch.setProperty(widget, (Point)value);
		}
		
		else if (propertyName.equalsIgnoreCase("DescriptionControl")){
			setDescriptionControlSwitch.setProperty(widget, (Control)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Text")){
			setTextSwitch.setProperty(widget, (String)value);
		}
		
		else if (propertyName.equalsIgnoreCase("Tabs")){
			setTabsSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("BorderVisible")){
			setBorderVisibleSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("State")){
			setStateSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TopItem")){
			setTopItemSwitch.setProperty(widget, (TreeItem)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TabList")){
			setTabListSwitch.setProperty(widget, (Control[])value);
		}
		
		else if (propertyName.equalsIgnoreCase("TopCenter")){
			setTopCenterSwitch.setProperty(widget, (Control)value);
		}
		
		else if (propertyName.equalsIgnoreCase("ExpandHorizontal")){
			setExpandHorizontalSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("TabStops")){
			setTabStopsSwitch.setProperty(widget, (int[])value);
		}
		
		else if (propertyName.equalsIgnoreCase("Minutes")){
			setMinutesSwitch.setProperty(widget, (Integer)value);
		}
		
		else if (propertyName.equalsIgnoreCase("ExpandVertical")){
			setExpandVerticalSwitch.setProperty(widget, (Boolean)value);
		}
		
		else if (propertyName.equalsIgnoreCase("HotImage")){
			setHotImageSwitch.setProperty(widget, (Image)value);
		}
		
		else if (propertyName.equalsIgnoreCase("MinimumCharacters")){
			setMinimumCharactersSwitch.setProperty(widget, (Integer)value);
		}
			
	}
	public static Boolean getMaximized(Widget widget){
		return getMaximizedSwitch.getProperty(widget);
	}
	public static void setMaximized(Widget widget, Boolean value){
		setMaximizedSwitch.setProperty(widget, value);
	}
	public static Boolean getVisible(Widget widget){
		return getVisibleSwitch.getProperty(widget);
	}
	public static void setVisible(Widget widget, Boolean value){
		setVisibleSwitch.setProperty(widget, value);
	}
	public static Integer getHorizontalPixel(Widget widget){
		return getHorizontalPixelSwitch.getProperty(widget);
	}
	public static void setHorizontalPixel(Widget widget, Integer value){
		setHorizontalPixelSwitch.setProperty(widget, value);
	}
	public static Boolean getMoveable(Widget widget){
		return getMoveableSwitch.getProperty(widget);
	}
	public static void setMoveable(Widget widget, Boolean value){
		setMoveableSwitch.setProperty(widget, value);
	}
	public static Integer getHorizontalIndex(Widget widget){
		return getHorizontalIndexSwitch.getProperty(widget);
	}
	public static void setHorizontalIndex(Widget widget, Integer value){
		setHorizontalIndexSwitch.setProperty(widget, value);
	}
	public static Point getOrigin(Widget widget){
		return getOriginSwitch.getProperty(widget);
	}
	public static void setOrigin(Widget widget, Point value){
		setOriginSwitch.setProperty(widget, value);
	}
	public static Image[] getImages(Widget widget){
		return getImagesSwitch.getProperty(widget);
	}
	public static void setImages(Widget widget, Image[] value){
		setImagesSwitch.setProperty(widget, value);
	}
	public static Boolean getSingle(Widget widget){
		return getSingleSwitch.getProperty(widget);
	}
	public static void setSingle(Widget widget, Boolean value){
		setSingleSwitch.setProperty(widget, value);
	}
	public static Object getData(Widget widget){
		return getDataSwitch.getProperty(widget);
	}
	public static void setData(Widget widget, Object value){
		setDataSwitch.setProperty(widget, value);
	}
	public static Character getEchoChar(Widget widget){
		return getEchoCharSwitch.getProperty(widget);
	}
	public static void setEchoChar(Widget widget, Character value){
		setEchoCharSwitch.setProperty(widget, value);
	}
	public static Control getHeadClient(Widget widget){
		return getHeadClientSwitch.getProperty(widget);
	}
	public static void setHeadClient(Widget widget, Control value){
		setHeadClientSwitch.setProperty(widget, value);
	}
	public static String getToolTipText(Widget widget){
		return getToolTipTextSwitch.getProperty(widget);
	}
	public static void setToolTipText(Widget widget, String value){
		setToolTipTextSwitch.setProperty(widget, value);
	}
	public static Menu getMenuBar(Widget widget){
		return getMenuBarSwitch.getProperty(widget);
	}
	public static void setMenuBar(Widget widget, Menu value){
		setMenuBarSwitch.setProperty(widget, value);
	}
	public static Boolean getUnselectedImageVisible(Widget widget){
		return getUnselectedImageVisibleSwitch.getProperty(widget);
	}
	public static void setUnselectedImageVisible(Widget widget, Boolean value){
		setUnselectedImageVisibleSwitch.setProperty(widget, value);
	}
	public static String getUrl(Widget widget){
		return getUrlSwitch.getProperty(widget);
	}
	public static void setUrl(Widget widget, String value){
		setUrlSwitch.setProperty(widget, value);
	}
	public static Boolean getModified(Widget widget){
		return getModifiedSwitch.getProperty(widget);
	}
	public static void setModified(Widget widget, Boolean value){
		setModifiedSwitch.setProperty(widget, value);
	}
	public static Boolean getParagraphsSeparated(Widget widget){
		return getParagraphsSeparatedSwitch.getProperty(widget);
	}
	public static void setParagraphsSeparated(Widget widget, Boolean value){
		setParagraphsSeparatedSwitch.setProperty(widget, value);
	}
	public static Integer getIncrement(Widget widget){
		return getIncrementSwitch.getProperty(widget);
	}
	public static void setIncrement(Widget widget, Integer value){
		setIncrementSwitch.setProperty(widget, value);
	}
	public static Integer getSortDirection(Widget widget){
		return getSortDirectionSwitch.getProperty(widget);
	}
	public static void setSortDirection(Widget widget, Integer value){
		setSortDirectionSwitch.setProperty(widget, value);
	}
	public static Integer getSeconds(Widget widget){
		return getSecondsSwitch.getProperty(widget);
	}
	public static void setSeconds(Widget widget, Integer value){
		setSecondsSwitch.setProperty(widget, value);
	}
	public static Boolean getFullScreen(Widget widget){
		return getFullScreenSwitch.getProperty(widget);
	}
	public static void setFullScreen(Widget widget, Boolean value){
		setFullScreenSwitch.setProperty(widget, value);
	}
	public static ILabelProvider getLabelProvider(Widget widget){
		return getLabelProviderSwitch.getProperty(widget);
	}
	public static void setLabelProvider(Widget widget, ILabelProvider value){
		setLabelProviderSwitch.setProperty(widget, value);
	}
	public static Integer getVisibleItemCount(Widget widget){
		return getVisibleItemCountSwitch.getProperty(widget);
	}
	public static void setVisibleItemCount(Widget widget, Integer value){
		setVisibleItemCountSwitch.setProperty(widget, value);
	}
	public static Composite getParent(Widget widget){
		return getParentSwitch.getProperty(widget);
	}
	public static void setParent(Widget widget, Composite value){
		setParentSwitch.setProperty(widget, value);
	}
	public static Integer getThumb(Widget widget){
		return getThumbSwitch.getProperty(widget);
	}
	public static void setThumb(Widget widget, Integer value){
		setThumbSwitch.setProperty(widget, value);
	}
	public static Boolean getWordWrap(Widget widget){
		return getWordWrapSwitch.getProperty(widget);
	}
	public static void setWordWrap(Widget widget, Boolean value){
		setWordWrapSwitch.setProperty(widget, value);
	}
	public static Boolean getMinimized(Widget widget){
		return getMinimizedSwitch.getProperty(widget);
	}
	public static void setMinimized(Widget widget, Boolean value){
		setMinimizedSwitch.setProperty(widget, value);
	}
	public static Integer getCaretOffset(Widget widget){
		return getCaretOffsetSwitch.getProperty(widget);
	}
	public static void setCaretOffset(Widget widget, Integer value){
		setCaretOffsetSwitch.setProperty(widget, value);
	}
	public static Color getDecorationColor(Widget widget){
		return getDecorationColorSwitch.getProperty(widget);
	}
	public static void setDecorationColor(Widget widget, Color value){
		setDecorationColorSwitch.setProperty(widget, value);
	}
	public static Rectangle getBounds(Widget widget){
		return getBoundsSwitch.getProperty(widget);
	}
	public static void setBounds(Widget widget, Rectangle value){
		setBoundsSwitch.setProperty(widget, value);
	}
	public static Integer getDigits(Widget widget){
		return getDigitsSwitch.getProperty(widget);
	}
	public static void setDigits(Widget widget, Integer value){
		setDigitsSwitch.setProperty(widget, value);
	}
	public static Boolean getIgnoreCase(Widget widget){
		return getIgnoreCaseSwitch.getProperty(widget);
	}
	public static void setIgnoreCase(Widget widget, Boolean value){
		setIgnoreCaseSwitch.setProperty(widget, value);
	}
	public static Control getLeft(Widget widget){
		return getLeftSwitch.getProperty(widget);
	}
	public static void setLeft(Widget widget, Control value){
		setLeftSwitch.setProperty(widget, value);
	}
	public static Control getBottom(Widget widget){
		return getBottomSwitch.getProperty(widget);
	}
	public static void setBottom(Widget widget, Control value){
		setBottomSwitch.setProperty(widget, value);
	}
	public static String getFilter(Widget widget){
		return getFilterSwitch.getProperty(widget);
	}
	public static void setFilter(Widget widget, String value){
		setFilterSwitch.setProperty(widget, value);
	}
	public static Boolean getAllowDuplicates(Widget widget){
		return getAllowDuplicatesSwitch.getProperty(widget);
	}
	public static void setAllowDuplicates(Widget widget, Boolean value){
		setAllowDuplicatesSwitch.setProperty(widget, value);
	}
	public static Layout getLayout(Widget widget){
		return getLayoutSwitch.getProperty(widget);
	}
	public static void setLayout(Widget widget, Layout value){
		setLayoutSwitch.setProperty(widget, value);
	}
	public static Image getBackgroundImage(Widget widget){
		return getBackgroundImageSwitch.getProperty(widget);
	}
	public static void setBackgroundImage(Widget widget, Image value){
		setBackgroundImageSwitch.setProperty(widget, value);
	}
	public static Integer getTabPosition(Widget widget){
		return getTabPositionSwitch.getProperty(widget);
	}
	public static void setTabPosition(Widget widget, Integer value){
		setTabPositionSwitch.setProperty(widget, value);
	}
	public static Color getTitleBarBackground(Widget widget){
		return getTitleBarBackgroundSwitch.getProperty(widget);
	}
	public static void setTitleBarBackground(Widget widget, Color value){
		setTitleBarBackgroundSwitch.setProperty(widget, value);
	}
	public static char[] getTextChars(Widget widget){
		return getTextCharsSwitch.getProperty(widget);
	}
	public static void setTextChars(Widget widget, char[] value){
		setTextCharsSwitch.setProperty(widget, value);
	}
	public static IME getIME(Widget widget){
		return getIMESwitch.getProperty(widget);
	}
	public static void setIME(Widget widget, IME value){
		setIMESwitch.setProperty(widget, value);
	}
	public static Integer getTabHeight(Widget widget){
		return getTabHeightSwitch.getProperty(widget);
	}
	public static void setTabHeight(Widget widget, Integer value){
		setTabHeightSwitch.setProperty(widget, value);
	}
	public static Boolean getMaximizeVisible(Widget widget){
		return getMaximizeVisibleSwitch.getProperty(widget);
	}
	public static void setMaximizeVisible(Widget widget, Boolean value){
		setMaximizeVisibleSwitch.setProperty(widget, value);
	}
	public static Boolean getDragDetect(Widget widget){
		return getDragDetectSwitch.getProperty(widget);
	}
	public static void setDragDetect(Widget widget, Boolean value){
		setDragDetectSwitch.setProperty(widget, value);
	}
	public static Integer getAlpha(Widget widget){
		return getAlphaSwitch.getProperty(widget);
	}
	public static void setAlpha(Widget widget, Integer value){
		setAlphaSwitch.setProperty(widget, value);
	}
	public static Boolean getJavascriptEnabled(Widget widget){
		return getJavascriptEnabledSwitch.getProperty(widget);
	}
	public static void setJavascriptEnabled(Widget widget, Boolean value){
		setJavascriptEnabledSwitch.setProperty(widget, value);
	}
	public static Point getPreferredSize(Widget widget){
		return getPreferredSizeSwitch.getProperty(widget);
	}
	public static void setPreferredSize(Widget widget, Point value){
		setPreferredSizeSwitch.setProperty(widget, value);
	}
	public static Color getBackground(Widget widget){
		return getBackgroundSwitch.getProperty(widget);
	}
	public static void setBackground(Widget widget, Color value){
		setBackgroundSwitch.setProperty(widget, value);
	}
	public static Integer getTopMargin(Widget widget){
		return getTopMarginSwitch.getProperty(widget);
	}
	public static void setTopMargin(Widget widget, Integer value){
		setTopMarginSwitch.setProperty(widget, value);
	}
	public static int[] getWeights(Widget widget){
		return getWeightsSwitch.getProperty(widget);
	}
	public static void setWeights(Widget widget, int[] value){
		setWeightsSwitch.setProperty(widget, value);
	}
	public static Boolean getDoubleClickEnabled(Widget widget){
		return getDoubleClickEnabledSwitch.getProperty(widget);
	}
	public static void setDoubleClickEnabled(Widget widget, Boolean value){
		setDoubleClickEnabledSwitch.setProperty(widget, value);
	}
	public static Object getLayoutData(Widget widget){
		return getLayoutDataSwitch.getProperty(widget);
	}
	public static void setLayoutData(Widget widget, Object value){
		setLayoutDataSwitch.setProperty(widget, value);
	}
	public static StyleRange[] getStyleRanges(Widget widget){
		return getStyleRangesSwitch.getProperty(widget);
	}
	public static void setStyleRanges(Widget widget, StyleRange[] value){
		setStyleRangesSwitch.setProperty(widget, value);
	}
	public static Control getControl(Widget widget){
		return getControlSwitch.getProperty(widget);
	}
	public static void setControl(Widget widget, Control value){
		setControlSwitch.setProperty(widget, value);
	}
	public static Integer getSashWidth(Widget widget){
		return getSashWidthSwitch.getProperty(widget);
	}
	public static void setSashWidth(Widget widget, Integer value){
		setSashWidthSwitch.setProperty(widget, value);
	}
	public static CTabFolderRenderer getRenderer(Widget widget){
		return getRendererSwitch.getProperty(widget);
	}
	public static void setRenderer(Widget widget, CTabFolderRenderer value){
		setRendererSwitch.setProperty(widget, value);
	}
	public static Font getFont(Widget widget){
		return getFontSwitch.getProperty(widget);
	}
	public static void setFont(Widget widget, Font value){
		setFontSwitch.setProperty(widget, value);
	}
	public static Image getImage(Widget widget){
		return getImageSwitch.getProperty(widget);
	}
	public static void setImage(Widget widget, Image value){
		setImageSwitch.setProperty(widget, value);
	}
	public static Point getRightMinimumSize(Widget widget){
		return getRightMinimumSizeSwitch.getProperty(widget);
	}
	public static void setRightMinimumSize(Widget widget, Point value){
		setRightMinimumSizeSwitch.setProperty(widget, value);
	}
	public static Boolean getExpanded(Widget widget){
		return getExpandedSwitch.getProperty(widget);
	}
	public static void setExpanded(Widget widget, Boolean value){
		setExpandedSwitch.setProperty(widget, value);
	}
	public static Control getClient(Widget widget){
		return getClientSwitch.getProperty(widget);
	}
	public static void setClient(Widget widget, Control value){
		setClientSwitch.setProperty(widget, value);
	}
	public static Color getTitleBarForeground(Widget widget){
		return getTitleBarForegroundSwitch.getProperty(widget);
	}
	public static void setTitleBarForeground(Widget widget, Color value){
		setTitleBarForegroundSwitch.setProperty(widget, value);
	}
	public static Rectangle[] getRectangles(Widget widget){
		return getRectanglesSwitch.getProperty(widget);
	}
	public static void setRectangles(Widget widget, Rectangle[] value){
		setRectanglesSwitch.setProperty(widget, value);
	}
	public static Control getRight(Widget widget){
		return getRightSwitch.getProperty(widget);
	}
	public static void setRight(Widget widget, Control value){
		setRightSwitch.setProperty(widget, value);
	}
	public static String[] getItems(Widget widget){
		return getItemsSwitch.getProperty(widget);
	}
	public static void setItems(Widget widget, String[] value){
		setItemsSwitch.setProperty(widget, value);
	}
	public static MenuItem getDefaultItem(Widget widget){
		return getDefaultItemSwitch.getProperty(widget);
	}
	public static void setDefaultItem(Widget widget, MenuItem value){
		setDefaultItemSwitch.setProperty(widget, value);
	}
	public static Integer getOrientation(Widget widget){
		return getOrientationSwitch.getProperty(widget);
	}
	public static void setOrientation(Widget widget, Integer value){
		setOrientationSwitch.setProperty(widget, value);
	}
	public static String getMessage(Widget widget){
		return getMessageSwitch.getProperty(widget);
	}
	public static void setMessage(Widget widget, String value){
		setMessageSwitch.setProperty(widget, value);
	}
	public static Boolean getUnselectedCloseVisible(Widget widget){
		return getUnselectedCloseVisibleSwitch.getProperty(widget);
	}
	public static void setUnselectedCloseVisible(Widget widget, Boolean value){
		setUnselectedCloseVisibleSwitch.setProperty(widget, value);
	}
	public static Integer getLeftMargin(Widget widget){
		return getLeftMarginSwitch.getProperty(widget);
	}
	public static void setLeftMargin(Widget widget, Integer value){
		setLeftMarginSwitch.setProperty(widget, value);
	}
	public static Integer getHours(Widget widget){
		return getHoursSwitch.getProperty(widget);
	}
	public static void setHours(Widget widget, Integer value){
		setHoursSwitch.setProperty(widget, value);
	}
	public static Image getHoverImage(Widget widget){
		return getHoverImageSwitch.getProperty(widget);
	}
	public static void setHoverImage(Widget widget, Image value){
		setHoverImageSwitch.setProperty(widget, value);
	}
	public static Boolean getLinesVisible(Widget widget){
		return getLinesVisibleSwitch.getProperty(widget);
	}
	public static void setLinesVisible(Widget widget, Boolean value){
		setLinesVisibleSwitch.setProperty(widget, value);
	}
	public static Button getDefaultButton(Widget widget){
		return getDefaultButtonSwitch.getProperty(widget);
	}
	public static void setDefaultButton(Widget widget, Button value){
		setDefaultButtonSwitch.setProperty(widget, value);
	}
	public static Integer getBottomMargin(Widget widget){
		return getBottomMarginSwitch.getProperty(widget);
	}
	public static void setBottomMargin(Widget widget, Integer value){
		setBottomMarginSwitch.setProperty(widget, value);
	}
	public static Integer getMinimum(Widget widget){
		return getMinimumSwitch.getProperty(widget);
	}
	public static void setMinimum(Widget widget, Integer value){
		setMinimumSwitch.setProperty(widget, value);
	}
	public static Integer getAlignment(Widget widget){
		return getAlignmentSwitch.getProperty(widget);
	}
	public static void setAlignment(Widget widget, Integer value){
		setAlignmentSwitch.setProperty(widget, value);
	}
	public static Boolean getAlwaysShowScrollBars(Widget widget){
		return getAlwaysShowScrollBarsSwitch.getProperty(widget);
	}
	public static void setAlwaysShowScrollBars(Widget widget, Boolean value){
		setAlwaysShowScrollBarsSwitch.setProperty(widget, value);
	}
	public static Control getTopLeft(Widget widget){
		return getTopLeftSwitch.getProperty(widget);
	}
	public static void setTopLeft(Widget widget, Control value){
		setTopLeftSwitch.setProperty(widget, value);
	}
	public static Integer getIndent(Widget widget){
		return getIndentSwitch.getProperty(widget);
	}
	public static void setIndent(Widget widget, Integer value){
		setIndentSwitch.setProperty(widget, value);
	}
	public static Integer getImeInputMode(Widget widget){
		return getImeInputModeSwitch.getProperty(widget);
	}
	public static void setImeInputMode(Widget widget, Integer value){
		setImeInputModeSwitch.setProperty(widget, value);
	}
	public static Integer getTopIndex(Widget widget){
		return getTopIndexSwitch.getProperty(widget);
	}
	public static void setTopIndex(Widget widget, Integer value){
		setTopIndexSwitch.setProperty(widget, value);
	}
	public static Integer getRightWidth(Widget widget){
		return getRightWidthSwitch.getProperty(widget);
	}
	public static void setRightWidth(Widget widget, Integer value){
		setRightWidthSwitch.setProperty(widget, value);
	}
	public static Boolean getLayoutDeferred(Widget widget){
		return getLayoutDeferredSwitch.getProperty(widget);
	}
	public static void setLayoutDeferred(Widget widget, Boolean value){
		setLayoutDeferredSwitch.setProperty(widget, value);
	}
	public static Control getSeparatorControl(Widget widget){
		return getSeparatorControlSwitch.getProperty(widget);
	}
	public static void setSeparatorControl(Widget widget, Control value){
		setSeparatorControlSwitch.setProperty(widget, value);
	}
	public static Color getForeground(Widget widget){
		return getForegroundSwitch.getProperty(widget);
	}
	public static void setForeground(Widget widget, Color value){
		setForegroundSwitch.setProperty(widget, value);
	}
	public static Control getMaximizedControl(Widget widget){
		return getMaximizedControlSwitch.getProperty(widget);
	}
	public static void setMaximizedControl(Widget widget, Control value){
		setMaximizedControlSwitch.setProperty(widget, value);
	}
	public static Boolean getListVisible(Widget widget){
		return getListVisibleSwitch.getProperty(widget);
	}
	public static void setListVisible(Widget widget, Boolean value){
		setListVisibleSwitch.setProperty(widget, value);
	}
	public static Boolean getHeaderVisible(Widget widget){
		return getHeaderVisibleSwitch.getProperty(widget);
	}
	public static void setHeaderVisible(Widget widget, Boolean value){
		setHeaderVisibleSwitch.setProperty(widget, value);
	}
	public static Control getTextClient(Widget widget){
		return getTextClientSwitch.getProperty(widget);
	}
	public static void setTextClient(Widget widget, Control value){
		setTextClientSwitch.setProperty(widget, value);
	}
	public static Integer getMonth(Widget widget){
		return getMonthSwitch.getProperty(widget);
	}
	public static void setMonth(Widget widget, Integer value){
		setMonthSwitch.setProperty(widget, value);
	}
	public static Boolean getBlockSelection(Widget widget){
		return getBlockSelectionSwitch.getProperty(widget);
	}
	public static void setBlockSelection(Widget widget, Boolean value){
		setBlockSelectionSwitch.setProperty(widget, value);
	}
	public static Menu getMenu(Widget widget){
		return getMenuSwitch.getProperty(widget);
	}
	public static void setMenu(Widget widget, Menu value){
		setMenuSwitch.setProperty(widget, value);
	}
	public static Boolean getMinimizeVisible(Widget widget){
		return getMinimizeVisibleSwitch.getProperty(widget);
	}
	public static void setMinimizeVisible(Widget widget, Boolean value){
		setMinimizeVisibleSwitch.setProperty(widget, value);
	}
	public static Integer getLineSpacing(Widget widget){
		return getLineSpacingSwitch.getProperty(widget);
	}
	public static void setLineSpacing(Widget widget, Integer value){
		setLineSpacingSwitch.setProperty(widget, value);
	}
	public static Integer getID(Widget widget){
		return getIDSwitch.getProperty(widget);
	}
	public static void setID(Widget widget, Integer value){
		setIDSwitch.setProperty(widget, value);
	}
	public static Object getHref(Widget widget){
		return getHrefSwitch.getProperty(widget);
	}
	public static void setHref(Widget widget, Object value){
		setHrefSwitch.setProperty(widget, value);
	}
	public static Boolean getResizable(Widget widget){
		return getResizableSwitch.getProperty(widget);
	}
	public static void setResizable(Widget widget, Boolean value){
		setResizableSwitch.setProperty(widget, value);
	}
	public static Integer getWidth(Widget widget){
		return getWidthSwitch.getProperty(widget);
	}
	public static void setWidth(Widget widget, Integer value){
		setWidthSwitch.setProperty(widget, value);
	}
	public static Boolean getJustify(Widget widget){
		return getJustifySwitch.getProperty(widget);
	}
	public static void setJustify(Widget widget, Boolean value){
		setJustifySwitch.setProperty(widget, value);
	}
	public static ToolTip getToolTip(Widget widget){
		return getToolTipSwitch.getProperty(widget);
	}
	public static void setToolTip(Widget widget, ToolTip value){
		setToolTipSwitch.setProperty(widget, value);
	}
	public static Color getHoverDecorationColor(Widget widget){
		return getHoverDecorationColorSwitch.getProperty(widget);
	}
	public static void setHoverDecorationColor(Widget widget, Color value){
		setHoverDecorationColorSwitch.setProperty(widget, value);
	}
	public static Point getSize(Widget widget){
		return getSizeSwitch.getProperty(widget);
	}
	public static void setSize(Widget widget, Point value){
		setSizeSwitch.setProperty(widget, value);
	}
	public static Boolean getStippled(Widget widget){
		return getStippledSwitch.getProperty(widget);
	}
	public static void setStippled(Widget widget, Boolean value){
		setStippledSwitch.setProperty(widget, value);
	}
	public static Color getSelectionBackground(Widget widget){
		return getSelectionBackgroundSwitch.getProperty(widget);
	}
	public static void setSelectionBackground(Widget widget, Color value){
		setSelectionBackgroundSwitch.setProperty(widget, value);
	}
	public static Integer getTextLimit(Widget widget){
		return getTextLimitSwitch.getProperty(widget);
	}
	public static void setTextLimit(Widget widget, Integer value){
		setTextLimitSwitch.setProperty(widget, value);
	}
	public static Integer getMaximum(Widget widget){
		return getMaximumSwitch.getProperty(widget);
	}
	public static void setMaximum(Widget widget, Integer value){
		setMaximumSwitch.setProperty(widget, value);
	}
	public static Integer getItemCount(Widget widget){
		return getItemCountSwitch.getProperty(widget);
	}
	public static void setItemCount(Widget widget, Integer value){
		setItemCountSwitch.setProperty(widget, value);
	}
	public static Integer getHeight(Widget widget){
		return getHeightSwitch.getProperty(widget);
	}
	public static void setHeight(Widget widget, Integer value){
		setHeightSwitch.setProperty(widget, value);
	}
	public static Control getTopRight(Widget widget){
		return getTopRightSwitch.getProperty(widget);
	}
	public static void setTopRight(Widget widget, Control value){
		setTopRightSwitch.setProperty(widget, value);
	}
	public static HyperlinkSettings getHyperlinkSettings(Widget widget){
		return getHyperlinkSettingsSwitch.getProperty(widget);
	}
	public static void setHyperlinkSettings(Widget widget, HyperlinkSettings value){
		setHyperlinkSettingsSwitch.setProperty(widget, value);
	}
	public static Integer getMinWidth(Widget widget){
		return getMinWidthSwitch.getProperty(widget);
	}
	public static void setMinWidth(Widget widget, Integer value){
		setMinWidthSwitch.setProperty(widget, value);
	}
	public static Transfer[] getTransfer(Widget widget){
		return getTransferSwitch.getProperty(widget);
	}
	public static void setTransfer(Widget widget, Transfer[] value){
		setTransferSwitch.setProperty(widget, value);
	}
	public static Image getActiveImage(Widget widget){
		return getActiveImageSwitch.getProperty(widget);
	}
	public static void setActiveImage(Widget widget, Image value){
		setActiveImageSwitch.setProperty(widget, value);
	}
	public static Boolean getEditable(Widget widget){
		return getEditableSwitch.getProperty(widget);
	}
	public static void setEditable(Widget widget, Boolean value){
		setEditableSwitch.setProperty(widget, value);
	}
	public static FormText getFormText(Widget widget){
		return getFormTextSwitch.getProperty(widget);
	}
	public static void setFormText(Widget widget, FormText value){
		setFormTextSwitch.setProperty(widget, value);
	}
	public static Boolean getTouchEnabled(Widget widget){
		return getTouchEnabledSwitch.getProperty(widget);
	}
	public static void setTouchEnabled(Widget widget, Boolean value){
		setTouchEnabledSwitch.setProperty(widget, value);
	}
	public static DropTargetEffect getDropTargetEffect(Widget widget){
		return getDropTargetEffectSwitch.getProperty(widget);
	}
	public static void setDropTargetEffect(Widget widget, DropTargetEffect value){
		setDropTargetEffectSwitch.setProperty(widget, value);
	}
	public static Boolean getSimple(Widget widget){
		return getSimpleSwitch.getProperty(widget);
	}
	public static void setSimple(Widget widget, Boolean value){
		setSimpleSwitch.setProperty(widget, value);
	}
	public static Color getMarginColor(Widget widget){
		return getMarginColorSwitch.getProperty(widget);
	}
	public static void setMarginColor(Widget widget, Color value){
		setMarginColorSwitch.setProperty(widget, value);
	}
	public static Integer getTopPixel(Widget widget){
		return getTopPixelSwitch.getProperty(widget);
	}
	public static void setTopPixel(Widget widget, Integer value){
		setTopPixelSwitch.setProperty(widget, value);
	}
	public static Boolean getChecked(Widget widget){
		return getCheckedSwitch.getProperty(widget);
	}
	public static void setChecked(Widget widget, Boolean value){
		setCheckedSwitch.setProperty(widget, value);
	}
	public static Color getTitleBarBorderColor(Widget widget){
		return getTitleBarBorderColorSwitch.getProperty(widget);
	}
	public static void setTitleBarBorderColor(Widget widget, Color value){
		setTitleBarBorderColorSwitch.setProperty(widget, value);
	}
	public static Boolean getLocked(Widget widget){
		return getLockedSwitch.getProperty(widget);
	}
	public static void setLocked(Widget widget, Boolean value){
		setLockedSwitch.setProperty(widget, value);
	}
	public static Caret getCaret(Widget widget){
		return getCaretSwitch.getProperty(widget);
	}
	public static void setCaret(Widget widget, Caret value){
		setCaretSwitch.setProperty(widget, value);
	}
	public static Integer getWrapIndent(Widget widget){
		return getWrapIndentSwitch.getProperty(widget);
	}
	public static void setWrapIndent(Widget widget, Integer value){
		setWrapIndentSwitch.setProperty(widget, value);
	}
	public static Boolean getAutoHide(Widget widget){
		return getAutoHideSwitch.getProperty(widget);
	}
	public static void setAutoHide(Widget widget, Boolean value){
		setAutoHideSwitch.setProperty(widget, value);
	}
	public static Boolean getEnabled(Widget widget){
		return getEnabledSwitch.getProperty(widget);
	}
	public static void setEnabled(Widget widget, Boolean value){
		setEnabledSwitch.setProperty(widget, value);
	}
	public static DragSourceEffect getDragSourceEffect(Widget widget){
		return getDragSourceEffectSwitch.getProperty(widget);
	}
	public static void setDragSourceEffect(Widget widget, DragSourceEffect value){
		setDragSourceEffectSwitch.setProperty(widget, value);
	}
	public static Boolean getShowFocusedControl(Widget widget){
		return getShowFocusedControlSwitch.getProperty(widget);
	}
	public static void setShowFocusedControl(Widget widget, Boolean value){
		setShowFocusedControlSwitch.setProperty(widget, value);
	}
	public static int[] getColumnOrder(Widget widget){
		return getColumnOrderSwitch.getProperty(widget);
	}
	public static void setColumnOrder(Widget widget, int[] value){
		setColumnOrderSwitch.setProperty(widget, value);
	}
	public static Boolean getMRUVisible(Widget widget){
		return getMRUVisibleSwitch.getProperty(widget);
	}
	public static void setMRUVisible(Widget widget, Boolean value){
		setMRUVisibleSwitch.setProperty(widget, value);
	}
	public static Boolean getGrayed(Widget widget){
		return getGrayedSwitch.getProperty(widget);
	}
	public static void setGrayed(Widget widget, Boolean value){
		setGrayedSwitch.setProperty(widget, value);
	}
	public static Integer getDay(Widget widget){
		return getDaySwitch.getProperty(widget);
	}
	public static void setDay(Widget widget, Integer value){
		setDaySwitch.setProperty(widget, value);
	}
	public static Cursor getCursor(Widget widget){
		return getCursorSwitch.getProperty(widget);
	}
	public static void setCursor(Widget widget, Cursor value){
		setCursorSwitch.setProperty(widget, value);
	}
	public static Integer getYear(Widget widget){
		return getYearSwitch.getProperty(widget);
	}
	public static void setYear(Widget widget, Integer value){
		setYearSwitch.setProperty(widget, value);
	}
	public static Integer getToolBarVerticalAlignment(Widget widget){
		return getToolBarVerticalAlignmentSwitch.getProperty(widget);
	}
	public static void setToolBarVerticalAlignment(Widget widget, Integer value){
		setToolBarVerticalAlignmentSwitch.setProperty(widget, value);
	}
	public static Region getRegion(Widget widget){
		return getRegionSwitch.getProperty(widget);
	}
	public static void setRegion(Widget widget, Region value){
		setRegionSwitch.setProperty(widget, value);
	}
	public static Integer getAccelerator(Widget widget){
		return getAcceleratorSwitch.getProperty(widget);
	}
	public static void setAccelerator(Widget widget, Integer value){
		setAcceleratorSwitch.setProperty(widget, value);
	}
	public static int[] getWrapIndices(Widget widget){
		return getWrapIndicesSwitch.getProperty(widget);
	}
	public static void setWrapIndices(Widget widget, int[] value){
		setWrapIndicesSwitch.setProperty(widget, value);
	}
	public static Integer getPageIncrement(Widget widget){
		return getPageIncrementSwitch.getProperty(widget);
	}
	public static void setPageIncrement(Widget widget, Integer value){
		setPageIncrementSwitch.setProperty(widget, value);
	}
	public static Boolean getMatchEmptyString(Widget widget){
		return getMatchEmptyStringSwitch.getProperty(widget);
	}
	public static void setMatchEmptyString(Widget widget, Boolean value){
		setMatchEmptyStringSwitch.setProperty(widget, value);
	}
	public static Integer getCompositionOffset(Widget widget){
		return getCompositionOffsetSwitch.getProperty(widget);
	}
	public static void setCompositionOffset(Widget widget, Integer value){
		setCompositionOffsetSwitch.setProperty(widget, value);
	}
	public static String getDescription(Widget widget){
		return getDescriptionSwitch.getProperty(widget);
	}
	public static void setDescription(Widget widget, String value){
		setDescriptionSwitch.setProperty(widget, value);
	}
	public static Boolean getShowClose(Widget widget){
		return getShowCloseSwitch.getProperty(widget);
	}
	public static void setShowClose(Widget widget, Boolean value){
		setShowCloseSwitch.setProperty(widget, value);
	}
	public static Color getSelectionForeground(Widget widget){
		return getSelectionForegroundSwitch.getProperty(widget);
	}
	public static void setSelectionForeground(Widget widget, Color value){
		setSelectionForegroundSwitch.setProperty(widget, value);
	}
	public static Integer getBackgroundMode(Widget widget){
		return getBackgroundModeSwitch.getProperty(widget);
	}
	public static void setBackgroundMode(Widget widget, Integer value){
		setBackgroundModeSwitch.setProperty(widget, value);
	}
	public static Color getTitleBarGradientBackground(Widget widget){
		return getTitleBarGradientBackgroundSwitch.getProperty(widget);
	}
	public static void setTitleBarGradientBackground(Widget widget, Color value){
		setTitleBarGradientBackgroundSwitch.setProperty(widget, value);
	}
	public static Rectangle getBlockSelectionBounds(Widget widget){
		return getBlockSelectionBoundsSwitch.getProperty(widget);
	}
	public static void setBlockSelectionBounds(Widget widget, Rectangle value){
		setBlockSelectionBoundsSwitch.setProperty(widget, value);
	}
	public static Integer getMinHeight(Widget widget){
		return getMinHeightSwitch.getProperty(widget);
	}
	public static void setMinHeight(Widget widget, Integer value){
		setMinHeightSwitch.setProperty(widget, value);
	}
	public static Integer getRightMargin(Widget widget){
		return getRightMarginSwitch.getProperty(widget);
	}
	public static void setRightMargin(Widget widget, Integer value){
		setRightMarginSwitch.setProperty(widget, value);
	}
	public static Point getLocation(Widget widget){
		return getLocationSwitch.getProperty(widget);
	}
	public static void setLocation(Widget widget, Point value){
		setLocationSwitch.setProperty(widget, value);
	}
	public static Integer getSpacing(Widget widget){
		return getSpacingSwitch.getProperty(widget);
	}
	public static void setSpacing(Widget widget, Integer value){
		setSpacingSwitch.setProperty(widget, value);
	}
	public static Point getMinimumSize(Widget widget){
		return getMinimumSizeSwitch.getProperty(widget);
	}
	public static void setMinimumSize(Widget widget, Point value){
		setMinimumSizeSwitch.setProperty(widget, value);
	}
	public static Control getDescriptionControl(Widget widget){
		return getDescriptionControlSwitch.getProperty(widget);
	}
	public static void setDescriptionControl(Widget widget, Control value){
		setDescriptionControlSwitch.setProperty(widget, value);
	}
	public static String getText(Widget widget){
		return getTextSwitch.getProperty(widget);
	}
	public static void setText(Widget widget, String value){
		setTextSwitch.setProperty(widget, value);
	}
	public static Integer getTabs(Widget widget){
		return getTabsSwitch.getProperty(widget);
	}
	public static void setTabs(Widget widget, Integer value){
		setTabsSwitch.setProperty(widget, value);
	}
	public static Boolean getBorderVisible(Widget widget){
		return getBorderVisibleSwitch.getProperty(widget);
	}
	public static void setBorderVisible(Widget widget, Boolean value){
		setBorderVisibleSwitch.setProperty(widget, value);
	}
	public static Integer getState(Widget widget){
		return getStateSwitch.getProperty(widget);
	}
	public static void setState(Widget widget, Integer value){
		setStateSwitch.setProperty(widget, value);
	}
	public static TreeItem getTopItem(Widget widget){
		return getTopItemSwitch.getProperty(widget);
	}
	public static void setTopItem(Widget widget, TreeItem value){
		setTopItemSwitch.setProperty(widget, value);
	}
	public static Control[] getTabList(Widget widget){
		return getTabListSwitch.getProperty(widget);
	}
	public static void setTabList(Widget widget, Control[] value){
		setTabListSwitch.setProperty(widget, value);
	}
	public static Control getTopCenter(Widget widget){
		return getTopCenterSwitch.getProperty(widget);
	}
	public static void setTopCenter(Widget widget, Control value){
		setTopCenterSwitch.setProperty(widget, value);
	}
	public static Boolean getExpandHorizontal(Widget widget){
		return getExpandHorizontalSwitch.getProperty(widget);
	}
	public static void setExpandHorizontal(Widget widget, Boolean value){
		setExpandHorizontalSwitch.setProperty(widget, value);
	}
	public static int[] getTabStops(Widget widget){
		return getTabStopsSwitch.getProperty(widget);
	}
	public static void setTabStops(Widget widget, int[] value){
		setTabStopsSwitch.setProperty(widget, value);
	}
	public static Integer getMinutes(Widget widget){
		return getMinutesSwitch.getProperty(widget);
	}
	public static void setMinutes(Widget widget, Integer value){
		setMinutesSwitch.setProperty(widget, value);
	}
	public static Boolean getExpandVertical(Widget widget){
		return getExpandVerticalSwitch.getProperty(widget);
	}
	public static void setExpandVertical(Widget widget, Boolean value){
		setExpandVerticalSwitch.setProperty(widget, value);
	}
	public static Image getHotImage(Widget widget){
		return getHotImageSwitch.getProperty(widget);
	}
	public static void setHotImage(Widget widget, Image value){
		setHotImageSwitch.setProperty(widget, value);
	}
	public static Integer getMinimumCharacters(Widget widget){
		return getMinimumCharactersSwitch.getProperty(widget);
	}
	public static void setMinimumCharacters(Widget widget, Integer value){
		setMinimumCharactersSwitch.setProperty(widget, value);
	}	

	public static Class<?>getPropertyType(String propertyName){
		PropertyEntry entry = map.get(propertyName.trim().toLowerCase());
		if(entry == null){
			return null;
		}
		else{
			return entry.type;
		}	
	}

		
}
