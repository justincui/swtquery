package kr.or.eclipse.swt.query.util;

/*
 * generated by SWT Query SDK at Mon Oct 24 13:53:19 KST 2011
 */ 
import org.eclipse.swt.dnd.DragSource;
import org.eclipse.swt.dnd.DropTarget;
import org.eclipse.swt.widgets.Caret;
import org.eclipse.ui.forms.widgets.ImageHyperlink;
import org.eclipse.ui.forms.widgets.TreeNode;
import org.eclipse.ui.forms.widgets.Twistie;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.forms.widgets.Hyperlink;
import org.eclipse.ui.forms.widgets.ScrolledForm;
import org.eclipse.ui.forms.widgets.ScrolledFormText;
import org.eclipse.ui.forms.widgets.ScrolledPageBook;
import org.eclipse.ui.forms.widgets.Section;
import org.eclipse.ui.forms.widgets.ToggleHyperlink;
import org.eclipse.swt.custom.CLabel;
import org.eclipse.swt.custom.StyledText;
import org.eclipse.swt.custom.TableCursor;
import org.eclipse.swt.opengl.GLCanvas;
import org.eclipse.swt.widgets.Decorations;
import org.eclipse.ui.forms.widgets.AbstractHyperlink;
import org.eclipse.ui.forms.widgets.ExpandableComposite;
import org.eclipse.ui.forms.widgets.FormText;
import org.eclipse.ui.forms.widgets.SharedScrolledComposite;
import org.eclipse.jface.dialogs.ProgressIndicator;
import org.eclipse.jface.wizard.ProgressMonitorPart;
import org.eclipse.swt.browser.Browser;
import org.eclipse.swt.custom.CBanner;
import org.eclipse.swt.custom.CCombo;
import org.eclipse.swt.custom.CTabFolder;
import org.eclipse.swt.custom.SashForm;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.custom.ViewForm;
import org.eclipse.swt.widgets.Canvas;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.CoolBar;
import org.eclipse.swt.widgets.DateTime;
import org.eclipse.swt.widgets.ExpandBar;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.Spinner;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.Table;
import org.eclipse.swt.widgets.ToolBar;
import org.eclipse.swt.widgets.Tree;
import org.eclipse.ui.dialogs.FilteredList;
import org.eclipse.ui.dialogs.FilteredTree;
import org.eclipse.ui.forms.widgets.Form;
import org.eclipse.ui.part.DrillDownComposite;
import org.eclipse.ui.part.PageBook;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.List;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Link;
import org.eclipse.swt.widgets.ProgressBar;
import org.eclipse.swt.widgets.Sash;
import org.eclipse.swt.widgets.Scale;
import org.eclipse.swt.widgets.Scrollable;
import org.eclipse.swt.widgets.Slider;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.widgets.IME;
import org.eclipse.swt.custom.CTabItem;
import org.eclipse.swt.widgets.CoolItem;
import org.eclipse.swt.widgets.ExpandItem;
import org.eclipse.swt.widgets.MenuItem;
import org.eclipse.swt.widgets.TabItem;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.swt.widgets.ToolItem;
import org.eclipse.swt.widgets.TrayItem;
import org.eclipse.swt.widgets.TreeColumn;
import org.eclipse.swt.widgets.TreeItem;
import org.eclipse.swt.widgets.Item;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.ScrollBar;
import org.eclipse.swt.widgets.ToolTip;
import org.eclipse.swt.widgets.Tracker;
import org.eclipse.swt.widgets.Tray;
import org.eclipse.swt.widgets.Widget;

public class WidgetSwitchWithArgument<T, A> {
	public T caseDragSource(DragSource dragSource, A arg){		
		return caseWidget(dragSource, arg);
	}
	public T caseDropTarget(DropTarget dropTarget, A arg){		
		return caseWidget(dropTarget, arg);
	}
	public T caseCaret(Caret caret, A arg){		
		return caseWidget(caret, arg);
	}
	public T caseImageHyperlink(ImageHyperlink imageHyperlink, A arg){		
		return caseHyperlink(imageHyperlink, arg);
	}
	public T caseTreeNode(TreeNode treeNode, A arg){		
		return caseToggleHyperlink(treeNode, arg);
	}
	public T caseTwistie(Twistie twistie, A arg){		
		return caseToggleHyperlink(twistie, arg);
	}
	public T caseShell(Shell shell, A arg){		
		return caseDecorations(shell, arg);
	}
	public T caseHyperlink(Hyperlink hyperlink, A arg){		
		return caseAbstractHyperlink(hyperlink, arg);
	}
	public T caseScrolledForm(ScrolledForm scrolledForm, A arg){		
		return caseSharedScrolledComposite(scrolledForm, arg);
	}
	public T caseScrolledFormText(ScrolledFormText scrolledFormText, A arg){		
		return caseSharedScrolledComposite(scrolledFormText, arg);
	}
	public T caseScrolledPageBook(ScrolledPageBook scrolledPageBook, A arg){		
		return caseSharedScrolledComposite(scrolledPageBook, arg);
	}
	public T caseSection(Section section, A arg){		
		return caseExpandableComposite(section, arg);
	}
	public T caseToggleHyperlink(ToggleHyperlink toggleHyperlink, A arg){		
		return caseAbstractHyperlink(toggleHyperlink, arg);
	}
	public T caseCLabel(CLabel cLabel, A arg){		
		return caseCanvas(cLabel, arg);
	}
	public T caseStyledText(StyledText styledText, A arg){		
		return caseCanvas(styledText, arg);
	}
	public T caseTableCursor(TableCursor tableCursor, A arg){		
		return caseCanvas(tableCursor, arg);
	}
	public T caseGLCanvas(GLCanvas gLCanvas, A arg){		
		return caseCanvas(gLCanvas, arg);
	}
	public T caseDecorations(Decorations decorations, A arg){		
		return caseCanvas(decorations, arg);
	}
	public T caseAbstractHyperlink(AbstractHyperlink abstractHyperlink, A arg){		
		return caseCanvas(abstractHyperlink, arg);
	}
	public T caseExpandableComposite(ExpandableComposite expandableComposite, A arg){		
		return caseCanvas(expandableComposite, arg);
	}
	public T caseFormText(FormText formText, A arg){		
		return caseCanvas(formText, arg);
	}
	public T caseSharedScrolledComposite(SharedScrolledComposite sharedScrolledComposite, A arg){		
		return caseScrolledComposite(sharedScrolledComposite, arg);
	}
	public T caseProgressIndicator(ProgressIndicator progressIndicator, A arg){		
		return caseComposite(progressIndicator, arg);
	}
	public T caseProgressMonitorPart(ProgressMonitorPart progressMonitorPart, A arg){		
		return caseComposite(progressMonitorPart, arg);
	}
	public T caseBrowser(Browser browser, A arg){		
		return caseComposite(browser, arg);
	}
	public T caseCBanner(CBanner cBanner, A arg){		
		return caseComposite(cBanner, arg);
	}
	public T caseCCombo(CCombo cCombo, A arg){		
		return caseComposite(cCombo, arg);
	}
	public T caseCTabFolder(CTabFolder cTabFolder, A arg){		
		return caseComposite(cTabFolder, arg);
	}
	public T caseSashForm(SashForm sashForm, A arg){		
		return caseComposite(sashForm, arg);
	}
	public T caseScrolledComposite(ScrolledComposite scrolledComposite, A arg){		
		return caseComposite(scrolledComposite, arg);
	}
	public T caseViewForm(ViewForm viewForm, A arg){		
		return caseComposite(viewForm, arg);
	}
	public T caseCanvas(Canvas canvas, A arg){		
		return caseComposite(canvas, arg);
	}
	public T caseCombo(Combo combo, A arg){		
		return caseComposite(combo, arg);
	}
	public T caseCoolBar(CoolBar coolBar, A arg){		
		return caseComposite(coolBar, arg);
	}
	public T caseDateTime(DateTime dateTime, A arg){		
		return caseComposite(dateTime, arg);
	}
	public T caseExpandBar(ExpandBar expandBar, A arg){		
		return caseComposite(expandBar, arg);
	}
	public T caseGroup(Group group, A arg){		
		return caseComposite(group, arg);
	}
	public T caseSpinner(Spinner spinner, A arg){		
		return caseComposite(spinner, arg);
	}
	public T caseTabFolder(TabFolder tabFolder, A arg){		
		return caseComposite(tabFolder, arg);
	}
	public T caseTable(Table table, A arg){		
		return caseComposite(table, arg);
	}
	public T caseToolBar(ToolBar toolBar, A arg){		
		return caseComposite(toolBar, arg);
	}
	public T caseTree(Tree tree, A arg){		
		return caseComposite(tree, arg);
	}
	public T caseFilteredList(FilteredList filteredList, A arg){		
		return caseComposite(filteredList, arg);
	}
	public T caseFilteredTree(FilteredTree filteredTree, A arg){		
		return caseComposite(filteredTree, arg);
	}
	public T caseForm(Form form, A arg){		
		return caseComposite(form, arg);
	}
	public T caseDrillDownComposite(DrillDownComposite drillDownComposite, A arg){		
		return caseComposite(drillDownComposite, arg);
	}
	public T casePageBook(PageBook pageBook, A arg){		
		return caseComposite(pageBook, arg);
	}
	public T caseComposite(Composite composite, A arg){		
		return caseScrollable(composite, arg);
	}
	public T caseList(List list, A arg){		
		return caseScrollable(list, arg);
	}
	public T caseText(Text text, A arg){		
		return caseScrollable(text, arg);
	}
	public T caseButton(Button button, A arg){		
		return caseControl(button, arg);
	}
	public T caseLabel(Label label, A arg){		
		return caseControl(label, arg);
	}
	public T caseLink(Link link, A arg){		
		return caseControl(link, arg);
	}
	public T caseProgressBar(ProgressBar progressBar, A arg){		
		return caseControl(progressBar, arg);
	}
	public T caseSash(Sash sash, A arg){		
		return caseControl(sash, arg);
	}
	public T caseScale(Scale scale, A arg){		
		return caseControl(scale, arg);
	}
	public T caseScrollable(Scrollable scrollable, A arg){		
		return caseControl(scrollable, arg);
	}
	public T caseSlider(Slider slider, A arg){		
		return caseControl(slider, arg);
	}
	public T caseControl(Control control, A arg){		
		return caseWidget(control, arg);
	}
	public T caseIME(IME iME, A arg){		
		return caseWidget(iME, arg);
	}
	public T caseCTabItem(CTabItem cTabItem, A arg){		
		return caseItem(cTabItem, arg);
	}
	public T caseCoolItem(CoolItem coolItem, A arg){		
		return caseItem(coolItem, arg);
	}
	public T caseExpandItem(ExpandItem expandItem, A arg){		
		return caseItem(expandItem, arg);
	}
	public T caseMenuItem(MenuItem menuItem, A arg){		
		return caseItem(menuItem, arg);
	}
	public T caseTabItem(TabItem tabItem, A arg){		
		return caseItem(tabItem, arg);
	}
	public T caseTableColumn(TableColumn tableColumn, A arg){		
		return caseItem(tableColumn, arg);
	}
	public T caseTableItem(TableItem tableItem, A arg){		
		return caseItem(tableItem, arg);
	}
	public T caseToolItem(ToolItem toolItem, A arg){		
		return caseItem(toolItem, arg);
	}
	public T caseTrayItem(TrayItem trayItem, A arg){		
		return caseItem(trayItem, arg);
	}
	public T caseTreeColumn(TreeColumn treeColumn, A arg){		
		return caseItem(treeColumn, arg);
	}
	public T caseTreeItem(TreeItem treeItem, A arg){		
		return caseItem(treeItem, arg);
	}
	public T caseItem(Item item, A arg){		
		return caseWidget(item, arg);
	}
	public T caseMenu(Menu menu, A arg){		
		return caseWidget(menu, arg);
	}
	public T caseScrollBar(ScrollBar scrollBar, A arg){		
		return caseWidget(scrollBar, arg);
	}
	public T caseToolTip(ToolTip toolTip, A arg){		
		return caseWidget(toolTip, arg);
	}
	public T caseTracker(Tracker tracker, A arg){		
		return caseWidget(tracker, arg);
	}
	public T caseTray(Tray tray, A arg){		
		return caseWidget(tray, arg);
	}
	public T caseWidget(Widget widget, A arg){		
		return null;
	}
	public T doSwitch(Widget widget, A arg) {
		if(widget instanceof DragSource){
			return caseDragSource((DragSource)widget, arg);
		}
		else if(widget instanceof DropTarget){
			return caseDropTarget((DropTarget)widget, arg);
		}
		else if(widget instanceof Caret){
			return caseCaret((Caret)widget, arg);
		}
		else if(widget instanceof ImageHyperlink){
			return caseImageHyperlink((ImageHyperlink)widget, arg);
		}
		else if(widget instanceof TreeNode){
			return caseTreeNode((TreeNode)widget, arg);
		}
		else if(widget instanceof Twistie){
			return caseTwistie((Twistie)widget, arg);
		}
		else if(widget instanceof Shell){
			return caseShell((Shell)widget, arg);
		}
		else if(widget instanceof Hyperlink){
			return caseHyperlink((Hyperlink)widget, arg);
		}
		else if(widget instanceof ScrolledForm){
			return caseScrolledForm((ScrolledForm)widget, arg);
		}
		else if(widget instanceof ScrolledFormText){
			return caseScrolledFormText((ScrolledFormText)widget, arg);
		}
		else if(widget instanceof ScrolledPageBook){
			return caseScrolledPageBook((ScrolledPageBook)widget, arg);
		}
		else if(widget instanceof Section){
			return caseSection((Section)widget, arg);
		}
		else if(widget instanceof ToggleHyperlink){
			return caseToggleHyperlink((ToggleHyperlink)widget, arg);
		}
		else if(widget instanceof CLabel){
			return caseCLabel((CLabel)widget, arg);
		}
		else if(widget instanceof StyledText){
			return caseStyledText((StyledText)widget, arg);
		}
		else if(widget instanceof TableCursor){
			return caseTableCursor((TableCursor)widget, arg);
		}
		else if(widget instanceof GLCanvas){
			return caseGLCanvas((GLCanvas)widget, arg);
		}
		else if(widget instanceof Decorations){
			return caseDecorations((Decorations)widget, arg);
		}
		else if(widget instanceof AbstractHyperlink){
			return caseAbstractHyperlink((AbstractHyperlink)widget, arg);
		}
		else if(widget instanceof ExpandableComposite){
			return caseExpandableComposite((ExpandableComposite)widget, arg);
		}
		else if(widget instanceof FormText){
			return caseFormText((FormText)widget, arg);
		}
		else if(widget instanceof SharedScrolledComposite){
			return caseSharedScrolledComposite((SharedScrolledComposite)widget, arg);
		}
		else if(widget instanceof ProgressIndicator){
			return caseProgressIndicator((ProgressIndicator)widget, arg);
		}
		else if(widget instanceof ProgressMonitorPart){
			return caseProgressMonitorPart((ProgressMonitorPart)widget, arg);
		}
		else if(widget instanceof Browser){
			return caseBrowser((Browser)widget, arg);
		}
		else if(widget instanceof CBanner){
			return caseCBanner((CBanner)widget, arg);
		}
		else if(widget instanceof CCombo){
			return caseCCombo((CCombo)widget, arg);
		}
		else if(widget instanceof CTabFolder){
			return caseCTabFolder((CTabFolder)widget, arg);
		}
		else if(widget instanceof SashForm){
			return caseSashForm((SashForm)widget, arg);
		}
		else if(widget instanceof ScrolledComposite){
			return caseScrolledComposite((ScrolledComposite)widget, arg);
		}
		else if(widget instanceof ViewForm){
			return caseViewForm((ViewForm)widget, arg);
		}
		else if(widget instanceof Canvas){
			return caseCanvas((Canvas)widget, arg);
		}
		else if(widget instanceof Combo){
			return caseCombo((Combo)widget, arg);
		}
		else if(widget instanceof CoolBar){
			return caseCoolBar((CoolBar)widget, arg);
		}
		else if(widget instanceof DateTime){
			return caseDateTime((DateTime)widget, arg);
		}
		else if(widget instanceof ExpandBar){
			return caseExpandBar((ExpandBar)widget, arg);
		}
		else if(widget instanceof Group){
			return caseGroup((Group)widget, arg);
		}
		else if(widget instanceof Spinner){
			return caseSpinner((Spinner)widget, arg);
		}
		else if(widget instanceof TabFolder){
			return caseTabFolder((TabFolder)widget, arg);
		}
		else if(widget instanceof Table){
			return caseTable((Table)widget, arg);
		}
		else if(widget instanceof ToolBar){
			return caseToolBar((ToolBar)widget, arg);
		}
		else if(widget instanceof Tree){
			return caseTree((Tree)widget, arg);
		}
		else if(widget instanceof FilteredList){
			return caseFilteredList((FilteredList)widget, arg);
		}
		else if(widget instanceof FilteredTree){
			return caseFilteredTree((FilteredTree)widget, arg);
		}
		else if(widget instanceof Form){
			return caseForm((Form)widget, arg);
		}
		else if(widget instanceof DrillDownComposite){
			return caseDrillDownComposite((DrillDownComposite)widget, arg);
		}
		else if(widget instanceof PageBook){
			return casePageBook((PageBook)widget, arg);
		}
		else if(widget instanceof Composite){
			return caseComposite((Composite)widget, arg);
		}
		else if(widget instanceof List){
			return caseList((List)widget, arg);
		}
		else if(widget instanceof Text){
			return caseText((Text)widget, arg);
		}
		else if(widget instanceof Button){
			return caseButton((Button)widget, arg);
		}
		else if(widget instanceof Label){
			return caseLabel((Label)widget, arg);
		}
		else if(widget instanceof Link){
			return caseLink((Link)widget, arg);
		}
		else if(widget instanceof ProgressBar){
			return caseProgressBar((ProgressBar)widget, arg);
		}
		else if(widget instanceof Sash){
			return caseSash((Sash)widget, arg);
		}
		else if(widget instanceof Scale){
			return caseScale((Scale)widget, arg);
		}
		else if(widget instanceof Scrollable){
			return caseScrollable((Scrollable)widget, arg);
		}
		else if(widget instanceof Slider){
			return caseSlider((Slider)widget, arg);
		}
		else if(widget instanceof Control){
			return caseControl((Control)widget, arg);
		}
		else if(widget instanceof IME){
			return caseIME((IME)widget, arg);
		}
		else if(widget instanceof CTabItem){
			return caseCTabItem((CTabItem)widget, arg);
		}
		else if(widget instanceof CoolItem){
			return caseCoolItem((CoolItem)widget, arg);
		}
		else if(widget instanceof ExpandItem){
			return caseExpandItem((ExpandItem)widget, arg);
		}
		else if(widget instanceof MenuItem){
			return caseMenuItem((MenuItem)widget, arg);
		}
		else if(widget instanceof TabItem){
			return caseTabItem((TabItem)widget, arg);
		}
		else if(widget instanceof TableColumn){
			return caseTableColumn((TableColumn)widget, arg);
		}
		else if(widget instanceof TableItem){
			return caseTableItem((TableItem)widget, arg);
		}
		else if(widget instanceof ToolItem){
			return caseToolItem((ToolItem)widget, arg);
		}
		else if(widget instanceof TrayItem){
			return caseTrayItem((TrayItem)widget, arg);
		}
		else if(widget instanceof TreeColumn){
			return caseTreeColumn((TreeColumn)widget, arg);
		}
		else if(widget instanceof TreeItem){
			return caseTreeItem((TreeItem)widget, arg);
		}
		else if(widget instanceof Item){
			return caseItem((Item)widget, arg);
		}
		else if(widget instanceof Menu){
			return caseMenu((Menu)widget, arg);
		}
		else if(widget instanceof ScrollBar){
			return caseScrollBar((ScrollBar)widget, arg);
		}
		else if(widget instanceof ToolTip){
			return caseToolTip((ToolTip)widget, arg);
		}
		else if(widget instanceof Tracker){
			return caseTracker((Tracker)widget, arg);
		}
		else if(widget instanceof Tray){
			return caseTray((Tray)widget, arg);
		}
		else {
			return caseWidget((Widget)widget, arg);
		}
    }
}
    