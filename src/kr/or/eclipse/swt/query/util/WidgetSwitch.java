/*
 * Copyright 2011 jeeeyul@gmail.com
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 */

package kr.or.eclipse.swt.query.util;
 
import org.eclipse.ui.forms.widgets.FormText;
import org.eclipse.swt.widgets.TableItem;
import org.eclipse.swt.widgets.Scrollable;
import org.eclipse.ui.dialogs.FilteredTree;
import org.eclipse.swt.widgets.Link;
import org.eclipse.swt.dnd.DragSource;
import org.eclipse.swt.widgets.TreeItem;
import org.eclipse.swt.widgets.Tracker;
import org.eclipse.jface.dialogs.ProgressIndicator;
import org.eclipse.ui.forms.widgets.Hyperlink;
import org.eclipse.swt.browser.Browser;
import org.eclipse.swt.widgets.Item;
import org.eclipse.swt.custom.CLabel;
import org.eclipse.ui.forms.widgets.ScrolledFormText;
import org.eclipse.swt.widgets.ProgressBar;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.ToolBar;
import org.eclipse.ui.forms.widgets.Section;
import org.eclipse.swt.widgets.Decorations;
import org.eclipse.swt.widgets.CoolBar;
import org.eclipse.swt.widgets.TreeColumn;
import org.eclipse.swt.widgets.Canvas;
import org.eclipse.ui.part.DrillDownComposite;
import org.eclipse.swt.custom.TableCursor;
import org.eclipse.jface.wizard.ProgressMonitorPart;
import org.eclipse.swt.widgets.Text;
import org.eclipse.ui.forms.widgets.TreeNode;
import org.eclipse.swt.custom.CTabItem;
import org.eclipse.swt.widgets.Slider;
import org.eclipse.swt.widgets.Table;
import org.eclipse.ui.forms.widgets.AbstractHyperlink;
import org.eclipse.swt.widgets.Tray;
import org.eclipse.ui.forms.widgets.SharedScrolledComposite;
import org.eclipse.swt.widgets.Group;
import org.eclipse.swt.widgets.ToolItem;
import org.eclipse.swt.custom.CCombo;
import org.eclipse.ui.forms.widgets.ScrolledForm;
import org.eclipse.ui.part.PageBook;
import org.eclipse.swt.widgets.TabItem;
import org.eclipse.swt.widgets.CoolItem;
import org.eclipse.swt.widgets.TrayItem;
import org.eclipse.swt.widgets.Widget;
import org.eclipse.swt.widgets.Spinner;
import org.eclipse.ui.forms.widgets.ExpandableComposite;
import org.eclipse.swt.widgets.ScrollBar;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.custom.CTabFolder;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.opengl.GLCanvas;
import org.eclipse.swt.widgets.TableColumn;
import org.eclipse.swt.widgets.ToolTip;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.Caret;
import org.eclipse.swt.widgets.DateTime;
import org.eclipse.ui.forms.widgets.Twistie;
import org.eclipse.ui.forms.widgets.Form;
import org.eclipse.swt.custom.StyledText;
import org.eclipse.swt.widgets.Tree;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.ui.forms.widgets.ToggleHyperlink;
import org.eclipse.ui.forms.widgets.ScrolledPageBook;
import org.eclipse.swt.custom.CBanner;
import org.eclipse.swt.dnd.DropTarget;
import org.eclipse.ui.dialogs.FilteredList;
import org.eclipse.swt.widgets.List;
import org.eclipse.swt.widgets.Control;
import org.eclipse.swt.custom.ViewForm;
import org.eclipse.swt.widgets.Sash;
import org.eclipse.swt.widgets.Combo;
import org.eclipse.swt.widgets.ExpandBar;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.ui.forms.widgets.ImageHyperlink;
import org.eclipse.swt.widgets.IME;
import org.eclipse.swt.widgets.MenuItem;
import org.eclipse.swt.widgets.ExpandItem;
import org.eclipse.swt.widgets.Scale;
import org.eclipse.swt.custom.SashForm;


/*
 * This file was generated by SWT Query SDK.
 * So you should not modify it manually.
 * If you want to customize this code, contact below:
 *
 * http://code.google.com/p/swtquery/
 */
public class WidgetSwitch<T> {
    /**
     * do switching for DragSource.
     * @param dragSource DragSource to switch.
     * @return switching result.
     */
	public T caseDragSource(DragSource dragSource){		
		return caseWidget(dragSource);
	}
    /**
     * do switching for DropTarget.
     * @param dropTarget DropTarget to switch.
     * @return switching result.
     */
	public T caseDropTarget(DropTarget dropTarget){		
		return caseWidget(dropTarget);
	}
    /**
     * do switching for Caret.
     * @param caret Caret to switch.
     * @return switching result.
     */
	public T caseCaret(Caret caret){		
		return caseWidget(caret);
	}
    /**
     * do switching for ImageHyperlink.
     * @param imageHyperlink ImageHyperlink to switch.
     * @return switching result.
     */
	public T caseImageHyperlink(ImageHyperlink imageHyperlink){		
		return caseHyperlink(imageHyperlink);
	}
    /**
     * do switching for TreeNode.
     * @param treeNode TreeNode to switch.
     * @return switching result.
     */
	public T caseTreeNode(TreeNode treeNode){		
		return caseToggleHyperlink(treeNode);
	}
    /**
     * do switching for Twistie.
     * @param twistie Twistie to switch.
     * @return switching result.
     */
	public T caseTwistie(Twistie twistie){		
		return caseToggleHyperlink(twistie);
	}
    /**
     * do switching for Shell.
     * @param shell Shell to switch.
     * @return switching result.
     */
	public T caseShell(Shell shell){		
		return caseDecorations(shell);
	}
    /**
     * do switching for Hyperlink.
     * @param hyperlink Hyperlink to switch.
     * @return switching result.
     */
	public T caseHyperlink(Hyperlink hyperlink){		
		return caseAbstractHyperlink(hyperlink);
	}
    /**
     * do switching for ScrolledForm.
     * @param scrolledForm ScrolledForm to switch.
     * @return switching result.
     */
	public T caseScrolledForm(ScrolledForm scrolledForm){		
		return caseSharedScrolledComposite(scrolledForm);
	}
    /**
     * do switching for ScrolledFormText.
     * @param scrolledFormText ScrolledFormText to switch.
     * @return switching result.
     */
	public T caseScrolledFormText(ScrolledFormText scrolledFormText){		
		return caseSharedScrolledComposite(scrolledFormText);
	}
    /**
     * do switching for ScrolledPageBook.
     * @param scrolledPageBook ScrolledPageBook to switch.
     * @return switching result.
     */
	public T caseScrolledPageBook(ScrolledPageBook scrolledPageBook){		
		return caseSharedScrolledComposite(scrolledPageBook);
	}
    /**
     * do switching for Section.
     * @param section Section to switch.
     * @return switching result.
     */
	public T caseSection(Section section){		
		return caseExpandableComposite(section);
	}
    /**
     * do switching for ToggleHyperlink.
     * @param toggleHyperlink ToggleHyperlink to switch.
     * @return switching result.
     */
	public T caseToggleHyperlink(ToggleHyperlink toggleHyperlink){		
		return caseAbstractHyperlink(toggleHyperlink);
	}
    /**
     * do switching for CLabel.
     * @param cLabel CLabel to switch.
     * @return switching result.
     */
	public T caseCLabel(CLabel cLabel){		
		return caseCanvas(cLabel);
	}
    /**
     * do switching for StyledText.
     * @param styledText StyledText to switch.
     * @return switching result.
     */
	public T caseStyledText(StyledText styledText){		
		return caseCanvas(styledText);
	}
    /**
     * do switching for TableCursor.
     * @param tableCursor TableCursor to switch.
     * @return switching result.
     */
	public T caseTableCursor(TableCursor tableCursor){		
		return caseCanvas(tableCursor);
	}
    /**
     * do switching for GLCanvas.
     * @param gLCanvas GLCanvas to switch.
     * @return switching result.
     */
	public T caseGLCanvas(GLCanvas gLCanvas){		
		return caseCanvas(gLCanvas);
	}
    /**
     * do switching for Decorations.
     * @param decorations Decorations to switch.
     * @return switching result.
     */
	public T caseDecorations(Decorations decorations){		
		return caseCanvas(decorations);
	}
    /**
     * do switching for AbstractHyperlink.
     * @param abstractHyperlink AbstractHyperlink to switch.
     * @return switching result.
     */
	public T caseAbstractHyperlink(AbstractHyperlink abstractHyperlink){		
		return caseCanvas(abstractHyperlink);
	}
    /**
     * do switching for ExpandableComposite.
     * @param expandableComposite ExpandableComposite to switch.
     * @return switching result.
     */
	public T caseExpandableComposite(ExpandableComposite expandableComposite){		
		return caseCanvas(expandableComposite);
	}
    /**
     * do switching for FormText.
     * @param formText FormText to switch.
     * @return switching result.
     */
	public T caseFormText(FormText formText){		
		return caseCanvas(formText);
	}
    /**
     * do switching for SharedScrolledComposite.
     * @param sharedScrolledComposite SharedScrolledComposite to switch.
     * @return switching result.
     */
	public T caseSharedScrolledComposite(SharedScrolledComposite sharedScrolledComposite){		
		return caseScrolledComposite(sharedScrolledComposite);
	}
    /**
     * do switching for ProgressIndicator.
     * @param progressIndicator ProgressIndicator to switch.
     * @return switching result.
     */
	public T caseProgressIndicator(ProgressIndicator progressIndicator){		
		return caseComposite(progressIndicator);
	}
    /**
     * do switching for ProgressMonitorPart.
     * @param progressMonitorPart ProgressMonitorPart to switch.
     * @return switching result.
     */
	public T caseProgressMonitorPart(ProgressMonitorPart progressMonitorPart){		
		return caseComposite(progressMonitorPart);
	}
    /**
     * do switching for Browser.
     * @param browser Browser to switch.
     * @return switching result.
     */
	public T caseBrowser(Browser browser){		
		return caseComposite(browser);
	}
    /**
     * do switching for CBanner.
     * @param cBanner CBanner to switch.
     * @return switching result.
     */
	public T caseCBanner(CBanner cBanner){		
		return caseComposite(cBanner);
	}
    /**
     * do switching for CCombo.
     * @param cCombo CCombo to switch.
     * @return switching result.
     */
	public T caseCCombo(CCombo cCombo){		
		return caseComposite(cCombo);
	}
    /**
     * do switching for CTabFolder.
     * @param cTabFolder CTabFolder to switch.
     * @return switching result.
     */
	public T caseCTabFolder(CTabFolder cTabFolder){		
		return caseComposite(cTabFolder);
	}
    /**
     * do switching for SashForm.
     * @param sashForm SashForm to switch.
     * @return switching result.
     */
	public T caseSashForm(SashForm sashForm){		
		return caseComposite(sashForm);
	}
    /**
     * do switching for ScrolledComposite.
     * @param scrolledComposite ScrolledComposite to switch.
     * @return switching result.
     */
	public T caseScrolledComposite(ScrolledComposite scrolledComposite){		
		return caseComposite(scrolledComposite);
	}
    /**
     * do switching for ViewForm.
     * @param viewForm ViewForm to switch.
     * @return switching result.
     */
	public T caseViewForm(ViewForm viewForm){		
		return caseComposite(viewForm);
	}
    /**
     * do switching for Canvas.
     * @param canvas Canvas to switch.
     * @return switching result.
     */
	public T caseCanvas(Canvas canvas){		
		return caseComposite(canvas);
	}
    /**
     * do switching for Combo.
     * @param combo Combo to switch.
     * @return switching result.
     */
	public T caseCombo(Combo combo){		
		return caseComposite(combo);
	}
    /**
     * do switching for CoolBar.
     * @param coolBar CoolBar to switch.
     * @return switching result.
     */
	public T caseCoolBar(CoolBar coolBar){		
		return caseComposite(coolBar);
	}
    /**
     * do switching for DateTime.
     * @param dateTime DateTime to switch.
     * @return switching result.
     */
	public T caseDateTime(DateTime dateTime){		
		return caseComposite(dateTime);
	}
    /**
     * do switching for ExpandBar.
     * @param expandBar ExpandBar to switch.
     * @return switching result.
     */
	public T caseExpandBar(ExpandBar expandBar){		
		return caseComposite(expandBar);
	}
    /**
     * do switching for Group.
     * @param group Group to switch.
     * @return switching result.
     */
	public T caseGroup(Group group){		
		return caseComposite(group);
	}
    /**
     * do switching for Spinner.
     * @param spinner Spinner to switch.
     * @return switching result.
     */
	public T caseSpinner(Spinner spinner){		
		return caseComposite(spinner);
	}
    /**
     * do switching for TabFolder.
     * @param tabFolder TabFolder to switch.
     * @return switching result.
     */
	public T caseTabFolder(TabFolder tabFolder){		
		return caseComposite(tabFolder);
	}
    /**
     * do switching for Table.
     * @param table Table to switch.
     * @return switching result.
     */
	public T caseTable(Table table){		
		return caseComposite(table);
	}
    /**
     * do switching for ToolBar.
     * @param toolBar ToolBar to switch.
     * @return switching result.
     */
	public T caseToolBar(ToolBar toolBar){		
		return caseComposite(toolBar);
	}
    /**
     * do switching for Tree.
     * @param tree Tree to switch.
     * @return switching result.
     */
	public T caseTree(Tree tree){		
		return caseComposite(tree);
	}
    /**
     * do switching for FilteredList.
     * @param filteredList FilteredList to switch.
     * @return switching result.
     */
	public T caseFilteredList(FilteredList filteredList){		
		return caseComposite(filteredList);
	}
    /**
     * do switching for FilteredTree.
     * @param filteredTree FilteredTree to switch.
     * @return switching result.
     */
	public T caseFilteredTree(FilteredTree filteredTree){		
		return caseComposite(filteredTree);
	}
    /**
     * do switching for Form.
     * @param form Form to switch.
     * @return switching result.
     */
	public T caseForm(Form form){		
		return caseComposite(form);
	}
    /**
     * do switching for DrillDownComposite.
     * @param drillDownComposite DrillDownComposite to switch.
     * @return switching result.
     */
	public T caseDrillDownComposite(DrillDownComposite drillDownComposite){		
		return caseComposite(drillDownComposite);
	}
    /**
     * do switching for PageBook.
     * @param pageBook PageBook to switch.
     * @return switching result.
     */
	public T casePageBook(PageBook pageBook){		
		return caseComposite(pageBook);
	}
    /**
     * do switching for Composite.
     * @param composite Composite to switch.
     * @return switching result.
     */
	public T caseComposite(Composite composite){		
		return caseScrollable(composite);
	}
    /**
     * do switching for List.
     * @param list List to switch.
     * @return switching result.
     */
	public T caseList(List list){		
		return caseScrollable(list);
	}
    /**
     * do switching for Text.
     * @param text Text to switch.
     * @return switching result.
     */
	public T caseText(Text text){		
		return caseScrollable(text);
	}
    /**
     * do switching for Button.
     * @param button Button to switch.
     * @return switching result.
     */
	public T caseButton(Button button){		
		return caseControl(button);
	}
    /**
     * do switching for Label.
     * @param label Label to switch.
     * @return switching result.
     */
	public T caseLabel(Label label){		
		return caseControl(label);
	}
    /**
     * do switching for Link.
     * @param link Link to switch.
     * @return switching result.
     */
	public T caseLink(Link link){		
		return caseControl(link);
	}
    /**
     * do switching for ProgressBar.
     * @param progressBar ProgressBar to switch.
     * @return switching result.
     */
	public T caseProgressBar(ProgressBar progressBar){		
		return caseControl(progressBar);
	}
    /**
     * do switching for Sash.
     * @param sash Sash to switch.
     * @return switching result.
     */
	public T caseSash(Sash sash){		
		return caseControl(sash);
	}
    /**
     * do switching for Scale.
     * @param scale Scale to switch.
     * @return switching result.
     */
	public T caseScale(Scale scale){		
		return caseControl(scale);
	}
    /**
     * do switching for Scrollable.
     * @param scrollable Scrollable to switch.
     * @return switching result.
     */
	public T caseScrollable(Scrollable scrollable){		
		return caseControl(scrollable);
	}
    /**
     * do switching for Slider.
     * @param slider Slider to switch.
     * @return switching result.
     */
	public T caseSlider(Slider slider){		
		return caseControl(slider);
	}
    /**
     * do switching for Control.
     * @param control Control to switch.
     * @return switching result.
     */
	public T caseControl(Control control){		
		return caseWidget(control);
	}
    /**
     * do switching for IME.
     * @param iME IME to switch.
     * @return switching result.
     */
	public T caseIME(IME iME){		
		return caseWidget(iME);
	}
    /**
     * do switching for CTabItem.
     * @param cTabItem CTabItem to switch.
     * @return switching result.
     */
	public T caseCTabItem(CTabItem cTabItem){		
		return caseItem(cTabItem);
	}
    /**
     * do switching for CoolItem.
     * @param coolItem CoolItem to switch.
     * @return switching result.
     */
	public T caseCoolItem(CoolItem coolItem){		
		return caseItem(coolItem);
	}
    /**
     * do switching for ExpandItem.
     * @param expandItem ExpandItem to switch.
     * @return switching result.
     */
	public T caseExpandItem(ExpandItem expandItem){		
		return caseItem(expandItem);
	}
    /**
     * do switching for MenuItem.
     * @param menuItem MenuItem to switch.
     * @return switching result.
     */
	public T caseMenuItem(MenuItem menuItem){		
		return caseItem(menuItem);
	}
    /**
     * do switching for TabItem.
     * @param tabItem TabItem to switch.
     * @return switching result.
     */
	public T caseTabItem(TabItem tabItem){		
		return caseItem(tabItem);
	}
    /**
     * do switching for TableColumn.
     * @param tableColumn TableColumn to switch.
     * @return switching result.
     */
	public T caseTableColumn(TableColumn tableColumn){		
		return caseItem(tableColumn);
	}
    /**
     * do switching for TableItem.
     * @param tableItem TableItem to switch.
     * @return switching result.
     */
	public T caseTableItem(TableItem tableItem){		
		return caseItem(tableItem);
	}
    /**
     * do switching for ToolItem.
     * @param toolItem ToolItem to switch.
     * @return switching result.
     */
	public T caseToolItem(ToolItem toolItem){		
		return caseItem(toolItem);
	}
    /**
     * do switching for TrayItem.
     * @param trayItem TrayItem to switch.
     * @return switching result.
     */
	public T caseTrayItem(TrayItem trayItem){		
		return caseItem(trayItem);
	}
    /**
     * do switching for TreeColumn.
     * @param treeColumn TreeColumn to switch.
     * @return switching result.
     */
	public T caseTreeColumn(TreeColumn treeColumn){		
		return caseItem(treeColumn);
	}
    /**
     * do switching for TreeItem.
     * @param treeItem TreeItem to switch.
     * @return switching result.
     */
	public T caseTreeItem(TreeItem treeItem){		
		return caseItem(treeItem);
	}
    /**
     * do switching for Item.
     * @param item Item to switch.
     * @return switching result.
     */
	public T caseItem(Item item){		
		return caseWidget(item);
	}
    /**
     * do switching for Menu.
     * @param menu Menu to switch.
     * @return switching result.
     */
	public T caseMenu(Menu menu){		
		return caseWidget(menu);
	}
    /**
     * do switching for ScrollBar.
     * @param scrollBar ScrollBar to switch.
     * @return switching result.
     */
	public T caseScrollBar(ScrollBar scrollBar){		
		return caseWidget(scrollBar);
	}
    /**
     * do switching for ToolTip.
     * @param toolTip ToolTip to switch.
     * @return switching result.
     */
	public T caseToolTip(ToolTip toolTip){		
		return caseWidget(toolTip);
	}
    /**
     * do switching for Tracker.
     * @param tracker Tracker to switch.
     * @return switching result.
     */
	public T caseTracker(Tracker tracker){		
		return caseWidget(tracker);
	}
    /**
     * do switching for Tray.
     * @param tray Tray to switch.
     * @return switching result.
     */
	public T caseTray(Tray tray){		
		return caseWidget(tray);
	}
    /**
     * do switching for Widget.
     * @param widget Widget to switch.
     * @return switching result.
     */
	public T caseWidget(Widget widget){		
		return null;
	}
	public final T doSwitch(Widget widget) {
		if(widget instanceof DragSource){
			return caseDragSource((DragSource)widget);
		}
		else if(widget instanceof DropTarget){
			return caseDropTarget((DropTarget)widget);
		}
		else if(widget instanceof Caret){
			return caseCaret((Caret)widget);
		}
		else if(widget instanceof ImageHyperlink){
			return caseImageHyperlink((ImageHyperlink)widget);
		}
		else if(widget instanceof TreeNode){
			return caseTreeNode((TreeNode)widget);
		}
		else if(widget instanceof Twistie){
			return caseTwistie((Twistie)widget);
		}
		else if(widget instanceof Shell){
			return caseShell((Shell)widget);
		}
		else if(widget instanceof Hyperlink){
			return caseHyperlink((Hyperlink)widget);
		}
		else if(widget instanceof ScrolledForm){
			return caseScrolledForm((ScrolledForm)widget);
		}
		else if(widget instanceof ScrolledFormText){
			return caseScrolledFormText((ScrolledFormText)widget);
		}
		else if(widget instanceof ScrolledPageBook){
			return caseScrolledPageBook((ScrolledPageBook)widget);
		}
		else if(widget instanceof Section){
			return caseSection((Section)widget);
		}
		else if(widget instanceof ToggleHyperlink){
			return caseToggleHyperlink((ToggleHyperlink)widget);
		}
		else if(widget instanceof CLabel){
			return caseCLabel((CLabel)widget);
		}
		else if(widget instanceof StyledText){
			return caseStyledText((StyledText)widget);
		}
		else if(widget instanceof TableCursor){
			return caseTableCursor((TableCursor)widget);
		}
		else if(widget instanceof GLCanvas){
			return caseGLCanvas((GLCanvas)widget);
		}
		else if(widget instanceof Decorations){
			return caseDecorations((Decorations)widget);
		}
		else if(widget instanceof AbstractHyperlink){
			return caseAbstractHyperlink((AbstractHyperlink)widget);
		}
		else if(widget instanceof ExpandableComposite){
			return caseExpandableComposite((ExpandableComposite)widget);
		}
		else if(widget instanceof FormText){
			return caseFormText((FormText)widget);
		}
		else if(widget instanceof SharedScrolledComposite){
			return caseSharedScrolledComposite((SharedScrolledComposite)widget);
		}
		else if(widget instanceof ProgressIndicator){
			return caseProgressIndicator((ProgressIndicator)widget);
		}
		else if(widget instanceof ProgressMonitorPart){
			return caseProgressMonitorPart((ProgressMonitorPart)widget);
		}
		else if(widget instanceof Browser){
			return caseBrowser((Browser)widget);
		}
		else if(widget instanceof CBanner){
			return caseCBanner((CBanner)widget);
		}
		else if(widget instanceof CCombo){
			return caseCCombo((CCombo)widget);
		}
		else if(widget instanceof CTabFolder){
			return caseCTabFolder((CTabFolder)widget);
		}
		else if(widget instanceof SashForm){
			return caseSashForm((SashForm)widget);
		}
		else if(widget instanceof ScrolledComposite){
			return caseScrolledComposite((ScrolledComposite)widget);
		}
		else if(widget instanceof ViewForm){
			return caseViewForm((ViewForm)widget);
		}
		else if(widget instanceof Canvas){
			return caseCanvas((Canvas)widget);
		}
		else if(widget instanceof Combo){
			return caseCombo((Combo)widget);
		}
		else if(widget instanceof CoolBar){
			return caseCoolBar((CoolBar)widget);
		}
		else if(widget instanceof DateTime){
			return caseDateTime((DateTime)widget);
		}
		else if(widget instanceof ExpandBar){
			return caseExpandBar((ExpandBar)widget);
		}
		else if(widget instanceof Group){
			return caseGroup((Group)widget);
		}
		else if(widget instanceof Spinner){
			return caseSpinner((Spinner)widget);
		}
		else if(widget instanceof TabFolder){
			return caseTabFolder((TabFolder)widget);
		}
		else if(widget instanceof Table){
			return caseTable((Table)widget);
		}
		else if(widget instanceof ToolBar){
			return caseToolBar((ToolBar)widget);
		}
		else if(widget instanceof Tree){
			return caseTree((Tree)widget);
		}
		else if(widget instanceof FilteredList){
			return caseFilteredList((FilteredList)widget);
		}
		else if(widget instanceof FilteredTree){
			return caseFilteredTree((FilteredTree)widget);
		}
		else if(widget instanceof Form){
			return caseForm((Form)widget);
		}
		else if(widget instanceof DrillDownComposite){
			return caseDrillDownComposite((DrillDownComposite)widget);
		}
		else if(widget instanceof PageBook){
			return casePageBook((PageBook)widget);
		}
		else if(widget instanceof Composite){
			return caseComposite((Composite)widget);
		}
		else if(widget instanceof List){
			return caseList((List)widget);
		}
		else if(widget instanceof Text){
			return caseText((Text)widget);
		}
		else if(widget instanceof Button){
			return caseButton((Button)widget);
		}
		else if(widget instanceof Label){
			return caseLabel((Label)widget);
		}
		else if(widget instanceof Link){
			return caseLink((Link)widget);
		}
		else if(widget instanceof ProgressBar){
			return caseProgressBar((ProgressBar)widget);
		}
		else if(widget instanceof Sash){
			return caseSash((Sash)widget);
		}
		else if(widget instanceof Scale){
			return caseScale((Scale)widget);
		}
		else if(widget instanceof Scrollable){
			return caseScrollable((Scrollable)widget);
		}
		else if(widget instanceof Slider){
			return caseSlider((Slider)widget);
		}
		else if(widget instanceof Control){
			return caseControl((Control)widget);
		}
		else if(widget instanceof IME){
			return caseIME((IME)widget);
		}
		else if(widget instanceof CTabItem){
			return caseCTabItem((CTabItem)widget);
		}
		else if(widget instanceof CoolItem){
			return caseCoolItem((CoolItem)widget);
		}
		else if(widget instanceof ExpandItem){
			return caseExpandItem((ExpandItem)widget);
		}
		else if(widget instanceof MenuItem){
			return caseMenuItem((MenuItem)widget);
		}
		else if(widget instanceof TabItem){
			return caseTabItem((TabItem)widget);
		}
		else if(widget instanceof TableColumn){
			return caseTableColumn((TableColumn)widget);
		}
		else if(widget instanceof TableItem){
			return caseTableItem((TableItem)widget);
		}
		else if(widget instanceof ToolItem){
			return caseToolItem((ToolItem)widget);
		}
		else if(widget instanceof TrayItem){
			return caseTrayItem((TrayItem)widget);
		}
		else if(widget instanceof TreeColumn){
			return caseTreeColumn((TreeColumn)widget);
		}
		else if(widget instanceof TreeItem){
			return caseTreeItem((TreeItem)widget);
		}
		else if(widget instanceof Item){
			return caseItem((Item)widget);
		}
		else if(widget instanceof Menu){
			return caseMenu((Menu)widget);
		}
		else if(widget instanceof ScrollBar){
			return caseScrollBar((ScrollBar)widget);
		}
		else if(widget instanceof ToolTip){
			return caseToolTip((ToolTip)widget);
		}
		else if(widget instanceof Tracker){
			return caseTracker((Tracker)widget);
		}
		else if(widget instanceof Tray){
			return caseTray((Tray)widget);
		}
		else {
			return caseWidget((Widget)widget);
		}
    }
}
    